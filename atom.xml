<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Leah&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-03-06T14:06:58.578Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Leah Zheng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>事件冒泡、事件捕获、DOM2事件流和事件委托、DOM事件中Event对象</title>
    <link href="http://yoursite.com/2021/03/06/%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E3%80%81%E4%BA%8B%E4%BB%B6%E6%8D%95%E8%8E%B7%E3%80%81DOM2%E4%BA%8B%E4%BB%B6%E6%B5%81%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98%E3%80%81DOM%E4%BA%8B%E4%BB%B6%E4%B8%ADEvent%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2021/03/06/%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E3%80%81%E4%BA%8B%E4%BB%B6%E6%8D%95%E8%8E%B7%E3%80%81DOM2%E4%BA%8B%E4%BB%B6%E6%B5%81%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98%E3%80%81DOM%E4%BA%8B%E4%BB%B6%E4%B8%ADEvent%E5%AF%B9%E8%B1%A1/</id>
    <published>2021-03-06T08:12:32.000Z</published>
    <updated>2021-03-06T14:06:58.578Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="事件冒泡、事件捕获、DOM2事件流和事件委托、DOM事件中Event对象"><a href="#事件冒泡、事件捕获、DOM2事件流和事件委托、DOM事件中Event对象" class="headerlink" title="事件冒泡、事件捕获、DOM2事件流和事件委托、DOM事件中Event对象"></a>事件冒泡、事件捕获、DOM2事件流和事件委托、DOM事件中Event对象</h1><p>javascript操作CSS称为脚本化CSS，而javascript与HTML的交互是通过事件实现的。事件就是文档或浏览器窗口中发生的一些特定的交互瞬间，而事件流(又叫事件传播)描述的是从页面中接收事件的顺序。</p><h2 id="1、DOM事件流"><a href="#1、DOM事件流" class="headerlink" title="1、DOM事件流"></a><strong>1、DOM事件流</strong></h2><p>事件流又称为事件传播，DOM2级事件规定的事件流包括三个阶段：事件捕获阶段(capture phase)、处于目标阶段(target phase)和事件冒泡阶段(bubbling phase)。</p><p>首先发生的是事件捕获，为截获事件提供了机会。然后是实际的目标接收到事件，最后一个阶段是冒泡阶段，可以在这个阶段对事件做出响应。</p><img src= "/img/loading.gif" data-src="C:\Users\Magic Book\AppData\Roaming\Typora\typora-user-images\image-20210306215256779.png" alt="image-20210306215256779" style="zoom:80%;" /><p>DOM事件流：同时支持两种事件模型：捕获型事件和冒泡型事件，但是，捕获型事件先发生。两种事件流会触及DOM中的所有对象，从document对象开始，也在document对象结束。</p><h2 id="2-一个十分有趣的例子"><a href="#2-一个十分有趣的例子" class="headerlink" title="2.一个十分有趣的例子"></a><strong>2.一个十分有趣的例子</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"a"</span>&gt;</span><br><span class="line">    &lt;div id=<span class="string">"b"</span>&gt;</span><br><span class="line">        &lt;div id=<span class="string">"c"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">#a&#123;</span></span><br><span class="line"><span class="regexp">    width: 300px;</span></span><br><span class="line"><span class="regexp">    height: 300px;</span></span><br><span class="line"><span class="regexp">    background: pink;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">#b&#123;</span></span><br><span class="line"><span class="regexp">    width: 200px;</span></span><br><span class="line"><span class="regexp">    height: 200px;</span></span><br><span class="line"><span class="regexp">    background: blue;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">#c&#123;</span></span><br><span class="line"><span class="regexp">    width: 100px;</span></span><br><span class="line"><span class="regexp">    height: 100px;</span></span><br><span class="line"><span class="regexp">    background: yellow;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">var a = document.getElementById("a"),</span></span><br><span class="line"><span class="regexp">    b = document.getElementById("b"),</span></span><br><span class="line"><span class="regexp">    c = document.getElementById("c");</span></span><br><span class="line"><span class="regexp">c.addEventListener("click", function (event) &#123;</span></span><br><span class="line"><span class="regexp">    console.log("c1");</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 注意第三个参数没有传进 false , 因为默认传进来的是 false</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/，代表冒泡阶段调用，个人认为处于目标阶段也会调用的</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br><span class="line"><span class="regexp">c.addEventListener("click", function (event) &#123;</span></span><br><span class="line"><span class="regexp">    console.log("c2");</span></span><br><span class="line"><span class="regexp">&#125;, true);</span></span><br><span class="line"><span class="regexp">b.addEventListener("click", function (event) &#123;</span></span><br><span class="line"><span class="regexp">    console.log("b");</span></span><br><span class="line"><span class="regexp">&#125;, true);</span></span><br><span class="line"><span class="regexp">a.addEventListener("click", function (event) &#123;</span></span><br><span class="line"><span class="regexp">    console.log("a1");</span></span><br><span class="line"><span class="regexp">&#125;, true);</span></span><br><span class="line"><span class="regexp">a.addEventListener("click", function (event) &#123;</span></span><br><span class="line"><span class="regexp">    console.log("a2")</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br><span class="line"><span class="regexp">a.addEventListener("click", function (event) &#123;</span></span><br><span class="line"><span class="regexp">    console.log("a3");</span></span><br><span class="line"><span class="regexp">    event.stopImmediatePropagation();</span></span><br><span class="line"><span class="regexp">&#125;, true);</span></span><br><span class="line"><span class="regexp">a.addEventListener("click", function (event) &#123;</span></span><br><span class="line"><span class="regexp">    console.log("a4");</span></span><br><span class="line"><span class="regexp">&#125;, true);</span></span><br></pre></td></tr></table></figure><p>整个的html页面就是下面这三个小盒子。</p><img src= "/img/loading.gif" data-src="C:\Users\Magic Book\AppData\Roaming\Typora\typora-user-images\image-20210306215416028.png" alt="image-20210306215416028" style="zoom:50%;" /><p>那么现在有三个问题：</p><p>1.如果点击c或者b，输出什么?（答案是a1、a3）</p><p>stopImmediatePropagation包含了stopPropagation的功能，即阻止事件传播（捕获或冒泡），但同时也阻止该元素上后来绑定的事件处理程序被调用，所以不输出 a4。因为事件捕获被拦截了，自然不会触发 b、c 上的事件，所以不输出 b、c1、c2，冒泡更谈不上了，所以不输出 a2。</p><p>2.如果点击a，输出什么?（答案是 a1、a2、a3）</p><p>不应该是 a1、a3、a2 吗？有同学就会说：“a1、a3可是在捕获阶段被调用的处理程序的，a2 是在冒泡阶段被调用的啊。”这正是要说明的：虽然这三个事件处理程序注册时指定了true、false，但现在事件流是处于目标阶段，不是冒泡阶段、也不是捕获阶段，事件处理程序被调用的顺序是注册的顺序。不论你指定的是true还是false。换句话来说就是现在点击的是a这个盒子本身，它处于事件流的目标状态，而既非冒泡，又非捕获。（需要注意的是，此时的eventPhase为2，说明事件流处于目标阶段。当点击a的时候，先从document捕获，然后一步步往下找，找到a这个元素的时候，此时的target和currentTarget是一致的，所以认定到底了，不需要再捕获了，此时就按顺序执行已经预定的事件处理函数，执行完毕后再继续往上冒泡…）</p><p>3.如果注释掉event.stopImmediatePropagation，点击c，会输出什么？（答案是 a1、a3、a4、b、c1、c2、a2）</p><p>如果同一个事件处理程序（指针相同，比如用 handler 保存的事件处理程序），用 addEventListener或 attachEvent绑定多次，如果第三个参数是相同的话，也只会被调用一次。当然，如果第三个参数一个设置为true，另一个设置为false，那么会被调用两次。<br>而在这里，都是给监听函数的回调赋予了一个匿名函数，所以其实每个处理函数都会被调用。需要注意的是，如果你还不明白为什么在c上触发的先是c1再是c2的话，那么你就需要在去看看第二个问题锁描述的内容了。</p><h2 id="3-事件委托"><a href="#3-事件委托" class="headerlink" title="3.事件委托"></a><strong>3.事件委托</strong></h2><p>事件委托顾名思义：将事件委托给另外的元素。其实就是利用DOM的事件<strong>冒泡原理</strong>，将事件绑定到目标元素的父节点。</p><p>如果要为大量的元素节点绑定事件，完美可以用事件委托完美解决，直接将事件绑定在这些元素的父节点上，只需要绑定一次，就可以在所有子节点触发事件。</p><p>最适合使用事件委托技术的事件包括click、mousedown、mouseup、keydown、keyup和keypress。</p><h2 id="4-事件处理程序：HTML事件处理、DOM-0级、DOM2级、DOM3级"><a href="#4-事件处理程序：HTML事件处理、DOM-0级、DOM2级、DOM3级" class="headerlink" title="4.事件处理程序：HTML事件处理、DOM 0级、DOM2级、DOM3级"></a><strong>4.事件处理程序：HTML事件处理、DOM 0级、DOM2级、DOM3级</strong></h2><p>事件处理程序又叫事件侦听器，实际上就是事件的绑定函数。事件发生时会执行函数中相应代码。事件处理程序有HTML事件处理程序、DOM0级事件处理程序、DOM2级事件处理程序和IE事件处理程序四类。</p><p>有人可能会问，为什么没有DOM1级事件处理呢？因为1级DOM标准中并没有定义事件相关的内容，所以没有所谓的1级DOM事件模型</p><h4 id="0-HTML事件处理"><a href="#0-HTML事件处理" class="headerlink" title="0.HTML事件处理"></a>0.HTML事件处理</h4><p>在了解DOM0级事件之前，我们有必要先了解下HTML事件处理程序，也是最早的这一种的事件处理方式，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> "<span class="attr">showFn</span>()"&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">showFn</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'Hello World'</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//或者</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span> <span class="attr">style</span>=<span class="string">"height:30px;width:200px;background-color:pink;"</span><span class="attr">onclick</span> = <span class="string">"this.innerHTML+= '1';"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上代码我们通过直接在HTML代码里定义了一个onclick的属性触发showFn方法，这样的事件处理程序最大的缺点就是HTML于JS<strong>强耦合</strong>，我们一旦需要修改函数名就得修改两个地方。当然其优点是不需要操作DOM来完成事件的绑定。</p><p>HTML事件处理程序会创建一个封装着元素属性值的函数。这个函数中有一个局部变量event，也就是事件对象。通过event变量，可以直接访问事件对象，不用自己定义它，也不用从函数的参数列表中获取。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span> <span class="attr">style</span>=<span class="string">"height:30px;width:200px;background-color:pink;"</span><span class="attr">onclick</span> = <span class="string">"this.innerHTML+= event.type;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在事件处理程序函数内部，可以像访问局部变量一样访问document及该元素本身的成员。如此一来，事件处理程序要访问自己的属性就简单多了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"box"</span> <span class="attr">value</span>=<span class="string">"test"</span> <span class="attr">style</span>=<span class="string">"height:30px;width:200px;background-color:pink;"</span><span class="attr">onclick</span> = <span class="string">"this.innerHTML+= value;"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-DOM-0级事件"><a href="#1-DOM-0级事件" class="headerlink" title="1.DOM 0级事件"></a>1.DOM 0级事件</h3><p>那么什么是DOM0级处理事件呢？DOM0级事件就是将一个函数赋值给一个事件处理属性，比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span></span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    btn.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'Hello World'</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    <span class="comment">// btn.onclick = null; 解绑事件 </span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>比较HTML事件处理程序，DOM 0级对HTML和JS代码进行了解耦，但是DOM 0级只能绑定一个处理程序。</p><p>以上代码我们给button定义了一个id，通过JS获取到了这个id的按钮，并将一个函数赋值给了一个事件处理属性onclick，这样的方法便是DOM0级处理事件的体现。我们可以通过给事件处理属性赋值null来解绑事件。</p><p>DOM0级事件处理程序的缺点在于一个处理程序无法同时绑定多个处理函数，比如我还想在按钮点击事件上加上另外一个函数。</p><p>2.DOM 2级事件</p><p>DOM2级事件在DOM0级事件的基础上弥补了一个处理程序无法同时绑定多个处理函数的缺点，允许给一个处理程序添加多个处理函数。代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span></span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">showFn</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'Hello World'</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    btn.addEventListener(<span class="string">'click'</span>, showFn, <span class="literal">false</span>);</span></span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    <span class="comment">// btn.removeEventListener('click', showFn, false); 解绑事件 </span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>DOM2级事件定义了addEventListener和removeEventListener两个方法，分别用来绑定和解绑事件，方法中包含3个参数，分别是绑定的事件处理属性名称（不包含on）、处理函数和是否在捕获时执行事件处理函数。如果我们还需要添加一个鼠标移入的方法，只需要：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">btn.addEventListener(<span class="string">'mouseover'</span>, showFn, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>这样点击按钮和鼠标移入时都将触发showFn方法。</p><p>需要注意的是IE8级以下版本不支持addEventListener和removeEventListener，需要用attachEvent和detachEvent来实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">btn.attachEvent(<span class="string">'onclick'</span>, showFn); <span class="comment">// 绑定事件 </span></span><br><span class="line">btn.detachEvent(<span class="string">'onclick'</span>, showFn); <span class="comment">// 解绑事件</span></span><br></pre></td></tr></table></figure><p>这里我们不需要传入第三个参数，因为IE8级以下版本只支持冒泡型事件。</p><h3 id="3-DOM-3级事件"><a href="#3-DOM-3级事件" class="headerlink" title="3.DOM 3级事件"></a>3.DOM 3级事件</h3><p>DOM3级事件在DOM2级事件的基础上添加了更多的事件类型，全部类型如下：<br>1.UI事件，当用户与页面上的元素交互时触发，如：load、scroll<br>2.焦点事件，当元素获得或失去焦点时触发，如：blur、focus<br>3.鼠标事件，当用户通过鼠标在页面执行操作时触发如：dbclick、mouseup<br>4.滚轮事件，当使用鼠标滚轮或类似设备时触发，如：mousewheel<br>5.文本事件，当在文档中输入文本时触发，如：textInput<br>6.键盘事件，当用户通过键盘在页面上执行操作时触发，如：keydown、keypress<br>7.合成事件，当为IME（输入法编辑器）输入字符时触发，如：compositionstart<br>8.变动事件，当底层DOM结构发生变化时触发，如：DOMsubtreeModified</p><p>同时DOM3级事件也允许使用者自定义一些事件。</p><p>总结：</p><p>1.如果同时出现HTML事件处理程序和DOM0级事件处理程序，DOM0级会覆盖HTML事件处理程序；<br>2.chrome/opera/safari等webkit内核的浏览器会按照事件处理程序出现的顺序来排列，所以结果为：DOM2级 DOM0级<br>3.firefox浏览器和IE浏览器会将DOM0级事件优先调用、所以firefox和IE11浏览器结果为：DOM0级 DOM2级<br>4.IE9、10浏览器结果为：DOM0级 DOM2级 IE<br>5.IE8-浏览器结果为：DOM0级 IE</p><h2 id="5-事件对象（Event）"><a href="#5-事件对象（Event）" class="headerlink" title="5.事件对象（Event）"></a><strong>5.事件对象（Event）</strong></h2><p>在触发DOM上的某个事件时，会产生一个事件对象event，这个对象中包含着所有与事件有关的信息(Event对象上有关于事件的属性和方法)。所有浏览器都支持event对象，但支持方式不同。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">//IE8-浏览器输出undefined，其他浏览器则输出事件对象[object MouseEvent]</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span> <span class="attr">style</span>=<span class="string">"height:30px;width:200px;background:pink;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> oBox = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span></span><br><span class="line"><span class="actionscript">oBox.onclick = <span class="function"><span class="keyword">function</span><span class="params">(a)</span></span>&#123;</span></span><br><span class="line">    oBox.innerHTML = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//firefox浏览器输出undefined,其他浏览器则输出事件对象[object MouseEvent] </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span> <span class="attr">style</span>=<span class="string">"height:30px;width:200px;background:pink;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> oBox = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span></span><br><span class="line"><span class="actionscript">    oBox.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line">        oBox.innerHTML = event;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//于是，对于获取事件对象的常见兼容写法如下</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span> <span class="attr">style</span>=<span class="string">"height:30px;width:200px;background:pink;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> oBox = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span></span><br><span class="line"><span class="actionscript">oBox.onclick = <span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123;</span></span><br><span class="line">    e = e || event;</span><br><span class="line">    box.innerHTML = e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="属性和方法"><a href="#属性和方法" class="headerlink" title="属性和方法"></a>属性和方法</h3><p>事件对象包含与创建它的特定事件有关的属性和方法。触发的事件类型不一样，可用的属性和方法也不一样。不过，所有事件都有些共有的属性和方法。</p><p>Event事件对象方法:<br>stopPropagation、preventDefault、stopImmediatePropagation</p><p>Event对象属性：<br>1.type属性（通过type我们可以获取事件发生的类型，比如点击事件我们获取的是’click’字符串。）<br>2.target属性（target属性主要用于获取事件的目标对象，比如我们点击a标签获取的是a标签的html对象。）<br>3.鼠标事件属性（在用鼠标触发事件时，主要的事件属性包含鼠标的位置和按键的状态，比如：clientX和clientY指定了鼠标在窗口坐标中的位置，button和which指定了按下的鼠标键是哪个。）<br>4.键盘事件属性（在用键盘触发事件时，主要的事件属性包含键盘的按键keyCode和是否按下特殊键，比如：keyCode指定了按下键的键码值，ctrlKey指定是否按下了ctrl键。）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="DOM" scheme="http://yoursite.com/categories/DOM/"/>
    
    
      <category term="DOM" scheme="http://yoursite.com/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>17-错误信息、try_catch、严格模式</title>
    <link href="http://yoursite.com/2021/03/05/17-%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF%E3%80%81try_catch%E3%80%81%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2021/03/05/17-%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF%E3%80%81try_catch%E3%80%81%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-03-05T07:17:49.249Z</published>
    <updated>2020-08-19T03:14:00.330Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="错误信息、try-catch、严格模式"><a href="#错误信息、try-catch、严格模式" class="headerlink" title="错误信息、try_catch、严格模式"></a>错误信息、try_catch、严格模式</h1><h2 id="JS错误信息类型"><a href="#JS错误信息类型" class="headerlink" title="JS错误信息类型"></a>JS错误信息类型</h2><ol><li><p>SyntaxError 语法错误</p><ul><li>变量名不规范<ul><li>var 1ab=1</li></ul></li><li>关键字不可赋值<ul><li>function = 1</li></ul></li><li>基本语法错误<ul><li>var a = 5:</li></ul></li></ul></li><li><p>ReferenceError 引用错误</p><ul><li>变量或函数未被声明</li><li>给无法赋值的对象赋值的时候</li></ul></li><li><p>RangeError 范围错误</p><ul><li>数组长度赋值为负数</li><li>对象方法参数超出可行范围</li></ul></li><li><p>TypeError 类型错误</p><ul><li>调用不存在的方法</li><li>实例化原始值</li></ul></li><li><p>URIError URI错误</p><p>URL：uniform resource identifier 统一资源标识符</p><p>URL：uniform resource location  统一资源定位符</p><p>​            <a href="http://www.baidu.com/news#today" target="_blank" rel="noopener">http://www.baidu.com/news#today</a></p><p>URN:  uniform resource name  统一资源名称</p><p>​            <a href="http://www.baidu.com/news#today" target="_blank" rel="noopener">www.baidu.com/news#today</a> -&gt;ID</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myUrl = <span class="string">'http://www.baidu.com/name=窦靖童'</span>;</span><br><span class="line"><span class="keyword">var</span> newUrl = <span class="built_in">encodeURI</span>(myUrl);</span><br><span class="line"><span class="keyword">var</span> newNewUrl = <span class="built_in">decodeURI</span>(newUrl);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="built_in">decodeURI</span>(<span class="string">'%radcrc%'</span>)<span class="comment">//报错</span></span><br></pre></td></tr></table></figure></li><li><p>EvalError eval函数执行错误</p></li></ol><h3 id="自定义实例化错误"><a href="#自定义实例化错误" class="headerlink" title="自定义实例化错误"></a>自定义实例化错误</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> error = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'代码错了'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(error)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> error = <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'代码错了'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(error)</span><br></pre></td></tr></table></figure><h2 id="try-catch-finally-throw"><a href="#try-catch-finally-throw" class="headerlink" title="try/catch/finally/throw"></a>try/catch/finally/throw</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'正常执行'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">//执行报错</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">//不执行</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'正常执行2'</span>)</span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(e.name+<span class="string">':'</span>+e.message)</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'正常执行3'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'正常执行3'</span>)</span><br></pre></td></tr></table></figure><p>json字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonStr = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(jsonStr == <span class="string">""</span>)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="string">'JSON字符串为空'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'我要执行啦'</span>);</span><br><span class="line"><span class="keyword">var</span> json = <span class="built_in">JSON</span>.parse(jsonStr);</span><br><span class="line"><span class="built_in">console</span>.log(json)</span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(e);</span><br><span class="line"><span class="keyword">var</span> errorTip = &#123;</span><br><span class="line">name:<span class="string">'数据传输失败'</span>,</span><br><span class="line">errorCode:<span class="string">'10010'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(errorTip)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ECMAscript发展史"><a href="#ECMAscript发展史" class="headerlink" title="ECMAscript发展史"></a>ECMAscript发展史</h2><ul><li>97    1.0</li><li>98    2.0</li><li>99    3.0  JS通行标准</li><li>07    4.0草案   只有Mozilla支持  Branden eich</li><li>08    4.0中止   容易改善 3.1  Harmony</li><li>09    5.0发布，Harmony -&gt; 1/2 JS.NEXT  1/2JS.NEXT.NEXT</li><li>11     5.1   ISO国际标准</li><li>12     ES6 = js.next</li><li>13     ES6草案发布</li><li>15     ES6正式发布，ECMAscript2015</li></ul><h3 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h3><p>ES5 正常模式 严格模式</p><p>IE9及以上版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#39;use strict&#39;</span><br><span class="line"></span><br><span class="line">function test ()&#123;</span><br><span class="line">&#39;use strict&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var test &#x3D; (function()&#123;</span><br><span class="line">&#39;use strict&#39;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>严格模式下不能使用with</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">a:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">with</span>(<span class="built_in">window</span>)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(b)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br></pre></td></tr></table></figure><p>严格模式下不能使用callee和caller</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee)</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function test1()&#123;</span><br><span class="line">test2()</span><br><span class="line">&#125;</span><br><span class="line">function test2()&#123;</span><br><span class="line">console.log(test2.caller)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>严格模式下未声明变量赋值会报错包括函数内</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = b = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = b =<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">test()</span><br></pre></td></tr></table></figure><p>严格模式下函数未定义this指向默认为undefined</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br><span class="line"><span class="comment">//test.call(&#123;&#125;)</span></span><br><span class="line"><span class="comment">//var test1 = new test()</span></span><br></pre></td></tr></table></figure><p>严格模式下函数的参数不能重复</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a,a</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">    a:<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>严格模式下不能在eval外使用其变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">'var a = 1;console.log(a)'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ES6知识整理</title>
    <link href="http://yoursite.com/2021/03/01/es6%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2021/03/01/es6%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/</id>
    <published>2021-03-01T06:45:34.000Z</published>
    <updated>2021-03-01T06:45:34.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="ES6版本过渡历史"><a href="#ES6版本过渡历史" class="headerlink" title="ES6版本过渡历史"></a>ES6版本过渡历史</h2><h3 id="babel将es6转成es5"><a href="#babel将es6转成es5" class="headerlink" title="babel将es6转成es5"></a>babel将es6转成es5</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br><span class="line">npm i babel-preset-env babel-cli --save-dev</span><br><span class="line">新建.babelrc  &#123;<span class="string">"presets"</span>:[<span class="string">"babel-preset-env"</span>]&#125;</span><br><span class="line">package.json-&gt;<span class="string">'script'</span>-&gt;</span><br><span class="line"><span class="string">"build"</span>:<span class="string">"babel index.js -out-file bundle.js(文件)"</span>或</span><br><span class="line">:<span class="string">"babel src -d lib(文件夹下的文件)"</span></span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure><h3 id="执行index-js"><a href="#执行index-js" class="headerlink" title="执行index.js"></a>执行index.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">package.json -&gt; scripts -&gt; <span class="string">"script-name"</span>:<span class="string">"babel-node/src/index.js"</span></span><br><span class="line">npm run script-name</span><br><span class="line">cd src </span><br><span class="line">node index.js</span><br></pre></td></tr></table></figure><h2 id="块级作用域与嵌套、let、暂行性死区"><a href="#块级作用域与嵌套、let、暂行性死区" class="headerlink" title="块级作用域与嵌套、let、暂行性死区"></a>块级作用域与嵌套、let、暂行性死区</h2><p>KISS(keep it simple and stupid)原则 </p><p>解决变量污染：<strong>函数提纯</strong></p><h3 id="let块级作用域"><a href="#let块级作用域" class="headerlink" title="let块级作用域"></a>let块级作用域</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>()&#123;&#125;<span class="keyword">else</span>&#123;&#125;</span><br><span class="line"><span class="keyword">for</span>()&#123;&#125;</span><br><span class="line">&#123;&#125;函数内部</span><br></pre></td></tr></table></figure><ol><li>在同一作用域下不可重复声明</li><li>不会变量提升，会产生暂时性死区（Temproal dead zone）</li><li>只在当前作用域生效</li><li>能够防止变量泄露</li></ol><p>let本质上是为了给JS增加一个块级作用域</p><p>不建议在块级作用域中用函数声明的方式来声明函数，而是用函数表达式声明</p><p>块级作用域没有变量接收返回值，所以没有返回值</p><h2 id="let进阶、const、全部变量与顶层对象"><a href="#let进阶、const、全部变量与顶层对象" class="headerlink" title="let进阶、const、全部变量与顶层对象"></a>let进阶、const、全部变量与顶层对象</h2><h3 id="const定义常量"><a href="#const定义常量" class="headerlink" title="const定义常量"></a>const定义常量</h3><ol><li>一旦定义必须赋值</li><li>有块级作用域</li><li>不能变量提升，会产生暂时性死区</li><li>同一作用域下不可重复声明</li></ol><p>const obj=[ ] 定义的数据是<strong>引用值</strong>，<strong>栈内存</strong>中保存的是指向堆内存的地址不变，但存储在<strong>堆内存</strong>中的数据可以改动</p><p>解决办法：通过Object.<strong>freeze</strong>(obj) 冻结</p><h2 id="解构赋值、函数默认值、数组解构、对象解构"><a href="#解构赋值、函数默认值、数组解构、对象解构" class="headerlink" title="解构赋值、函数默认值、数组解构、对象解构"></a>解构赋值、函数默认值、数组解构、对象解构</h2><h3 id="函数默认值"><a href="#函数默认值" class="headerlink" title="函数默认值"></a>函数默认值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x,y</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> x = x || <span class="number">1</span>;</span><br><span class="line">&#125; <span class="comment">//当x为0时，会取||后的数</span></span><br></pre></td></tr></table></figure><h4 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h4><h5 id="ES5："><a href="#ES5：" class="headerlink" title="ES5："></a>ES5：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">typeof</span>(argument[<span class="number">0</span>]!==<span class="string">'undefined'</span>? argument[<span class="number">0</span>]:<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h5 id="ES6"><a href="#ES6" class="headerlink" title="ES6:"></a>ES6:</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x=<span class="number">1</span>, y=<span class="number">2</span></span>) </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相当于在独立作用域中let x=1 let y =2</p><h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a,b,c] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p><strong>模式匹配</strong>，结构化赋值</p><ul><li>解构失败：变量个数大于值，没有值的变量为undefined</li><li>不完全结构：变量个数小于值</li></ul><p>解构赋值可传默认值，默认值可以为函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">1</span>)&#125;;</span><br><span class="line"><span class="keyword">let</span> [a = foo()] = [] </span><br><span class="line"><span class="comment">// 输出 1</span></span><br><span class="line"><span class="comment">// 再输出undefined  因为函数返回值为undefined</span></span><br></pre></td></tr></table></figure><h3 id="ES6对象的简写"><a href="#ES6对象的简写" class="headerlink" title="ES6对象的简写"></a>ES6对象的简写</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'leah'</span>,</span><br><span class="line">age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">name,</span><br><span class="line">age，</span><br><span class="line">eat()&#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当属姓名与属性值相同时可简写</span></span><br><span class="line"><span class="comment">//方法也可简写</span></span><br></pre></td></tr></table></figure><h3 id="对象属性拼接"><a href="#对象属性拼接" class="headerlink" title="对象属性拼接"></a>对象属性拼接</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fname = <span class="string">'leah'</span>,</span><br><span class="line">lname = <span class="string">'zheng'</span>,</span><br><span class="line">age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">[fname + lname]:age</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//&#123;'leah zheng':20&#125;</span></span><br></pre></td></tr></table></figure><h3 id="对象的解构"><a href="#对象的解构" class="headerlink" title="对象的解构"></a>对象的解构</h3><p>相同属性名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;a,b,c&#125; = &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>,<span class="attr">c</span>:<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    son:&#123;</span><br><span class="line">        name:<span class="string">'leah'</span>,</span><br><span class="line">        son:&#123;</span><br><span class="line">            name:<span class="string">'mike'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> &#123;<span class="attr">son</span>:&#123;son&#125;&#125; = person <span class="comment">// son:&#123;name:'mike'&#125; </span></span><br><span class="line"><span class="keyword">var</span> &#123;<span class="attr">son</span>:&#123;<span class="attr">son</span>:son1&#125;&#125; = person <span class="comment">//son1:&#123;name:'mike'&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],obj2 = &#123;&#125;;</span><br><span class="line">[obj2.a,obj2.b,obj.c] = a1</span><br><span class="line"><span class="comment">//给对象的属性声明并赋值，但没有单独声明变量</span></span><br></pre></td></tr></table></figure><p>用let，var声明解构赋值加（）会报错</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a;</span><br><span class="line">(&#123;a&#125;=&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;) <span class="comment">//变成表达式</span></span><br><span class="line"><span class="comment">//a = 1 不报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//报错</span></span><br><span class="line"><span class="keyword">let</span> (&#123;a&#125;=&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;)</span><br><span class="line"><span class="keyword">let</span> &#123;(a)&#125;=&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;a&#125;=&#123;(a:<span class="number">1</span>)&#125;</span><br></pre></td></tr></table></figure><p>函数的参数不能加（）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">([a]</span>))</span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125; <span class="comment">//报错 函数的形参相当于let ([a]),而let不能加[]</span></span><br></pre></td></tr></table></figure><h3 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h3><p>数组是特殊的对象，也能进行解构赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="number">0</span>:first,[arr.length<span class="number">-1</span>]:last&#125; = arr;</span><br><span class="line"><span class="comment">//first:1 last:3</span></span><br></pre></td></tr></table></figure><h2 id="隐式转换、函数参数解构、解构本质、-用法"><a href="#隐式转换、函数参数解构、解构本质、-用法" class="headerlink" title="隐式转换、函数参数解构、解构本质、()用法"></a>隐式转换、函数参数解构、解构本质、()用法</h2><h3 id="变量的值的交换"><a href="#变量的值的交换" class="headerlink" title="变量的值的交换"></a>变量的值的交换</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>,b = <span class="number">2</span>;</span><br><span class="line">[a , b] = [b , a];</span><br></pre></td></tr></table></figure><h3 id="模式匹配可以匹配同源属性"><a href="#模式匹配可以匹配同源属性" class="headerlink" title="模式匹配可以匹配同源属性"></a>模式匹配可以匹配同源属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;a = x,a = y&#125; = &#123;<span class="attr">a</span> :<span class="number">1</span>&#125;</span><br><span class="line"><span class="built_in">console</span>.log(x,y)<span class="comment">// 1,1</span></span><br></pre></td></tr></table></figure><h3 id="函数传参解构赋值"><a href="#函数传参解构赋值" class="headerlink" title="函数传参解构赋值"></a>函数传参解构赋值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">[x,y]</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(x,y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo([]) <span class="comment">//undefined undefined</span></span><br><span class="line">foo(&#123;<span class="attr">x</span>:<span class="number">1</span>,<span class="attr">y</span>:<span class="number">2</span>&#125;) <span class="comment">// 1 2</span></span><br></pre></td></tr></table></figure><h3 id="函数传参默认值"><a href="#函数传参默认值" class="headerlink" title="函数传参默认值"></a>函数传参默认值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">&#123;x=<span class="number">10</span>&#125;=&#123;&#125;,&#123;y&#125;=&#123;y=<span class="number">10</span>&#125;</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(x,y)</span><br><span class="line">&#125;</span><br><span class="line">foo()  <span class="comment">//10 10</span></span><br><span class="line">foo(&#123;&#125;,&#123;&#125;) <span class="comment">// 10 undefined</span></span><br><span class="line">foo(&#123;<span class="attr">x</span>:<span class="number">2</span>&#125;,&#123;<span class="attr">y</span>:<span class="number">3</span>&#125;) <span class="comment">// 2 3</span></span><br></pre></td></tr></table></figure><h3 id="解构赋值隐式转换"><a href="#解构赋值隐式转换" class="headerlink" title="解构赋值隐式转换"></a>解构赋值隐式转换</h3><p>undefined和null不能</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a,b,c,d,e,f] = <span class="string">'hello'</span>; =&gt; 类数组</span><br><span class="line"><span class="keyword">const</span> &#123;<span class="attr">length</span>:len&#125; = <span class="string">'hello'</span> =&gt;类数组</span><br><span class="line"><span class="built_in">console</span>.log(len) <span class="comment">// 5</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">toString</span>:s&#125; = <span class="number">123</span>; </span><br><span class="line"><span class="built_in">console</span>.log(s === <span class="built_in">Number</span>.prototype.toString());</span><br></pre></td></tr></table></figure><p>函数的形参一旦给了默认值，形参和实参的映射关系不复存在</p><h2 id="this指向、箭头函数基本形式、rest运算符"><a href="#this指向、箭头函数基本形式、rest运算符" class="headerlink" title="this指向、箭头函数基本形式、rest运算符"></a>this指向、箭头函数基本形式、rest运算符</h2><h3 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h3><ol><li>默认绑定规则  window （严格模式下undefined</li><li>隐式绑定：谁调用指向谁</li><li>显示绑定：call apply bind</li><li>new指向实例化对象</li></ol><h3 id="箭头函数表达式"><a href="#箭头函数表达式" class="headerlink" title="箭头函数表达式"></a>箭头函数表达式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> f = <span class="function">(<span class="params">a,b</span>) =&gt;</span> a + b <span class="comment">//语句只有一条且return执行结果时可简写</span></span><br></pre></td></tr></table></figure><h4 id="结合解构赋值"><a href="#结合解构赋值" class="headerlink" title="结合解构赋值"></a>结合解构赋值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> full = (&#123;fitst,last&#125;=&#123;&#125;)&#123;</span><br><span class="line"><span class="keyword">return</span> first + <span class="string">" "</span> + last;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(full(&#123;<span class="attr">first</span>:<span class="number">1</span>,<span class="attr">last</span>:<span class="number">2</span>&#125;))  <span class="comment">// 1 2</span></span><br></pre></td></tr></table></figure><h4 id="sort排序"><a href="#sort排序" class="headerlink" title="sort排序"></a>sort排序</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = arr.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a-b);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sortNum = <span class="function">(<span class="params">...args</span>) =&gt;</span> args.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span> a-b)</span><br></pre></td></tr></table></figure><p><strong>箭头函数不能使用arguments</strong></p><h3 id="rest运算符-展开或收集"><a href="#rest运算符-展开或收集" class="headerlink" title="rest运算符(展开或收集)"></a>rest运算符(展开或收集)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(args[<span class="number">0</span>],args[<span class="number">1</span>])</span><br><span class="line">&#125;</span><br><span class="line">sun(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)  <span class="comment">//1,2  //收集</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fn = <span class="function">(<span class="params">a,b,...c</span>)=&gt;</span>&#123; <span class="comment">//收集 rest必须是最后一个参数</span></span><br><span class="line">    <span class="built_in">console</span>.log(a,b,c)</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x,y,z</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(x,y,z);</span><br><span class="line">&#125;</span><br><span class="line">foo(...[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]) <span class="comment">// 1，2，3 //展开</span></span><br></pre></td></tr></table></figure><h2 id="箭头函数的实质、箭头函数的使用场景"><a href="#箭头函数的实质、箭头函数的使用场景" class="headerlink" title="箭头函数的实质、箭头函数的使用场景"></a>箭头函数的实质、箭头函数的使用场景</h2><h3 id="箭头函数的实质"><a href="#箭头函数的实质" class="headerlink" title="箭头函数的实质"></a>箭头函数的实质</h3><ol><li>this指向由外层函数作用域决定</li><li>箭头函数不能作为构造函数来使用，不能使用call，apply，bind</li><li>没有argument对象，用rest拓展运算符代替</li><li>在generator函数中，yield命令不生效</li></ol><p>this的指向是固化的，箭头函数内部并没有自己的this，只能通过父级作用域获取this(闭包产生的this)</p><p>因为箭头函数本质上是不通过function定义的，而是通过=&gt;旁箭头定义的</p><p><strong>闭包</strong>：一个函数的执行导致另一个函数的定义</p><h3 id="箭头函数的使用场景"><a href="#箭头函数的使用场景" class="headerlink" title="箭头函数的使用场景"></a>箭头函数的使用场景</h3><ol><li><p>简单的函数表达式，得出唯一的return的计算值</p></li><li><p>函数内部没有this的引用，没有递归，事件绑定</p></li><li><p>内层函数表达式，需要调用this，如bind(this)确保this指向的时候</p></li><li><p>引用Array.prototype上的方法时，用…代替</p><p>const sortNum = (…args) =&gt;args.sort((a,b)=&gt;a-b)</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> insert = <span class="function">(<span class="params">value</span>) =&gt;</span> (&#123;</span><br><span class="line">intro:<span class="function"><span class="params">array</span> =&gt;</span> (&#123;</span><br><span class="line">after:<span class="function"><span class="params">afterVal</span>=&gt;</span>&#123;</span><br><span class="line">array.splice(array.indexOf(afterVal)+<span class="number">1</span>,<span class="number">0</span>,value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//箭头函数返回值为对象时要加()</span></span><br><span class="line">inset(<span class="number">5</span>).intro([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>]).after(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><h2 id="函数名-对象拓展、描述符、getter-setter"><a href="#函数名-对象拓展、描述符、getter-setter" class="headerlink" title="函数名/对象拓展、描述符、getter/setter"></a>函数名/对象拓展、描述符、getter/setter</h2><h3 id="获取函数的名称"><a href="#获取函数的名称" class="headerlink" title="获取函数的名称"></a>获取函数的名称</h3><p>function.name  / (new Function).name</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">foo.bind(&#123;&#125;).name  <span class="comment">// bound foo</span></span><br><span class="line">foo.call(&#123;&#125;) <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><h3 id="对象属性名可以拼接"><a href="#对象属性名可以拼接" class="headerlink" title="对象属性名可以拼接"></a>对象属性名可以拼接</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">'hh'</span>,b = <span class="string">'xx'</span>;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">[a + b]:<span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对象的属性名为字符串</span></span><br></pre></td></tr></table></figure><p>当对象的属性名为对象时，会调用Object.prototype.toString方法，属性名就会变成[object Object]</p><h3 id="es5属性描述符"><a href="#es5属性描述符" class="headerlink" title="es5属性描述符"></a>es5属性描述符</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(obj,<span class="string">'name'</span>) <span class="comment">//获取对象属性</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">'a'</span>,&#123;</span><br><span class="line">    value:<span class="number">1</span>,</span><br><span class="line">    configurable:<span class="literal">true</span>, <span class="comment">//可配置的</span></span><br><span class="line">    enumberable:<span class="literal">true</span>, <span class="comment">//可枚举的</span></span><br><span class="line">    writable:<span class="literal">true</span>  <span class="comment">//可写</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>注：当writable：false时，<strong>delete</strong> obj.a 还是能删除，同时设置configurable：false才能阻止被删除</p><p>定义多个属性defineProperties</p><p>查看多个属性描述 getOwnPropertyDescriptors</p><h3 id="getter-setter"><a href="#getter-setter" class="headerlink" title="getter/setter"></a>getter/setter</h3><p>访问器属性：一组设置和获取值的函数，</p><p>getter负责获取值，不带任何参数，</p><p>setter负责设置值，在它的函数体中一切的return都是无效的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">a:<span class="number">3</span>,</span><br><span class="line"><span class="keyword">get</span> val()&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.a</span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">set</span> val(n)&#123;</span><br><span class="line"><span class="keyword">this</span>.a = n</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj.val)  <span class="comment">// 3</span></span><br><span class="line">obj.val = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.val)  <span class="comment">// 100</span></span><br></pre></td></tr></table></figure><p>在对象内设置了存取器属性，如果某一变量只声明了<strong>getter</strong>方法，那么它仅仅只<strong>可读不可写</strong>，如果只声明了<strong>setter</strong>方法，那么该变量永远为<strong>undefined</strong></p><h3 id="获取访问器属性的getter和setter方法的属性"><a href="#获取访问器属性的getter和setter方法的属性" class="headerlink" title="获取访问器属性的getter和setter方法的属性"></a>获取访问器属性的getter和setter方法的属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> discriptor = <span class="built_in">Object</span>.getOwnPrppertyDescriptor(obj,<span class="string">'val'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(discriptor.get.name)</span><br></pre></td></tr></table></figure><h2 id="对象密封4种方式、assign、取值函数的拷贝"><a href="#对象密封4种方式、assign、取值函数的拷贝" class="headerlink" title="对象密封4种方式、assign、取值函数的拷贝"></a>对象密封4种方式、assign、取值函数的拷贝</h2><h3 id="对象密封4种方式"><a href="#对象密封4种方式" class="headerlink" title="对象密封4种方式"></a>对象密封4种方式</h3><h5 id="阻止拓展，不能添加"><a href="#阻止拓展，不能添加" class="headerlink" title="阻止拓展，不能添加"></a>阻止拓展，不能添加</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="built_in">Object</span>.preventExtensions(obj);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.isExtensible(obj)) <span class="comment">//false</span></span><br><span class="line"><span class="comment">//这两个方法都在Object原型上</span></span><br></pre></td></tr></table></figure><h5 id="设置属性描述符"><a href="#设置属性描述符" class="headerlink" title="设置属性描述符"></a>设置属性描述符</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">obj.b = <span class="number">2</span> <span class="comment">//该情况下，属性描述符全是true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">'a'</span>,&#123;</span><br><span class="line">value:<span class="number">2</span></span><br><span class="line">&#125;) <span class="comment">//该情况下，属性描述符全是false</span></span><br></pre></td></tr></table></figure><h5 id="对象的密封"><a href="#对象的密封" class="headerlink" title="对象的密封"></a>对象的密封</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//configurable：false不能配置</span></span><br><span class="line"><span class="built_in">Object</span>.seal(obj)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.isSealed(obj)) <span class="comment">//查看密封情况</span></span><br></pre></td></tr></table></figure><h5 id="对象的冻结"><a href="#对象的冻结" class="headerlink" title="对象的冻结"></a>对象的冻结</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.freeze(obj)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.isFreeze(obj)) <span class="comment">//查看冻结状况</span></span><br></pre></td></tr></table></figure><p>深度冻结</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepFreeze</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line"><span class="built_in">Object</span>.freeze(obj);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line"><span class="keyword">if</span>((typeOf (obj[key])===<span class="string">'object'</span>)&amp;&amp;obj[key]!==<span class="literal">null</span>)&#123;</span><br><span class="line">deepFreeze(obj[key])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="assign"><a href="#assign" class="headerlink" title="assign"></a>assign</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.is(<span class="literal">NaN</span>,<span class="literal">NaN</span>)  <span class="comment">//true</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="number">-0</span>,+<span class="number">0</span>)  <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h4 id="可枚举对象的拷贝enumerable-true"><a href="#可枚举对象的拷贝enumerable-true" class="headerlink" title="可枚举对象的拷贝enumerable:true"></a>可枚举对象的拷贝enumerable:true</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(tar(目标对象),obj，...(被拷贝对象，可添加多个，重复值会覆盖))  <span class="comment">//浅拷贝</span></span><br></pre></td></tr></table></figure><h4 id="特殊目标对象"><a href="#特殊目标对象" class="headerlink" title="特殊目标对象"></a>特殊目标对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="built_in">Object</span>.assign(<span class="number">1</span>,&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;) </span><br><span class="line"><span class="comment">//包装类 Number(1,&#123;a:1&#125;)</span></span><br><span class="line"><span class="comment">//注：undefined，null不能包装类，作为目标对象时会报错</span></span><br></pre></td></tr></table></figure><h4 id="特殊被拷贝对象"><a href="#特殊被拷贝对象" class="headerlink" title="特殊被拷贝对象"></a>特殊被拷贝对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> test1 = <span class="string">'abc'</span>,test2 = <span class="number">10</span>,test3 = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">Object</span>.assign(&#123;&#125;,test1,test2,test3) </span><br><span class="line"><span class="comment">// &#123;0:'a',1:'b',2:'c'&#125;</span></span><br><span class="line"><span class="comment">//字符串转成类数组能够枚举，而数字和布尔值不行</span></span><br></pre></td></tr></table></figure><p>assign的特性：</p><ul><li><p>assign不能拷贝继承属性和不可枚举属性</p></li><li><p>Symbol类型的值也能拷贝</p></li><li><p>同名属性替换是将全部属性值替换</p></li><li><p>数组的替换</p><p>Object.assign([1,2,3],[4,5])   // [4,5,3]</p></li></ul><h4 id="利用assign配置默认参数"><a href="#利用assign配置默认参数" class="headerlink" title="利用assign配置默认参数"></a>利用assign配置默认参数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Default=&#123;<span class="attr">host</span>:<span class="string">'www.baidu.com'</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">option</span>)</span>&#123;</span><br><span class="line">option = <span class="built_in">Object</span>.assign(&#123;&#125;,<span class="keyword">default</span>,option)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//若有传入参数option，那么会覆盖Default默认值</span></span><br></pre></td></tr></table></figure><h4 id="获取访问器属性的属性描述"><a href="#获取访问器属性的属性描述" class="headerlink" title="获取访问器属性的属性描述"></a>获取访问器属性的属性描述</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Object.assign 无法拷贝</span></span><br><span class="line"><span class="keyword">const</span> sourse = &#123;</span><br><span class="line"><span class="keyword">set</span> foo(value)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> tar = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperties(tar,<span class="built_in">Object</span>.getOwnPropertyDescriptors(sourse));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptors(tar,<span class="string">'foo'</span>));</span><br></pre></td></tr></table></figure><h4 id="克隆obj"><a href="#克隆obj" class="headerlink" title="克隆obj"></a>克隆obj</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">a:<span class="number">1</span>,</span><br><span class="line">b:<span class="number">2</span>,</span><br><span class="line">c:<span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> clone = <span class="function"><span class="params">obj</span> =&gt;</span>&#123;</span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(obj),</span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptors(obj)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj2 = clone(obj)</span><br></pre></td></tr></table></figure><h3 id="三种对象部署方式"><a href="#三种对象部署方式" class="headerlink" title="三种对象部署方式"></a>三种对象部署方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = <span class="built_in">Object</span>.create(prototype);</span><br><span class="line">obj.foo = <span class="number">123</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = <span class="built_in">Object</span>.assign(<span class="built_in">Object</span>.create(prototype),&#123;<span class="attr">foo</span>:<span class="number">123</span>&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = <span class="built_in">Object</span>.create(prototype,<span class="built_in">Object</span>.getOwnPropertyDescriptors(&#123;<span class="attr">foo</span>:<span class="number">123</span>&#125;))</span><br></pre></td></tr></table></figure><h3 id="更改原型"><a href="#更改原型" class="headerlink" title="更改原型"></a>更改原型</h3><p>person.__ proto __ = {…} </p><p>缺点：1.语义化，内部属性 2.访问效率慢  3.所有继承自该属性的对象都会影响到</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.getPrototypeOf(读取)</span><br><span class="line"><span class="built_in">Object</span>.create(原型,&#123;对象属性&#125;) <span class="comment">//生成</span></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj,prototype) <span class="comment">//直接修改obj的原型</span></span><br></pre></td></tr></table></figure><h3 id="可枚举属性"><a href="#可枚举属性" class="headerlink" title="可枚举属性"></a>可枚举属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.keys(obj) <span class="comment">//自身可枚举的键名(不含继承属性)</span></span><br><span class="line"><span class="built_in">Object</span>.values(obj) <span class="comment">//自身可枚举的键值(不含继承属性)</span></span><br><span class="line"><span class="built_in">Object</span>.entires(obj) <span class="comment">//自生可枚举的键值对(不含继承属性)</span></span><br><span class="line"><span class="comment">//返回的都是数组</span></span><br><span class="line"><span class="comment">//obj为字符串时转包装类</span></span><br></pre></td></tr></table></figure><h2 id="super、4种遍历方式、原型、symbol遍历"><a href="#super、4种遍历方式、原型、symbol遍历" class="headerlink" title="super、4种遍历方式、原型、symbol遍历"></a>super、4种遍历方式、原型、symbol遍历</h2><h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><p>指向对象的原型，相当于this</p><p>只在对象的简写方法中生效 foo(){…}</p><h3 id="symbol原始值"><a href="#symbol原始值" class="headerlink" title="symbol原始值"></a>symbol原始值</h3><p>创建一个独一无二的值(并不是字符串)</p><p>解决对象属性重名的问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Symbol</span>(obj) <span class="comment">// Symbol([object Object]) 调用toString</span></span><br><span class="line"><span class="built_in">Symbol</span>(<span class="literal">undefined</span>) <span class="comment">//Symbol()</span></span><br><span class="line"><span class="built_in">Symbol</span>(<span class="literal">null</span>) <span class="comment">// Symbol(null)</span></span><br></pre></td></tr></table></figure><p>Symbol不能通过Number转，</p><p>显示转换可以通过String、Boolean，</p><p>隐式转换限于boolean         ！Symbol // false</p><p>Symbol不是构造函数</p><p>Symbol原型上的方法： toString()   for()   keyfor()</p><h4 id="设置Symbol属性"><a href="#设置Symbol属性" class="headerlink" title="设置Symbol属性"></a>设置Symbol属性</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="built_in">Symbol</span>(), eat = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">const</span> person = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">[name]:<span class="string">'leah'</span>,</span><br><span class="line">[eat]()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>[name])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">person[eat]() <span class="comment">// leah</span></span><br></pre></td></tr></table></figure><h4 id="for和keyfor"><a href="#for和keyfor" class="headerlink" title="for和keyfor"></a>for和keyfor</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Symbol</span>.for(<span class="string">'foo'</span>) === <span class="built_in">Symbol</span>.for(<span class="string">'foo'</span>)  <span class="comment">//true </span></span><br><span class="line"><span class="built_in">Symbol</span>(<span class="string">'foo'</span>) === <span class="built_in">Symbol</span>.for(<span class="string">'for'</span>) <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Symbol</span>.keyfor(<span class="string">'foo'</span>)  <span class="comment">// 'foo'</span></span><br><span class="line"><span class="comment">//获取唯一标识符</span></span><br></pre></td></tr></table></figure><p>注：</p><ol><li>Symbol作为对象属性名时，不能用点运算符(点运算符后总是字符串)</li><li>在对象内部时使用Symbol定义属性时，Symbol值必须放在<strong>方括号</strong>之中，方括号中的属性名代表了Symbol值</li><li>Symbol值作为属性名时，该属性还是公开属性</li></ol><h4 id="属性循环"><a href="#属性循环" class="headerlink" title="属性循环"></a>属性循环</h4><ul><li>for…in遍历自身和继承的可枚举属性(不包含Symbol类型)</li><li>Object.keys 遍历自身可枚举属性，不包含Symbol类型</li><li>Object.getOwnPropertySymbols 遍历自身的Symbol类型值，不论是否可枚举</li><li>Object.assign({},obj) 遍历并拷贝自身可枚举的，包含Symbol类型</li></ul><h2 id="interator迭代器"><a href="#interator迭代器" class="headerlink" title="interator迭代器"></a>interator迭代器</h2><p>对数据结构读取的一种方式，有序的连续的，基于拉取的一种消耗数据的组织方式</p><p>已部署iterator的数据类型：array、number、Map、Set、weakMap、weakSet、argument、nodeList、TypeArray</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> iter = arr[<span class="built_in">Symbol</span>.interator]();</span><br><span class="line">iter.next()<span class="comment">// &#123;value:1,done:false&#125;</span></span><br><span class="line">iter.next()<span class="comment">// &#123;value:2,done:false&#125;</span></span><br><span class="line">iter.next()<span class="comment">// &#123;value:3,done:false&#125;</span></span><br><span class="line">iter.next()<span class="comment">// &#123;value:4,done:false&#125;</span></span><br><span class="line">iter.next()<span class="comment">// &#123;value:undefined,done:true&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeInterator</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> nextIndex = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">next:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> nextIndex &gt;arr.length ?</span><br><span class="line">   &#123;<span class="attr">value</span>:arr[nextIndex++],<span class="attr">done</span>:<span class="literal">false</span>&#125;:</span><br><span class="line">   &#123;<span class="attr">value</span>:<span class="literal">undefined</span>,<span class="attr">done</span>:<span class="literal">true</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给没有interator的数据类型，如对象，自行添加iterator</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">start:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">end:[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],</span><br><span class="line">[<span class="built_in">Symbol</span>.interator]()&#123;</span><br><span class="line"><span class="keyword">let</span> index = <span class="number">0</span> ,</span><br><span class="line">arr = [...this.start,...this.end],</span><br><span class="line">len = arr.length;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">next()&#123;</span><br><span class="line"><span class="keyword">if</span>(index &lt; len)&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;<span class="attr">value</span>:arr[index++],<span class="attr">done</span>:<span class="literal">false</span>&#125;;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;<span class="attr">value</span>:<span class="literal">undefined</span>,<span class="attr">done</span>:<span class="literal">true</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>foo instanceof Foo  //  判断Foo是否为foo的构造函数</p><p>Foo[Symbol.hasInstance] (foo)  // 判断Foo是否为foo的构造函数</p><p>for…of适用于遍历数组、map、set等拥有迭代器对象的集合，但不能遍历对象，因为对象没有迭代器</p><p>for…in 适用于遍历对象的键名</p><p>给对象部署iterator</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">a:<span class="number">1</span>,</span><br><span class="line">b:<span class="number">2</span>,</span><br><span class="line">c:<span class="number">3</span>,</span><br><span class="line">[<span class="built_in">Symbol</span>.iterator]:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> nextIndex = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [key.value] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(<span class="keyword">this</span>))&#123;</span><br><span class="line">map.set(key,value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> mapEntries = [...map.entries()];</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">next()&#123;</span><br><span class="line"><span class="keyword">return</span> nextIndex &lt; mapEntries.length?</span><br><span class="line">&#123;<span class="attr">value</span>:mapEntries[nextIndex++],<span class="attr">done</span>:<span class="literal">false</span>&#125;:</span><br><span class="line">&#123;<span class="attr">value</span>:<span class="literal">undefined</span>,<span class="attr">done</span>:<span class="literal">true</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> obj) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//['a',1]</span></span><br><span class="line"><span class="comment">//['b',2]</span></span><br><span class="line"><span class="comment">//['c',3]</span></span><br></pre></td></tr></table></figure><h2 id="map与set"><a href="#map与set" class="headerlink" title="map与set"></a>map与set</h2><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">set</span> = new Set(参数)  //成员是唯一的"数组"</span><br><span class="line">//参数是具备iterator接口的数据结构，如数组、类数组</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>.add() 添加值，返回<span class="keyword">set</span>结构本身</span><br><span class="line"><span class="keyword">set</span>.size  数据结构的长度，像防御length</span><br><span class="line"><span class="keyword">set</span>.delete() 删除值，返回是否删除的布尔值</span><br><span class="line"><span class="keyword">set</span>.clear() 清空值，返回undefined</span><br><span class="line"><span class="keyword">set</span>.has()  判断是否存在值，返回布尔值</span><br><span class="line">注：delete与clear实时生效，与代码上下位置无关</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>.keys() 返回迭代器对象，不存在键名</span><br><span class="line"><span class="keyword">set</span>.value() 返回迭代器对象，键名与键值相同</span><br><span class="line"><span class="keyword">set</span>.enrties() 返回键值对迭代器对象</span><br><span class="line">Set.prototype[Symbol.iterator] === Set.prototype.values</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> <span class="keyword">set</span>)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历set的值与遍历set.values的值相同</span></span><br></pre></td></tr></table></figure><h5 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">set</span> = new Set([1,2,3,2,4,2,3]);</span><br><span class="line">res = [...<span class="keyword">set</span>] // [1,2,3,4]</span><br><span class="line">//...展开运算符展开具备iterator接口的数据结构</span><br></pre></td></tr></table></figure><h5 id="数组翻倍"><a href="#数组翻倍" class="headerlink" title="数组翻倍"></a>数组翻倍</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">set</span> = new Set([1,2,3])</span><br><span class="line">let set1 = new Set([...<span class="keyword">set</span>].map(val =&gt;&#123;val * <span class="number">2</span>&#125;))</span><br><span class="line"><span class="keyword">let</span> set2 = <span class="keyword">new</span> <span class="built_in">Set</span>(<span class="built_in">Array</span>.from(<span class="keyword">set</span>,value =&gt; value * 2))</span><br></pre></td></tr></table></figure><h5 id="过滤偶数"><a href="#过滤偶数" class="headerlink" title="过滤偶数"></a>过滤偶数</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set2 = <span class="keyword">new</span> <span class="built_in">Set</span>([...set].filter(<span class="function"><span class="params">x</span> =&gt;</span> (x % <span class="number">2</span>)==<span class="number">0</span>))</span><br></pre></td></tr></table></figure><h5 id="交集、并集、差集"><a href="#交集、并集、差集" class="headerlink" title="交集、并集、差集"></a>交集、并集、差集</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]),b = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> union = <span class="keyword">new</span> <span class="built_in">Set</span>([...a,...b])  <span class="comment">//交集</span></span><br><span class="line"><span class="keyword">let</span> intersect = <span class="keyword">new</span> <span class="built_in">Set</span>(...a.filter(<span class="function"><span class="params">x</span> =&gt;</span> b.has(x))) <span class="comment">//并集</span></span><br><span class="line"><span class="keyword">let</span> difference = <span class="keyword">new</span> <span class="built_in">Set</span>(...a.filter(<span class="function"><span class="params">x</span> =&gt;</span> !b.has(x))) <span class="comment">//差集</span></span><br></pre></td></tr></table></figure><p>当对象的键名为对象时，会隐式调用Object.toString(),将键名转成[object,Object],就不能实现建与值一一对应</p><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>键与值一一对应的“对象”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">"name"</span>,<span class="string">"leah"</span>],[<span class="string">"age"</span>,<span class="number">20</span>]]) <span class="comment">//参数为双元的数组形式，具备iterator接口的数据结构</span></span><br></pre></td></tr></table></figure><h5 id="设置键值"><a href="#设置键值" class="headerlink" title="设置键值"></a>设置键值</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m.set(<span class="string">'name'</span>,<span class="string">'leah'</span>)</span><br></pre></td></tr></table></figure><p>键名相同时会覆盖</p><h5 id="获取键值"><a href="#获取键值" class="headerlink" title="获取键值"></a>获取键值</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">m.get(键名)</span><br><span class="line"><span class="comment">//键名为引用值时要注意，使用指针做键名(var arr= [1,2,3])</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">map.set(<span class="number">-0</span>,<span class="number">123</span>);</span><br><span class="line">map.get(+<span class="number">0</span>,<span class="number">123</span>) <span class="comment">//123</span></span><br><span class="line"></span><br><span class="line"><span class="literal">NaN</span> ===<span class="literal">NaN</span> <span class="comment">//false</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="literal">NaN</span>,<span class="literal">NaN</span>)<span class="comment">// true</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">m.size  <span class="comment">//键值对的个数</span></span><br><span class="line">m.delete(键名) <span class="comment">//返回是否删除的布尔值</span></span><br><span class="line">m.clear() <span class="comment">//返回undefined</span></span><br><span class="line">m.has(键名) <span class="comment">//返回是否存在键值对的布尔值</span></span><br><span class="line">m.set(键名，键值) <span class="comment">//返回map实例，可以链式调用</span></span><br><span class="line">注：<span class="keyword">delete</span>与clear实时生效，与<span class="keyword">set</span>相同</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">m.keys() <span class="comment">//返回键名的迭代器对象</span></span><br><span class="line">m.values() <span class="comment">//返回键值的迭代器对象</span></span><br><span class="line">m.entries()<span class="comment">//返回键值对的迭代器对象</span></span><br><span class="line">m[<span class="built_in">Symbol</span>.iterator] === m.entries</span><br></pre></td></tr></table></figure><h5 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [key,value] <span class="keyword">in</span> m)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(key,value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="map结构转数组"><a href="#map结构转数组" class="headerlink" title="map结构转数组"></a>map结构转数组</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [...m]</span><br></pre></td></tr></table></figure><h5 id="map结构转对象"><a href="#map结构转对象" class="headerlink" title="map结构转对象"></a>map结构转对象</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//条件：键名为字符串</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strMapToObj</span>(<span class="params">strMap</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [key,value] <span class="keyword">of</span> strMap)&#123;</span><br><span class="line">obj[key] = value</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="对象转成map"><a href="#对象转成map" class="headerlink" title="对象转成map"></a>对象转成map</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">objTostrMap</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">map.set(key,obj[key])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="WeakMap与WeakSet、proxy与reflect"><a href="#WeakMap与WeakSet、proxy与reflect" class="headerlink" title="WeakMap与WeakSet、proxy与reflect"></a>WeakMap与WeakSet、proxy与reflect</h2><h3 id="WeakMap与WeakSet"><a href="#WeakMap与WeakSet" class="headerlink" title="WeakMap与WeakSet"></a>WeakMap与WeakSet</h3><ol><li>不存在遍历方法</li><li>成员只能是对象，weakMap的键名要为对象</li><li>不计入垃圾回收机制引用次数，若引用次数不为0，垃圾回收机制就不会释放内存（弱引用）</li></ol><h3 id="proxy代理"><a href="#proxy代理" class="headerlink" title="proxy代理"></a>proxy代理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> star = &#123;</span><br><span class="line">name:<span class="string">'leah'</span>,</span><br><span class="line">age:<span class="number">20</span>,</span><br><span class="line">phone:<span class="number">1223423</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> agent = <span class="keyword">new</span> <span class="built_in">Proxy</span>(star,&#123;</span><br><span class="line"><span class="keyword">get</span>:function(target,key)&#123;</span><br><span class="line"><span class="keyword">if</span>(key===<span class="string">'phone'</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'agents phone 12223333'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">if</span>(key===<span class="string">'price'</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">10000</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> target[key];</span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">set</span>:function(target,key,value)&#123;</span><br><span class="line"><span class="keyword">if</span>(value &lt; <span class="number">5000</span>)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'价格太低'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">target[key] = value;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">has:<span class="function"><span class="keyword">function</span>(<span class="params">target,key</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(key === <span class="string">'customousPrice'</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> target[key]</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(agent.phone) <span class="comment">//agents phone 12223333</span></span><br><span class="line"><span class="built_in">console</span>.log(agent.price) <span class="comment">//10000</span></span><br><span class="line">agent.customousPrice = <span class="number">15000</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'customousPrice'</span> <span class="keyword">in</span> agent) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="reflect"><a href="#reflect" class="headerlink" title="reflect"></a>reflect</h3><p>Reflect上定义了一系列操作函数，映射了Proxy对象上的一系列操作方法</p><p>在目标对象与源对象中间设置了代理层，目标对象无法直接访问源对象，因此设置具有拦截功能的代理，对拦截的功能进行处理</p><h2 id="类、类的继承、类的实现、类的修饰"><a href="#类、类的继承、类的实现、类的修饰" class="headerlink" title="类、类的继承、类的实现、类的修饰"></a>类、类的继承、类的实现、类的修饰</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.getPrototypeOf(person) <span class="comment">//获取实例化对象的原型</span></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(person).constructor = Person</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name='leah',age=20)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="comment">//私有属性  实例化的属性配置</span></span><br><span class="line">    &#125;</span><br><span class="line">say()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`my name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//公有属性  原型上的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Object.keys(Person.prototype)普通构造函数的原型可枚举，而class构造函数原型上的方法(公有属性的方法)不可枚举，返回[]</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123; &#125;</span><br><span class="line"><span class="keyword">new</span> Person() </span><br><span class="line"><span class="comment">//会默认添加上constructor</span></span><br></pre></td></tr></table></figure><h5 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="class"><span class="keyword">class</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(name)&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">say()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="class不能函数提升，存在暂时性死区"><a href="#class不能函数提升，存在暂时性死区" class="headerlink" title="class不能函数提升，存在暂时性死区"></a>class不能函数提升，存在暂时性死区</h5><h5 id="class没有公有属性"><a href="#class没有公有属性" class="headerlink" title="class没有公有属性"></a>class没有公有属性</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//默认将a=1放入constructor变为私有属性</span></span><br></pre></td></tr></table></figure><h5 id="公有方法私有化"><a href="#公有方法私有化" class="headerlink" title="公有方法私有化"></a>公有方法私有化</h5><ul><li><p>将方法名变为Symbol类型的值，独一无二</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> eat = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">[eat]()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将私有方法定义在class外部，公有方法可以调用该方法，但实例化对象无法调用</p></li></ul><p>静态方法和属性static，作为类的属性和方法，而不是实例化对象的</p><h5 id="getter和setter"><a href="#getter和setter" class="headerlink" title="getter和setter"></a>getter和setter</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>()</span>&#123;</span><br><span class="line"><span class="keyword">get</span> a()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>) <span class="comment">//取值函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">set</span> b(value)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(value) <span class="comment">//存值函数</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> Person()</span><br><span class="line">person.a  <span class="comment">//1</span></span><br><span class="line">person.b = <span class="number">2</span> <span class="comment">//2</span></span><br></pre></td></tr></table></figure><h5 id="class内部默认严格模式"><a href="#class内部默认严格模式" class="headerlink" title="class内部默认严格模式"></a>class内部默认严格模式</h5><h3 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(name="leah")&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//派生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(age=20,name='zheng')&#123;</span><br><span class="line"><span class="keyword">super</span>(name);<span class="comment">//返回父级的实例，继承父类的当前属性</span></span><br><span class="line"><span class="comment">//super必须在constructor内部</span></span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Child);</span><br></pre></td></tr></table></figure><ol><li>在constructor里以函数形式来执行super</li><li>当super为对象时，在对象中指代对象的原型，在静态方法中指向自己的父类</li></ol><p>class总结：</p><ul><li>暂时性死区TDZ</li><li>严格模式</li><li>不可枚举</li><li>new</li><li>不传参不会报错</li></ul><h2 id="异步的开端-promise"><a href="#异步的开端-promise" class="headerlink" title="异步的开端-promise"></a>异步的开端-promise</h2><h3 id="Js的运行原理"><a href="#Js的运行原理" class="headerlink" title="Js的运行原理"></a>Js的运行原理</h3><p>进程：是计算机中的程序关于数据结合上的一次运行活动，是系统进行资源分配和调度的基本单位</p><p>多进程：启动多个进程，多个进程可以一块来执行多个任务</p><p>单线程：进程内一个相对独立的、可调度的执行的单元，同一时间只能做一件事</p><p>多线程：启动一个进程，在进程内部启动多个线程，多个线程可以一块执行多个任务</p><p>浏览器是多进程的，浏览器渲染引擎是多线程的</p><ol><li>JS引擎线程（单线程）     解释和执行JS代码     //1和2是互斥的</li><li>GUI线程：渲染用户界面</li><li>http网络请求线程     //3、4、5是webAPIs</li><li>定时器触发线程</li><li>浏览器事件处理线程</li></ol><p>Js的运行原理：JS引擎线程(单线程)，同时执行异步执行(基于事件驱动)</p><p>任务进入执行栈，先判断同步还是异步任务，同步任务进入主线程，异步任务调用相应webAPIs线程，注册回调函数后挂起，等待事件被触发。</p><p>异步线程中的事件被触发就会进入事件队列，等主线程中的同步任务全部执行完毕，就会到事件队列中取出一个异步事件进入主线程执行，先取出微任务，再取出宏任务执行，基于先进先出原则，然后反复监听同步和异步队列</p><p>异步：</p><ul><li>宏任务：script、setTimeout、setInterval</li><li>微任务:  Promise、process、nextTick</li></ul><p>webApis先将微任务放入任务队列，再放入宏任务</p><p>所有的异步代码都是以回调函数的方式出现，单并不是所有的回调函数都是异步代码</p><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><ul><li>try…catch只能捕获同步异常，难于捕获回调异常</li><li>回调地狱难于维护，不便拓展</li><li>同步并发异步代码的问题</li></ul><p>PromiseA+规范定义了promise相关行为和方法</p><p>promise是避免回调地狱的一种解决方案</p><ul><li><p>promise对象的状态不受外界影响</p><ol><li>padding 进行中</li><li>fullfill(resolve) 已成功</li><li>reject 已失效</li></ol></li><li><p>状态的不可逆</p><p>promise状态固化后再对promise对象添加回调是可以直接拿到结果的，若是事件的话，错过即错过</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">Math</span>.random()*<span class="number">100</span> &gt; <span class="number">60</span> ? resolve() : reject()</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line">promise.then(</span><br><span class="line">()=&gt;<span class="built_in">console</span>.log(<span class="string">'及格'</span>),</span><br><span class="line">()=&gt;<span class="built_in">console</span>.log(<span class="string">'不及格'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>第一次then的返回值作为下一次then的执行参数，从而实现链式调用</p><p>推荐写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">resoleve(a) <span class="comment">//undefined -&gt;reject捕获</span></span><br><span class="line">&#125;</span><br><span class="line">promise.then(<span class="literal">null</span>)</span><br><span class="line">   .catch(<span class="function"><span class="params">reason</span>=&gt;</span><span class="built_in">console</span>.log(reason))</span><br></pre></td></tr></table></figure><h5 id="状态固化"><a href="#状态固化" class="headerlink" title="状态固化"></a>状态固化</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">resolve(<span class="string">'ok'</span>) <span class="comment">// resolve状态固化，但不会终止函数运行</span></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// 忽略 </span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//catch能够通过冒泡捕获前面的所有错误，状态固化后，无法捕获错误 </span></span><br><span class="line"><span class="comment">//.then没有填参数会被忽略</span></span><br></pre></td></tr></table></figure><h5 id="状态依赖"><a href="#状态依赖" class="headerlink" title="状态依赖"></a>状态依赖</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res,rej</span>)=&gt;</span>&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'fail'</span>))</span><br><span class="line">&#125;,<span class="number">3000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res,rej</span>)=&gt;</span>&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">resolve(p1)</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>p2先执行，执行到resolve传入参数p1</p><p>p2依赖于p1的状态，等p1执行完毕后才能传入参数</p><p>p1执行后状态固化为reject，抛出错误</p><h5 id="Promise原型上的方法"><a href="#Promise原型上的方法" class="headerlink" title="Promise原型上的方法"></a>Promise原型上的方法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all([p1,p2,p3]) <span class="comment">//参数为iterator对象 需要所有promise成功执行，才返回成功结果的数组，用then捕获，若失败则返回第一个失败的信息</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.rase([p1,p2,p3]) <span class="comment">//只要有一个promise执行，不论成功或失败都会返回率先执行的promise的结果，成功用then捕获，失败用catch捕获</span></span><br></pre></td></tr></table></figure><h5 id="thenable对象转成promise对象"><a href="#thenable对象转成promise对象" class="headerlink" title="thenable对象转成promise对象"></a>thenable对象转成promise对象</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> thenable = &#123;</span><br><span class="line">then:<span class="function">(<span class="params">res,rej</span>)=&gt;</span>&#123;</span><br><span class="line">res(<span class="string">'ok'</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1 = <span class="built_in">Promise</span>.resolve(thenable)</span><br><span class="line">p1.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;<span class="built_in">console</span>.log(value)&#125;)</span><br></pre></td></tr></table></figure><h5 id="异步函数promise化-避免回调地狱"><a href="#异步函数promise化-避免回调地狱" class="headerlink" title="异步函数promise化(避免回调地狱)"></a>异步函数promise化(避免回调地狱)</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params">path</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">fs.readFile(path,<span class="string">'utf-8'</span>,(err,data)=&gt;&#123;</span><br><span class="line"><span class="keyword">if</span>(data)&#123;</span><br><span class="line">resolve(data)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">reasFile(<span class="string">'./name.txt'</span>)</span><br><span class="line">.then(<span class="function"><span class="params">data</span>=&gt;</span>readFile(data))</span><br><span class="line">.then(<span class="function"><span class="params">data</span>=&gt;</span>readFile(data))</span><br><span class="line">.then(<span class="function"><span class="params">data</span>=&gt;</span>readFile(data))</span><br></pre></td></tr></table></figure><h5 id="异步函数promise化封装函数"><a href="#异步函数promise化封装函数" class="headerlink" title="异步函数promise化封装函数"></a>异步函数promise化封装函数</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">promisify</span>(<span class="params">func</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...arg</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">func(...arg,(err,data)=&gt;&#123;</span><br><span class="line"><span class="keyword">if</span>(err)&#123;</span><br><span class="line">reject(err)</span><br><span class="line">&#125;</span><br><span class="line">resolve(data)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>node已将promisify封装到util中</p>]]></content>
    
    <summary type="html">
    
      ES6知识整理
    
    </summary>
    
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>Vue响应式数据</title>
    <link href="http://yoursite.com/2021/02/24/vue%E5%93%8D%E5%BA%94%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2021/02/24/vue%E5%93%8D%E5%BA%94%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%8E%9F%E7%90%86/</id>
    <published>2021-02-24T05:27:42.000Z</published>
    <updated>2021-03-09T15:50:47.237Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="响应式数据"><a href="#响应式数据" class="headerlink" title="响应式数据"></a>响应式数据</h2><p>数据发生变化，视图也跟着改变</p><p><strong>实现原理：</strong></p><p>通过Object.defineProperty()来劫持各个属性的setter，getter</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = &#123;&#125;, <span class="attr">name</span>:’leah’</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(data, ‘name’, &#123;</span><br><span class="line"><span class="keyword">get</span>:function()&#123; <span class="keyword">return</span> name &#125;,</span><br><span class="line"><span class="keyword">set</span>:function(newValue)&#123; name = newValue <span class="comment">//视图重新渲染&#125;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(data.name); <span class="comment">//leah</span></span><br><span class="line">data.name = ‘anna’ </span><br><span class="line"><span class="built_in">console</span>.log(data.name); <span class="comment">//anna</span></span><br></pre></td></tr></table></figure><h3 id="将对象转成响应式数据"><a href="#将对象转成响应式数据" class="headerlink" title="将对象转成响应式数据"></a>将对象转成响应式数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">Const obj &#x3D; &#123; name:’leah’, age:20&#125;</span><br><span class="line"></span><br><span class="line">Const oldArrayProto &#x3D; Array.prototype;</span><br><span class="line"></span><br><span class="line">Const newArrayProto &#x3D; Object.create(oldArrayProto);</span><br><span class="line"></span><br><span class="line">[‘push’,’pop’,’shift’,’unshift’,’splice’].forEach( methodName &#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line">newArrayProto[methodName]&#x3D;function()&#123; oldArrayProto[methodName].call(this, …arguments))&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;将数组原型上的方法复制到新在创建的原型上</span><br><span class="line"></span><br><span class="line">Function observer (target)&#123;</span><br><span class="line"></span><br><span class="line">    If (typeof target !&#x3D;&#x3D; ‘object’ || target &#x3D;&#x3D;&#x3D; null)&#123;</span><br><span class="line"></span><br><span class="line"> return target;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">If(Array.isArray(target)&#123; target.__proto &#x3D; newArrProto &#125;</span><br><span class="line"></span><br><span class="line"> &#x2F;&#x2F;把新原型赋值给监听对象的原型</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;这样既能执行函数也能更新视图</span><br><span class="line"></span><br><span class="line">    For(let key in target)&#123;</span><br><span class="line"></span><br><span class="line">    defineReactive(target, key, target[key]);</span><br><span class="line"></span><br><span class="line">&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Function defineReactive(target,value)&#123;</span><br><span class="line"></span><br><span class="line">Observer(value); &#x2F;&#x2F;深度观察 对象的属性值为对象</span><br><span class="line"></span><br><span class="line">Object.defineProperty(target, key, &#123;</span><br><span class="line"></span><br><span class="line">        Get() &#123; return value &#125;,</span><br><span class="line"></span><br><span class="line">         Set (newValue) &#123;   observer(newValue) &#x2F;&#x2F;观察设置的新数值是否为对象</span><br><span class="line"></span><br><span class="line">if(newValue !&#x3D;&#x3D; value] &#123;</span><br><span class="line"></span><br><span class="line">       value &#x3D; newValue; console.log(‘更新视图’) &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据为对象并且层级深，就会深度监听，直到数值为基础类型为止，如果页面复杂就有可能加载速度很慢，vue3的proxy会在使用到数据的时候才进行观察。</p><p>Objectdefineproperty无法监听删除和新增属性，需要使用Vue.delete和Vue.set</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>随机打乱数组内的元素</title>
    <link href="http://yoursite.com/2021/02/14/%E6%89%93%E4%B9%B1%E6%95%B0%E7%BB%84%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2021/02/14/%E6%89%93%E4%B9%B1%E6%95%B0%E7%BB%84%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2021-02-14T10:15:15.000Z</published>
    <updated>2021-03-07T15:45:36.241Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="随机打乱数组内的元素"><a href="#随机打乱数组内的元素" class="headerlink" title="随机打乱数组内的元素"></a>随机打乱数组内的元素</h2><p>Fisher-Yates shuffle</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> people = [<span class="string">'mike'</span>,<span class="string">'tom'</span>,<span class="string">'anna'</span>,<span class="string">'rin'</span>,<span class="string">'lisa'</span>,<span class="string">'mary'</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">random</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> len = arr.length,</span><br><span class="line">temp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> index = len<span class="number">-1</span>; index &gt;= <span class="number">0</span>; index--)&#123;</span><br><span class="line"><span class="keyword">var</span> ranIdx = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * index);</span><br><span class="line">temp = arr[index];</span><br><span class="line">arr[index] = arr[ranIdx];</span><br><span class="line">arr[ranIdx] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>模板字面量与模板字符</title>
    <link href="http://yoursite.com/2021/02/05/%E6%A0%87%E7%AD%BE%E6%A8%A1%E6%9D%BF/"/>
    <id>http://yoursite.com/2021/02/05/%E6%A0%87%E7%AD%BE%E6%A8%A1%E6%9D%BF/</id>
    <published>2021-02-05T10:15:15.000Z</published>
    <updated>2021-03-08T15:54:58.431Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="模板字面量"><a href="#模板字面量" class="headerlink" title="模板字面量"></a>模板字面量</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">&#123;</span><br><span class="line">        name:<span class="string">'leah'</span>,</span><br><span class="line">        class:'js'</span><br><span class="line">&#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name:<span class="string">'tom'</span>,</span><br><span class="line">        class:'html'</span><br><span class="line">&#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name:<span class="string">'mike'</span>,</span><br><span class="line">        class:'css'</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.innerHTML = </span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="string">&lt;ul&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;</span></span><br><span class="line"><span class="string"><span class="subst">$&#123;data.name[<span class="number">0</span>]&#125;</span>正在学习<span class="subst">$&#123;data.class[<span class="number">0</span>]&#125;</span></span></span><br><span class="line"><span class="string">&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;</span></span><br><span class="line"><span class="string"><span class="subst">$&#123;data.name[<span class="number">1</span>]&#125;</span>正在学习<span class="subst">$&#123;data.class[<span class="number">1</span>]&#125;</span></span></span><br><span class="line"><span class="string">&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;</span></span><br><span class="line"><span class="string"><span class="subst">$&#123;data.name[data.length<span class="number">-1</span>]&#125;</span>正在学习<span class="subst">$&#123;data.class[data.length<span class="number">-1</span>]&#125;</span></span></span><br><span class="line"><span class="string">&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><h2 id="标签模板"><a href="#标签模板" class="headerlink" title="标签模板"></a>标签模板</h2><p>常用于给一段文字中的某些内容添加样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">'leah'</span>, action = <span class="string">'学习前端'</span>;</span><br><span class="line"><span class="keyword">const</span> tag = <span class="function">(<span class="params">arr, ...placeholder</span>) =&gt;</span> &#123;</span><br><span class="line">    arr.reduce(<span class="function">(<span class="params">prev, cur, i</span>) =&gt;</span> </span><br><span class="line">              prev + <span class="string">`&lt;span class="addColor"&gt;<span class="subst">$&#123;placeholder[i<span class="number">-1</span>]&#125;</span>&lt;/span&gt;`</span> + cur)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result = tag<span class="string">`勤奋的<span class="subst">$&#123;name&#125;</span>正在努力<span class="subst">$&#123;action&#125;</span>呀！`</span></span><br><span class="line"><span class="built_in">document</span>.body.innerHtml = result;</span><br></pre></td></tr></table></figure><p>arr = [勤奋的,正在努力, 呀]</p><p>…placeholder = ‘leah’ , = ‘学习前端’</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>22-数组扁平化、去重与排序</title>
    <link href="http://yoursite.com/2021/01/04/22-every,some,reduce,reduceRight%E4%BD%BF%E7%94%A8%E4%B8%8E%E9%87%8D%E5%86%99/"/>
    <id>http://yoursite.com/2021/01/04/22-every,some,reduce,reduceRight%E4%BD%BF%E7%94%A8%E4%B8%8E%E9%87%8D%E5%86%99/</id>
    <published>2021-01-04T05:54:14.000Z</published>
    <updated>2021-03-05T07:30:31.209Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="every-some-reduce-reduceRight使用与重写"><a href="#every-some-reduce-reduceRight使用与重写" class="headerlink" title="every/some/reduce/reduceRight使用与重写"></a>every/some/reduce/reduceRight使用与重写</h1><h2 id="every"><a href="#every" class="headerlink" title="every"></a>every</h2><p>如果有一个不满足条件就停止遍历，条件是return后面的表达式，返回最后一次遍历return中的bool值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> res = data.every(<span class="function"><span class="keyword">function</span>(<span class="params">elem,index,item</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> elem.is_free == <span class="string">'0'</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//false说明data中有免费课；若为true说明data中都是收费课</span></span><br></pre></td></tr></table></figure><h4 id="重写every"><a href="#重写every" class="headerlink" title="重写every"></a>重写every</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function myEvery(fn)&#123;</span><br><span class="line">var arr &#x3D; this,</span><br><span class="line">len &#x3D; arr.length,</span><br><span class="line">arg2 &#x3D; arguments[1] || window,</span><br><span class="line">res &#x3D; true;</span><br><span class="line">for(var i &#x3D; 0; i &lt; len; i++)&#123;</span><br><span class="line">if(!fn.apply(arg2,[arr[i],i,arr]))&#123;</span><br><span class="line">res &#x3D; false;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="some"><a href="#some" class="headerlink" title="some"></a>some</h2><p>有一个满足条件的值就停止遍历，条件是return后的表达式，返回最后一次遍历return中的bool值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> res = data.some(<span class="function"><span class="keyword">function</span>(<span class="params">elem,index,arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> elem.is_free == <span class="string">'0'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//若false说明data中没有收费课，若true说明至少有一个收费课</span></span><br></pre></td></tr></table></figure><h4 id="重写some"><a href="#重写some" class="headerlink" title="重写some"></a>重写some</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function mySome(fn)&#123;</span><br><span class="line">var arr &#x3D; this,</span><br><span class="line">len &#x3D; arr.length,</span><br><span class="line">arg2 &#x3D; arguments[1] || window,</span><br><span class="line">res &#x3D; false;</span><br><span class="line">for(var i &#x3D; 0; i &lt; len; i++)&#123;</span><br><span class="line">if(fn.apply(arg2,[arr[i],i,arr]))&#123;</span><br><span class="line">res &#x3D; true;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="reduce归纳函数"><a href="#reduce归纳函数" class="headerlink" title="reduce归纳函数"></a>reduce归纳函数</h2><p>  prev与initialValue是映射关系，首次遍历的时prev的值为initialValue，之后需要每次return prev，否则会为undefined</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> initialValue = [];</span><br><span class="line"><span class="keyword">var</span> newArr = data.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,elem,index,arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(elem.is_free === <span class="string">'1'</span>) &#123;</span><br><span class="line">prev.push(elem)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> prev;</span><br><span class="line">&#125;,initialValue)</span><br></pre></td></tr></table></figure><h3 id="reduce重写"><a href="#reduce重写" class="headerlink" title="reduce重写"></a>reduce重写</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myReduce</span>(<span class="params">fn.initialValue</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">this</span>,</span><br><span class="line">len = arr.length,</span><br><span class="line">arg2 = <span class="built_in">arguments</span>[<span class="number">2</span>] || <span class="built_in">window</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">initialValue = fn.apply(arg2,[initialValue,arr[i],i,arr]);</span><br><span class="line"><span class="keyword">return</span> initialValue</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="reduceRight逆序归纳"><a href="#reduceRight逆序归纳" class="headerlink" title="reduceRight逆序归纳"></a>reduceRight逆序归纳</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myReduceRight</span>(<span class="params">fn.initialValue</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">this</span>,</span><br><span class="line">len = arr.length,</span><br><span class="line">arg2 = <span class="built_in">arguments</span>[<span class="number">2</span>] || <span class="built_in">window</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">initialValue = fn.apply(arg2,[initialValue,arr[i],i,arr]);</span><br><span class="line"><span class="keyword">return</span> initialValue</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>20-数组扁平化、去重与排序</title>
    <link href="http://yoursite.com/2020/12/26/20-%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96.%E3%80%81%E5%8E%BB%E9%87%8D%E4%B8%8E%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2020/12/26/20-%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96.%E3%80%81%E5%8E%BB%E9%87%8D%E4%B8%8E%E6%8E%92%E5%BA%8F/</id>
    <published>2020-12-26T05:54:14.000Z</published>
    <updated>2021-03-05T07:30:01.524Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>要求：编写一个程序将数组扁平化并将数组去重，最终得到一个升序并不重复的一组数组</p><h3 id="数组扁平化"><a href="#数组扁平化" class="headerlink" title="数组扁平化"></a>数组扁平化</h3><p>扁平化 -&gt; 多维数组降维一维数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">6</span>],[<span class="number">5</span>,[<span class="number">2</span>,<span class="number">6</span>]],[<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>]];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _arr = arr || [],</span><br><span class="line">        fArr = [],</span><br><span class="line">        len = _arr.length,</span><br><span class="line">        item;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        item = _arr[i];</span><br><span class="line">        <span class="keyword">if</span>(_isArr(item))&#123;</span><br><span class="line">            fArr = fArr.concat(flatten(item));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            fArr.push(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> fArr;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_isArr</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;.toString.call(item) === <span class="string">'[object Array]'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.flatten = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> _arr = <span class="keyword">this</span>,</span><br><span class="line">        toStr = &#123;&#125;.toString,</span><br><span class="line">        _fArr = [];</span><br><span class="line">    <span class="keyword">if</span>(toStr.call(_arr)!==<span class="string">'[object Array]'</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Errow(<span class="string">'只有数组才能调用flatten方法'</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        _arr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            toStr.call(item)===<span class="string">'[object array]'</span>?</span><br><span class="line">                _fArr = _fArr.concat(item.flatten():</span><br><span class="line">                _fArr.push(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">return</span> fArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.flatten = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> _arr = <span class="keyword">this</span>,</span><br><span class="line">        toStr = &#123;&#125;.toString;</span><br><span class="line">    <span class="keyword">if</span>(toStr.call(_arr)!==<span class="string">'[object Array]'</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Errow(<span class="string">'只有数组才能调用flatten方法'</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _arr.reduce(<span class="function">(<span class="params">prev,item</span>)=&gt;</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> prev.concat(</span><br><span class="line">               toStr.call(item) === <span class="string">'object Array'</span>?</span><br><span class="line">               item.flatten() :  </span><br><span class="line">               item</span><br><span class="line">        &#125;,[]))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> flatten = <span class="function">(<span class="params">arr</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">prev,item</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> prev.concat(</span><br><span class="line">            &#123;&#125;.toString.call(item) === <span class="string">'[object Array]'</span>?</span><br><span class="line">            flatten(item):</span><br><span class="line">        item</span><br><span class="line">        )</span><br><span class="line">    &#125;,[]); </span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------</span><br><span class="line"><span class="keyword">var</span> flatten = <span class="function">(<span class="params">arr</span>)=&gt;</span>&#123;</span><br><span class="line">arr.reduce(<span class="function">(<span class="params">prev,item</span>)=&gt;</span></span><br><span class="line">         prev.concat(</span><br><span class="line">            &#123;&#125;.toString.call(item) === <span class="string">'[object Array]'</span>?</span><br><span class="line">            flatten(item):</span><br><span class="line">        item</span><br><span class="line">        )</span><br><span class="line">    ,[]); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="es6-flat扁平化-set去重"><a href="#es6-flat扁平化-set去重" class="headerlink" title="es6  flat扁平化  set去重"></a>es6  flat扁平化  set去重</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">6</span>],[<span class="number">5</span>,[<span class="number">2</span>,<span class="number">6</span>]],[<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>]];</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr.flat(<span class="literal">Infinity</span>))).sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a-b)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>21-forEachfiltermap使用与重写</title>
    <link href="http://yoursite.com/2020/12/15/23-forEachfiltermap%E4%BD%BF%E7%94%A8%E4%B8%8E%E9%87%8D%E5%86%99/"/>
    <id>http://yoursite.com/2020/12/15/23-forEachfiltermap%E4%BD%BF%E7%94%A8%E4%B8%8E%E9%87%8D%E5%86%99/</id>
    <published>2020-12-15T05:54:14.000Z</published>
    <updated>2021-03-05T07:45:46.429Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="forEach-filter-map使用与重写"><a href="#forEach-filter-map使用与重写" class="headerlink" title="forEach/filter/map使用与重写"></a>forEach/filter/map使用与重写</h1><p>以下几个方法都是ES5环境下的</p><h2 id="forEach遍历"><a href="#forEach遍历" class="headerlink" title="forEach遍历"></a>forEach遍历</h2><p>forEach是在Array.prototype上的方法，该方法的调用者必须为数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.forEach(参数<span class="number">1</span>[每次遍历执行的fn],参数<span class="number">2</span>[fn的<span class="keyword">this</span>指向])</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">elem,index,array</span>)</span>&#123;</span><br><span class="line">oLi[index].innerHTML = elem.course;</span><br><span class="line">&#125;,&#123;<span class="attr">name</span>:<span class="string">'test'</span>&#125;)</span><br><span class="line"><span class="comment">//当第二个参数为原始值时，会强制进行包装类，因为this指向对象，而null和undefined不能包装类，所以this还是指向Window</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//升级版</span></span><br><span class="line">data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">elem,index,array</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>[index].innerHTML = elem.course;</span><br><span class="line">&#125;,oLi)</span><br></pre></td></tr></table></figure><h3 id="重写forEach"><a href="#重写forEach" class="headerlink" title="重写forEach"></a>重写forEach</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myForEach = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">this</span>,</span><br><span class="line">len = arr.len,</span><br><span class="line">arg2 = <span class="built_in">arguments</span>[<span class="number">1</span>]||<span class="built_in">window</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">fn.apply(arg2,[arr[i],i,arr]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="filter过滤"><a href="#filter过滤" class="headerlink" title="filter过滤"></a>filter过滤</h2><p>是在Array.prototype上的方法，该方法的调用者必须为数组，<strong>返回一个新的数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newArr = data.filter(参数<span class="number">1</span>[每次遍历执行的fn,添加<span class="keyword">return</span>为<span class="literal">true</span>的元素到新数组中],参数<span class="number">2</span>[fn的<span class="keyword">this</span>指向])</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newArr = data.filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem,index,array</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> elem.is_free === <span class="string">'1'</span></span><br><span class="line">&#125;,&#123;<span class="attr">name</span>:<span class="string">'test'</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="重写filter"><a href="#重写filter" class="headerlink" title="重写filter"></a>重写filter</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myFilter = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = <span class="keyword">this</span>,</span><br><span class="line">        len = arr.len,</span><br><span class="line">        arg2 = <span class="built_in">arguments</span>[<span class="number">1</span>] || <span class="built_in">window</span>,</span><br><span class="line">        newArr = [],</span><br><span class="line">        item;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        item = deepclone(arr[i])</span><br><span class="line">        fn.apply(arg2, [arr[i], i, arr]) ? newArr.push(item) : <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> newArr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="map映射"><a href="#map映射" class="headerlink" title="map映射"></a>map映射</h2><p>是在Array.prototype上的方法，该方法的调用者必须为数组，<strong>返回一个新的数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newArr = data.map(参数<span class="number">1</span>[每次遍历执行的fn,添加<span class="keyword">return</span>指定值到新数组],参数<span class="number">2</span>[fn的<span class="keyword">this</span>指向])</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newArr = data.map(<span class="function"><span class="keyword">function</span>(<span class="params">elem,index,array</span>)</span>&#123;</span><br><span class="line">elem.course = <span class="keyword">this</span>.name +elem.course;</span><br><span class="line"><span class="keyword">return</span> elem;</span><br><span class="line">&#125;,&#123;<span class="attr">name</span>:<span class="string">'test'</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="重写map"><a href="#重写map" class="headerlink" title="重写map"></a>重写map</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myMap = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">this</span>,</span><br><span class="line">len = arr.length,</span><br><span class="line">arg2 = <span class="built_in">arguments</span>[<span class="number">1</span>] || <span class="built_in">window</span>,</span><br><span class="line">newArr = [],</span><br><span class="line">item;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">item = tools.deepclone(arr[i]);</span><br><span class="line">newArr.push(fn.apply(arg2,[arr[i],i,arr]););</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>19-数组去重</title>
    <link href="http://yoursite.com/2020/12/08/21-%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/"/>
    <id>http://yoursite.com/2020/12/08/21-%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/</id>
    <published>2020-12-08T05:54:14.000Z</published>
    <updated>2021-03-05T07:27:07.002Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> temp = [],</span><br><span class="line">isRepeat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">isRepeat = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j&lt;temp.length;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(temp[j] == arr[i])&#123;</span><br><span class="line">isRepeat = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!isRepeat)&#123;</span><br><span class="line">temp.push(arr[i])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> temp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> isRepeat,</span><br><span class="line">        temp = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;arr.length; i++)&#123;</span><br><span class="line">        isRepeat = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = i+<span class="number">1</span>;j &lt; arr.length;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]==arr[j])&#123;</span><br><span class="line">                isRepeat = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!isRepeat)&#123;</span><br><span class="line">            temp.push(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.filter(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> arr.indexOf(item) === index</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> temp = [];</span><br><span class="line">    arr.forEach(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(temp.indexOf(item) === <span class="number">-1</span>)&#123;</span><br><span class="line">            temp.push(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> temp = [];</span><br><span class="line">    arr.sort();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;arr.length;i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] != arr[i+<span class="number">1</span>])&#123;</span><br><span class="line">            temp.push(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> temp = [];</span><br><span class="line">    arr.sort();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;arr.length;i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] != temp[temp.length<span class="number">-1</span>])&#123;</span><br><span class="line">            temp.push(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="es6-includes"><a href="#es6-includes" class="headerlink" title="es6  includes"></a>es6  includes</h3><p> includes与indexOf的区别</p><p>array.includes 返回 true/false </p><p>array.indexOf 返回index/-1  NaN无效</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> temp = [];</span><br><span class="line">    arr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(!temp.includes(item))&#123;</span><br><span class="line">            temp.push(item)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> temp = [];</span><br><span class="line"><span class="keyword">return</span> arr.sort().reduce(<span class="function">(<span class="params">prev,item</span>)=&gt;</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(temp.length === <span class="number">0</span> || prev[temp.length - <span class="number">1</span>] !== item)&#123;</span><br><span class="line">           temp.push(item);</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;,[]);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="object"><a href="#object" class="headerlink" title="object"></a>object</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> temp = [],</span><br><span class="line">        obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!obj[arr[i]])&#123;</span><br><span class="line">            obj[arr[i]] = <span class="number">1</span>;</span><br><span class="line">            temp.push(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> temp = [],</span><br><span class="line">        map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!map.get(arr[i]))&#123;</span><br><span class="line">            map.set(arr[i],<span class="number">1</span>);</span><br><span class="line">            temp.push(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr)); <span class="comment">//将类数组变为数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>18-变量生命周期、垃圾回放原理</title>
    <link href="http://yoursite.com/2020/12/02/19-%E5%8F%98%E9%87%8F%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E3%80%81%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%BE%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2020/12/02/19-%E5%8F%98%E9%87%8F%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E3%80%81%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%BE%E5%8E%9F%E7%90%86/</id>
    <published>2020-12-02T05:54:14.000Z</published>
    <updated>2021-03-05T07:26:23.201Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="变量生命周期、垃圾回收原理"><a href="#变量生命周期、垃圾回收原理" class="headerlink" title="变量生命周期、垃圾回收原理"></a>变量生命周期、垃圾回收原理</h1><h3 id="变量生命周期"><a href="#变量生命周期" class="headerlink" title="变量生命周期"></a>变量生命周期</h3><p>全局变量的生命周期是直到浏览器关闭或程序关闭</p><p>局部变量在函数执行结束之后被回收，排除生成闭包的AO中的变量</p><h3 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h3><ol><li>找出不再使用的变量</li><li>释放其占用内存</li><li>固定的时间间隔运行</li></ol><h4 id="标记清除：mark-and-sweep"><a href="#标记清除：mark-and-sweep" class="headerlink" title="标记清除：mark and sweep"></a>标记清除：mark and sweep</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">0</span><span class="comment">//进入环境</span></span><br><span class="line">&#125;</span><br><span class="line">test()<span class="comment">//离开环境</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">0</span>;</span><br><span class="line">bar c = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>垃圾回收执行器周期性回收，首先排除全局变量和闭包所带出的AO中的变量，剩下的变量将被视为要被删除的变量，垃圾回收执行器工作时将会销毁带有离开环境标记的变量，并回收其所有的内存空间。</p><h4 id="引用计数reference-counting"><a href="#引用计数reference-counting" class="headerlink" title="引用计数reference counting"></a>引用计数reference counting</h4><p>记录每个引用值被记录的次数，次数为1的值会被回收</p><p>可能会导致内存泄漏</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Object</span>();<span class="comment">// a = 1</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="built_in">Object</span>();<span class="comment">// b = 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = a; <span class="comment">//a++  =2</span></span><br><span class="line"><span class="keyword">var</span> c = b; <span class="comment">//a--  =1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//循环引用</span></span><br><span class="line">a.prop = b <span class="comment">//b=2</span></span><br><span class="line">b.prop = a <span class="comment">//a=2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//解除引用</span></span><br><span class="line">a = <span class="literal">null</span>;</span><br><span class="line">b = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>commonJS、后端的分层</title>
    <link href="http://yoursite.com/2020/12/01/commonJS%20%E3%80%81%E5%90%8E%E7%AB%AF%E7%9A%84%E5%88%86%E5%B1%82/"/>
    <id>http://yoursite.com/2020/12/01/commonJS%20%E3%80%81%E5%90%8E%E7%AB%AF%E7%9A%84%E5%88%86%E5%B1%82/</id>
    <published>2020-12-01T07:43:21.000Z</published>
    <updated>2020-12-11T15:45:45.692Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>后端分层</p><p>1、web层（controller）：权限校验、封装、用户提示</p><p>2、业务逻辑层（server层）：后端业务处理</p><p>3、DAO（data access object）：数据操作</p><p>4、持久层：数据库  关系型数据库（mySQL、Oracle、DB2）和非关系型数据库（mangoDB、redis、HBase）</p><p>commonjs规范</p><p>1、一个文件就是一个模块，拥有自己的作用域 （kiss原则）</p><p>2、 普通方式定义的变量、函数、对象，都属于模块内部（全局对象global）</p><p>3、require()</p><p>4、exports，module.exports</p><p>一个文件就是一个模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 模块导出</span></span><br><span class="line">modele.exports = &#123;</span><br><span class="line">    test,</span><br><span class="line">    a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">exports,require,module,__filename,__dirname</span>)</span>&#123;</span><br><span class="line">    exports = <span class="built_in">module</span>.exports;</span><br><span class="line"><span class="comment">//模块引入方式</span></span><br><span class="line">    <span class="comment">//1、文件模块</span></span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'./index2.js'</span>) <span class="comment">//引入其他文件的代码同步执行</span></span><br><span class="line">    <span class="comment">// ./ 当前目录(相对目录)  /根目录(绝对目录)</span></span><br><span class="line">    <span class="comment">// 文件后缀名默认为js、json、node，都不是就报错</span></span><br><span class="line">    <span class="comment">//2、核心模块 node优化方式之一</span></span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line">    <span class="comment">// 将引入的模块对象解构赋值</span></span><br><span class="line">    <span class="keyword">let</span> &#123;test,a&#125; = <span class="built_in">require</span>(<span class="string">'./index.js'</span>);</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>require加载后会被<strong>缓存</strong>，多次引用只执行一次</p><p>循环依赖</p><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(./modA.js);</span><br><span class="line"><span class="built_in">require</span>(./modB.js);</span><br></pre></td></tr></table></figure><p>modA.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports.test = <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">const</span> modB = <span class="built_in">require</span>(<span class="string">'./modB.js'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'modA:'</span>+modB.test);</span><br><span class="line"><span class="built_in">module</span>.exports.test = <span class="string">'aa'</span>;</span><br></pre></td></tr></table></figure><p>modB.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports.test = <span class="string">'b'</span>;</span><br><span class="line"><span class="keyword">const</span> modA = <span class="built_in">require</span>(<span class="string">'./modA.js'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'modB:'</span>+modA.test);</span><br><span class="line"><span class="built_in">module</span>.exports.test = <span class="string">'bb'</span>;</span><br></pre></td></tr></table></figure><p>只输出已经加载的部分，还未执行的部分不会执行</p><p>node main  </p><p>// modB：a</p><p>//modA：bb</p><p>引入核心模块输出文本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;readFile&#125; = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">readFile(<span class="string">'./main.js'</span>,<span class="string">'utf-8'</span>,(err,data)=&gt;&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>引入npm上的模块 </p><p>chalk改变输出的样式</p><p>npm init</p><p>npm i chalk -D</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>);</span><br><span class="line"><span class="comment">// node_module -&gt;chalk -&gt;package.json-&gt; main:'xxx'(没有的话默认index.js、index.json)-&gt;依次往上找node_module直到根目录，若没找到则抛出错误</span></span><br><span class="line"><span class="built_in">console</span>.log(chalk.red(<span class="string">'hello word'</span>));</span><br></pre></td></tr></table></figure><p>xxx.node   xxx.json   xxx.js </p><p>REPL（read eval print loop）交互式解释器</p><p>命令 node</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Node.js" scheme="http://yoursite.com/categories/Node-js/"/>
    
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>buffer、编码方式</title>
    <link href="http://yoursite.com/2020/11/30/buffer%E3%80%81%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2020/11/30/buffer%E3%80%81%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F/</id>
    <published>2020-11-30T11:15:32.000Z</published>
    <updated>2020-12-09T15:08:10.702Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="buffer"><a href="#buffer" class="headerlink" title="buffer"></a>buffer</h2><p>当你要将一桶水移动到另一个人的桶中，可以直接将水桶中的水中的水倒入另一个桶中，也可以用杯子一杯一杯得舀水，直到全部的水装到另一个人的水桶中，一杯水的量就是流。</p><p>Buffer类用于操作TCP流、文件系统操作、以及其他上下文中与八位字节流进行交互。用于读取或操作二进制数据流的机制</p><p>8bit比特 ：1byte字节   1024byte：1kb    1024kb：1mb</p><h3 id="字符集与字符编码"><a href="#字符集与字符编码" class="headerlink" title="字符集与字符编码"></a>字符集与字符编码</h3><p>字符集：十进制数与字符一一对应的集合（unicode)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = Buffer.from(<span class="string">'test'</span>);</span><br><span class="line">cnosole.log(buf);</span><br><span class="line">node index <span class="comment">// &lt;buffer 74 65 73 74&gt; // 16位进制</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="number">74</span>,<span class="number">16</span>)) <span class="comment">// 转成10进制数 到ASSCII表上找对应的字母</span></span><br></pre></td></tr></table></figure><p>字符编码UTF-8  最多4个字节表示一个字符</p><p>字符编码UTF-16 2到4个字节表示一个字符 </p><p>字符编码UTF-32 4个字节表示一个字符</p><p>1、buffer操作二进制数据流</p><p>2、实例类似于整数（0-255 用16进制的方式）数组，大小是固定的</p><p>3、 node中的buffer不是通过javascript申请的，是node中C++层面实现的</p><h4 id="实例化Buffer"><a href="#实例化Buffer" class="headerlink" title="实例化Buffer"></a>实例化Buffer</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf1 = Buffer.alloc(<span class="number">10</span>，<span class="number">1</span>) <span class="comment">// 长度 数值 初始化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> buf2 = Buffer.allocUnsafe(<span class="number">10</span>) <span class="comment">//长度10，未初始化随机的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> buf2 = Buffer.from([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])  </span><br><span class="line"><span class="comment">//&lt;Buffer 01 02 03&gt;</span></span><br></pre></td></tr></table></figure><p>iconv  icon-lite  Buffer编码方式</p><p>buf[index] 会将16进制转成10进制 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">'http://nodejs.cn/'</span>;</span><br><span class="line"><span class="keyword">const</span> buf = Buffer.allocUnsafe(str.length);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length;i++)&#123;</span><br><span class="line">buf[i] = str.charCodeAt(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(buf.toString(<span class="string">'utf8'</span>));</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = Buffer.from(<span class="string">'abc'</span>);</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; buf.length;i++)&#123;</span><br><span class="line">str +=<span class="built_in">String</span>.fromCodePoint(buf[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str)</span><br></pre></td></tr></table></figure><h3 id="from"><a href="#from" class="headerlink" title="from"></a>from</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = Buffer.from([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> buf1 = Buffer.from([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(buf === buf1) <span class="comment">//false</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="string">'0'</span>:<span class="number">1</span>,</span><br><span class="line"><span class="string">'1'</span>:<span class="number">2</span>,</span><br><span class="line">length:<span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> buf = Buffer.from(obj);</span><br><span class="line"><span class="built_in">console</span>.log(buf) <span class="comment">// &lt;Buffer 01 02 00 00 00&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf1 = Buffer.from(<span class="string">'this is a tést'</span>);</span><br><span class="line"><span class="keyword">const</span> buf2 = Buffer.from(<span class="string">'7468697320697320612074c3a97374'</span>, <span class="string">'hex'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(buf1.toString());</span><br><span class="line"><span class="comment">// 打印: this is a tést</span></span><br><span class="line"><span class="built_in">console</span>.log(buf2.toString());</span><br><span class="line"><span class="comment">// 打印: this is a tést</span></span><br><span class="line"><span class="built_in">console</span>.log(buf1.toString(<span class="string">'latin1'</span>));</span><br><span class="line"><span class="comment">// 打印: this is a tÃ©st</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Node.js" scheme="http://yoursite.com/categories/Node-js/"/>
    
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>buffer、path</title>
    <link href="http://yoursite.com/2020/11/28/buffer%E3%80%81path/"/>
    <id>http://yoursite.com/2020/11/28/buffer%E3%80%81path/</id>
    <published>2020-11-28T04:55:25.000Z</published>
    <updated>2020-12-05T08:21:04.642Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="buf-write-string-offset-length-encding"><a href="#buf-write-string-offset-length-encding" class="headerlink" title="buf.write(string[,offset[,length]] [,encding]])"></a>buf.write(string[,offset[,length]] [,encding]])</h2><ul><li><code>string</code> 要写入 <code>buf</code> 的字符串。</li><li><code>offset</code> 开始写入 <code>string</code> 之前要跳过的字节数。<strong>默认值:</strong> <code>0</code>。</li><li><code>length</code> 要写入的最大字节数（写入的字节数不会超出 <code>buf.length - offset</code>）。<strong>默认值:</strong> <code>buf.length - offset</code>。</li><li><code>encoding</code> <code>string</code> 的字符编码。<strong>默认值:</strong> <code>&#39;utf8&#39;</code>。</li><li>返回: 已写入的字节数。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = Buffer.alloc(<span class="number">256</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> len = buf.write(<span class="string">'\u00bd + \u00bc = \u00be'</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;len&#125;</span> 个字节: <span class="subst">$&#123;buf.toString(<span class="string">'utf8'</span>, <span class="number">0</span>, len)&#125;</span>`</span>);</span><br><span class="line"><span class="comment">// 打印: 12 个字节: ½ + ¼ = ¾</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> buffer = Buffer.alloc(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> length = buffer.write(<span class="string">'abcd'</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;length&#125;</span> bytes: <span class="subst">$&#123;buffer.toString(<span class="string">'utf8'</span>, <span class="number">8</span>, <span class="number">10</span>)&#125;</span>`</span>);</span><br><span class="line"><span class="comment">// 打印: 2 个字节 : ab</span></span><br></pre></td></tr></table></figure><h3 id="buf-toString-encoding-start-end"><a href="#buf-toString-encoding-start-end" class="headerlink" title="buf.toString([encoding[, start[, end]]])"></a>buf.toString([encoding[, start[, end]]])</h3><ul><li><code>encoding</code>使用的字符编码。<strong>默认值:</strong> <code>&#39;utf8&#39;</code>。</li><li><code>start</code> 开始解码的字节偏移量。<strong>默认值:</strong> <code>0</code>。</li><li><code>end</code>结束解码的字节偏移量（不包含）。<strong>默认值:</strong> <a href="http://nodejs.cn/s/hn6FjL" target="_blank" rel="noopener"><code>buf.length</code></a>。</li><li>返回:根据 <code>encoding</code> 指定的字符编码将 <code>buf</code> 解码成字符串。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf1 = Buffer.allocUnsafe(<span class="number">26</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// 97 是 'a' 的十进制 ASCII 值。</span></span><br><span class="line">  buf1[i] = i + <span class="number">97</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(buf1.toString(<span class="string">'utf8'</span>));</span><br><span class="line"><span class="comment">// 打印: abcdefghijklmnopqrstuvwxyz</span></span><br><span class="line"><span class="built_in">console</span>.log(buf1.toString(<span class="string">'utf8'</span>, <span class="number">0</span>, <span class="number">5</span>));</span><br><span class="line"><span class="comment">// 打印: abcde</span></span><br></pre></td></tr></table></figure><h3 id="Buffer-isEncoding-encoding"><a href="#Buffer-isEncoding-encoding" class="headerlink" title="Buffer.isEncoding(encoding)"></a>Buffer.isEncoding(encoding)</h3><p>如果 <code>encoding</code> 是支持的字符编码的名称，则返回 <code>true</code>，否则返回 <code>false</code>。</p><h3 id="Buffer-byteLength-string-encoding"><a href="#Buffer-byteLength-string-encoding" class="headerlink" title="Buffer.byteLength(string[, encoding])"></a>Buffer.byteLength(string[, encoding])</h3><p>Buffer.length 默认返回utf8编码格式的字节长度，而Buffer.byteLength可以获取指定编码格式的字节长度。</p><h3 id="Buffer-compare-buf1-buf2"><a href="#Buffer-compare-buf1-buf2" class="headerlink" title="Buffer.compare(buf1, buf2)"></a>Buffer.compare(buf1, buf2)</h3><ul><li>返回: <code>-1</code>、 <code>0</code> 或 <code>1</code>，取决于比较的结果。</li></ul><p>比较 <code>buf1</code> 与 <code>buf2</code>，主要用于 <code>Buffer</code> 实例数组的排序。 相当于调用 [<code>buf1.compare(buf2)</code>]。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf1 = Buffer.from(<span class="string">'1234'</span>);</span><br><span class="line"><span class="keyword">const</span> buf2 = Buffer.from(<span class="string">'0123'</span>);</span><br><span class="line"><span class="keyword">const</span> arr = [buf1, buf2];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.sort(Buffer.compare));</span><br><span class="line"><span class="comment">// 打印: [ &lt;Buffer 30 31 32 33&gt;, &lt;Buffer 31 32 33 34&gt; ]</span></span><br><span class="line"><span class="comment">// (结果相当于: [buf2, buf1])</span></span><br></pre></td></tr></table></figure><h3 id="Buffer-concat-list-totalLength"><a href="#Buffer-concat-list-totalLength" class="headerlink" title="Buffer.concat(list[, totalLength])"></a>Buffer.concat(list[, totalLength])</h3><p>返回一个合并了 <code>list</code> 中所有 <code>Buffer</code> 实例的新 <code>Buffer</code>。</p><p>如果 <code>list</code> 中没有元素、或 <code>totalLength</code> 为 0，则返回一个长度为 0 的 <code>Buffer</code>。</p><p>如果没有提供 <code>totalLength</code>，则通过将 <code>list</code> 中的 <code>Buffer</code> 实例的长度相加来计算得出。</p><p>如果 <code>list</code> 中的 <code>Buffer</code> 合并后的总长度大于 <code>totalLength</code>，则结果会被截断到 <code>totalLength</code> 的长度。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用含有三个 `Buffer` 实例的数组创建一个单一的 `Buffer`。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> buf1 = Buffer.alloc(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">const</span> buf2 = Buffer.alloc(<span class="number">14</span>);</span><br><span class="line"><span class="keyword">const</span> buf3 = Buffer.alloc(<span class="number">18</span>);</span><br><span class="line"><span class="keyword">const</span> totalLength = buf1.length + buf2.length + buf3.length;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(totalLength);</span><br><span class="line"><span class="comment">// 打印: 42</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bufA = Buffer.concat([buf1, buf2, buf3], totalLength);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bufA);</span><br><span class="line"><span class="comment">// 打印: &lt;Buffer 00 00 00 00 ...&gt;</span></span><br><span class="line"><span class="built_in">console</span>.log(bufA.length);</span><br><span class="line"><span class="comment">// 打印: 42</span></span><br></pre></td></tr></table></figure><h3 id="buf-slice-start-end"><a href="#buf-slice-start-end" class="headerlink" title="buf.slice([start[, end]])"></a>buf.slice([start[, end]])</h3><ul><li><code>start</code> 新 <code>Buffer</code> 开始的位置。<strong>默认值:</strong> <code>0</code>。</li><li><code>end</code>新 <code>Buffer</code> 结束的位置（不包含）。<strong>默认值:</strong> <code>buf.length</code>。</li></ul><p>返回一个新的 <code>Buffer</code>，它引用与原始的 Buffer 相同的内存，但是由 <code>start</code> 和 <code>end</code> 索引进行偏移和裁剪。</p><h3 id="buf-copy-target-targetStart-sourceStart-sourceEnd"><a href="#buf-copy-target-targetStart-sourceStart-sourceEnd" class="headerlink" title="buf.copy(target[, targetStart[, sourceStart[, sourceEnd]]])"></a>buf.copy(target[, targetStart[, sourceStart[, sourceEnd]]])</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建两个 `Buffer` 实例。</span></span><br><span class="line"><span class="keyword">const</span> buf1 = Buffer.allocUnsafe(<span class="number">26</span>);</span><br><span class="line"><span class="keyword">const</span> buf2 = Buffer.allocUnsafe(<span class="number">26</span>).fill(<span class="string">'!'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// 97 是 'a' 的十进制 ASCII 值。</span></span><br><span class="line">  buf1[i] = i + <span class="number">97</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拷贝 `buf1` 中第 16 至 19 字节偏移量的数据到 `buf2` 第 8 字节偏移量开始。</span></span><br><span class="line">buf1.copy(buf2, <span class="number">8</span>, <span class="number">16</span>, <span class="number">20</span>);</span><br><span class="line"><span class="comment">// 这等效于：</span></span><br><span class="line"><span class="comment">// buf2.set(buf1.subarray(16, 20), 8);</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(buf2.toString(<span class="string">'ascii'</span>, <span class="number">0</span>, <span class="number">25</span>));</span><br><span class="line"><span class="comment">// 打印: !!!!!!!!qrst!!!!!!!!!!!!!</span></span><br></pre></td></tr></table></figure><h3 id="buf-fill-value-offset-end-encoding"><a href="#buf-fill-value-offset-end-encoding" class="headerlink" title="buf.fill(value[, offset[, end]] [, encoding])"></a>buf.fill(value[, offset[, end]] [, encoding])</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用 ASCII 字符 'h' 填充 `Buffer`。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = Buffer.allocUnsafe(<span class="number">50</span>).fill(<span class="string">'h'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(b.toString());</span><br><span class="line"><span class="comment">// 打印: hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh</span></span><br></pre></td></tr></table></figure><h3 id="buf-indexOf-value-byteOffset-encoding"><a href="#buf-indexOf-value-byteOffset-encoding" class="headerlink" title="buf.indexOf(value[, byteOffset] [, encoding])"></a>buf.indexOf(value[, byteOffset] [, encoding])</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = Buffer.from(<span class="string">'this is a buffer'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(buf.indexOf(<span class="string">'this'</span>));</span><br><span class="line"><span class="comment">// 打印: 0</span></span><br><span class="line"><span class="built_in">console</span>.log(buf.indexOf(<span class="string">'is'</span>));</span><br><span class="line"><span class="comment">// 打印: 2</span></span><br></pre></td></tr></table></figure><h3 id="buf-lastIndexOf-value-byteOffset-encoding"><a href="#buf-lastIndexOf-value-byteOffset-encoding" class="headerlink" title="buf.lastIndexOf(value[, byteOffset] [, encoding])"></a>buf.lastIndexOf(value[, byteOffset] [, encoding])</h3><p>与 [<code>buf.indexOf()</code>]的区别是，查找的是 <code>value</code> 最后一次出现的索引，而不是首次出现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = Buffer.from(<span class="string">'this buffer is a buffer'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(buf.lastIndexOf(<span class="string">'this'</span>));</span><br><span class="line"><span class="comment">// 打印: 0</span></span><br><span class="line"><span class="built_in">console</span>.log(buf.lastIndexOf(<span class="string">'buffer'</span>));</span><br><span class="line"><span class="comment">// 打印: 17</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(buf.lastIndexOf(<span class="string">'buffer'</span>, <span class="number">5</span>));</span><br><span class="line"><span class="comment">// 打印: 5</span></span><br><span class="line"><span class="built_in">console</span>.log(buf.lastIndexOf(<span class="string">'buffer'</span>, <span class="number">4</span>));</span><br><span class="line"><span class="comment">// 打印: -1</span></span><br></pre></td></tr></table></figure><h3 id="buf-equals-otherBuffer"><a href="#buf-equals-otherBuffer" class="headerlink" title="buf.equals(otherBuffer)"></a>buf.equals(otherBuffer)</h3><p>如果 <code>buf</code> 与 <code>otherBuffer</code> 具有完全相同的字节，则返回 <code>true</code>，否则返回 <code>false</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf1 = Buffer.from(<span class="string">'ABC'</span>);</span><br><span class="line"><span class="keyword">const</span> buf2 = Buffer.from(<span class="string">'414243'</span>, <span class="string">'hex'</span>);</span><br><span class="line"><span class="keyword">const</span> buf3 = Buffer.from(<span class="string">'ABCD'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(buf1.equals(buf2));</span><br><span class="line"><span class="comment">// 打印: true</span></span><br><span class="line"><span class="built_in">console</span>.log(buf1.equals(buf3));</span><br><span class="line"><span class="comment">// 打印: false</span></span><br></pre></td></tr></table></figure><h1 id="string-decoder（字符串解码器）"><a href="#string-decoder（字符串解码器）" class="headerlink" title="string_decoder（字符串解码器）"></a>string_decoder（字符串解码器）</h1><p>将 <code>Buffer</code> 实例写入 <code>StringDecoder</code> 实例时，会使用一个内部 buffer 来确保解码的字符串不包含任何不完整的多字节字符。不完整的字符会被保存在该 buffer 中，直到下次调用 <code>stringDecoder.write()</code> 或调用 <code>stringDecoder.end()</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; StringDecoder &#125; = <span class="built_in">require</span>(<span class="string">'string_decoder'</span>);</span><br><span class="line"><span class="keyword">const</span> decoder = <span class="keyword">new</span> StringDecoder(<span class="string">'utf8'</span>);</span><br><span class="line"><span class="keyword">const</span> buffer = Buffer.from(<span class="string">'中文字符串'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; buffer.length; i+=<span class="number">5</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> b = Buffer.alloc(<span class="number">5</span>);</span><br><span class="line">    buffer.copy(b, <span class="number">0</span>, i);</span><br><span class="line">    <span class="built_in">console</span>.log(decoder.write(b));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="path（路径）"><a href="#path（路径）" class="headerlink" title="path（路径）"></a>path（路径）</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br></pre></td></tr></table></figure><h2 id="路径的组成部分"><a href="#路径的组成部分" class="headerlink" title="路径的组成部分"></a>路径的组成部分</h2><h3 id="path-dirname-path"><a href="#path-dirname-path" class="headerlink" title="path.dirname(path)"></a>path.dirname(path)</h3><p>返回 <code>path</code> 的目录名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path.dirname(<span class="string">'/目录1/目录2/目录3'</span>);</span><br><span class="line"><span class="comment">// 返回: '/目录1/目录2</span></span><br></pre></td></tr></table></figure><h3 id="path-basename-path-ext"><a href="#path-basename-path-ext" class="headerlink" title="path.basename(path[, ext])"></a>path.basename(path[, ext])</h3><p>返回 <code>path</code> 的最后一部分即文件名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">path.basename(<span class="string">'/目录1/目录2/文件.html'</span>);</span><br><span class="line"><span class="comment">// 返回: '文件.html'</span></span><br><span class="line"></span><br><span class="line">path.basename(<span class="string">'/目录1/目录2/文件.html'</span>, <span class="string">'.html'</span>);</span><br><span class="line"><span class="comment">// 返回: '文件'</span></span><br></pre></td></tr></table></figure><h3 id="path-extname-path"><a href="#path-extname-path" class="headerlink" title="path.extname(path)"></a>path.extname(path)</h3><p>返回 <code>path</code> 的扩展名，即 <code>path</code> 的最后一部分中从最后一次出现 <code>.</code>（句点）字符直到字符串结束。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">path.extname(<span class="string">'index.html'</span>);</span><br><span class="line"><span class="comment">// 返回: '.html'</span></span><br><span class="line">path.extname(<span class="string">'index'</span>);</span><br><span class="line"><span class="comment">// 返回: ''</span></span><br><span class="line">path.extname(<span class="string">'.index'</span>);</span><br><span class="line"><span class="comment">// 返回: ''</span></span><br></pre></td></tr></table></figure><h3 id="path-sep"><a href="#path-sep" class="headerlink" title="path.sep"></a>path.sep</h3><p>提供平台特定的路径片段分隔符：</p><ul><li>Windows 上是 <code>\</code>。</li><li>POSIX 上是 <code>/</code>。</li></ul><p>在 Windows 上：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'foo\\bar\\baz'</span>.split(path.sep);</span><br><span class="line"><span class="comment">// 返回: ['foo', 'bar', 'baz']</span></span><br></pre></td></tr></table></figure><p>在 POSIX 上：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'foo/bar/baz'</span>.split(path.sep);</span><br><span class="line"><span class="comment">// 返回: ['foo', 'bar', 'baz']</span></span><br></pre></td></tr></table></figure><h3 id="path-delimiter"><a href="#path-delimiter" class="headerlink" title="path.delimiter"></a>path.delimiter</h3><p>提供平台特定的路径定界符：</p><ul><li><code>;</code> 用于 Windows</li><li><code>:</code> 用于 POSIX</li></ul><p>在 POSIX 上：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(process.env.PATH);</span><br><span class="line"><span class="comment">// 打印: '/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin'</span></span><br><span class="line"></span><br><span class="line">process.env.PATH.split(path.delimiter);</span><br><span class="line"><span class="comment">// 返回: ['/usr/bin', '/bin', '/usr/sbin', '/sbin', '/usr/local/bin']</span></span><br></pre></td></tr></table></figure><p>在 Windows 上：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(process.env.PATH);</span><br><span class="line"><span class="comment">// 打印: 'C:\Windows\system32;C:\Windows;C:\Program Files\node\'</span></span><br><span class="line"></span><br><span class="line">process.env.PATH.split(path.delimiter);</span><br><span class="line"><span class="comment">// 返回: ['C:\\Windows\\system32', 'C:\\Windows', 'C:\\Program Files\\node\\']</span></span><br></pre></td></tr></table></figure><h2 id="路径的规范化"><a href="#路径的规范化" class="headerlink" title="路径的规范化"></a>路径的规范化</h2><h3 id="path-normalize-path"><a href="#path-normalize-path" class="headerlink" title="path.normalize(path)"></a>path.normalize(path)</h3><p>规范化给定的 <code>path</code>，解析 <code>&#39;..&#39;</code> 和 <code>&#39;.&#39;</code> 片段。</p><h3 id="path-join-…paths"><a href="#path-join-…paths" class="headerlink" title="path.join([…paths])"></a>path.join([…paths])</h3><p>将所有给定的 <code>path</code> 片段连接到一起（使用平台特定的分隔符作为定界符），然后规范化生成的路径。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path.join(<span class="string">'/目录1'</span>, <span class="string">'目录2'</span>, <span class="string">'目录3/目录4'</span>, <span class="string">'目录5'</span>, <span class="string">'..'</span>);</span><br><span class="line"><span class="comment">// 返回: '/目录1/目录2/目录3/目录4'</span></span><br></pre></td></tr></table></figure><h3 id="path-isAbsolute-path"><a href="#path-isAbsolute-path" class="headerlink" title="path.isAbsolute(path)"></a>path.isAbsolute(path)</h3><p>检测 <code>path</code> 是否为绝对路径。</p><p>如果给定的 <code>path</code> 是零长度字符串，则返回 <code>false</code>。</p><p>在 Windows 上：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">path.isAbsolute(<span class="string">'//server'</span>);    <span class="comment">// true</span></span><br><span class="line">path.isAbsolute(<span class="string">'\\\\server'</span>);  <span class="comment">// true</span></span><br><span class="line">path.isAbsolute(<span class="string">'C:/foo/..'</span>);   <span class="comment">// true</span></span><br><span class="line">path.isAbsolute(<span class="string">'C:\\foo\\..'</span>); <span class="comment">// true</span></span><br><span class="line">path.isAbsolute(<span class="string">'bar\\baz'</span>);    <span class="comment">// false</span></span><br><span class="line">path.isAbsolute(<span class="string">'bar/baz'</span>);     <span class="comment">// false</span></span><br><span class="line">path.isAbsolute(<span class="string">'.'</span>);           <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="path-resolve-…paths"><a href="#path-resolve-…paths" class="headerlink" title="path.resolve([…paths])"></a>path.resolve([…paths])</h3><p>将路径或路径片段的序列解析为绝对路径。</p><p>如果没有传入 <code>path</code> 片段，则 <code>path.resolve()</code> 会返回当前工作目录的绝对路径。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">path.resolve(<span class="string">'/目录1/目录2'</span>, <span class="string">'./目录3'</span>);</span><br><span class="line"><span class="comment">// 返回: '/目录1/目录2/目录3'</span></span><br><span class="line"></span><br><span class="line">path.resolve(<span class="string">'/目录1/目录2'</span>, <span class="string">'/目录3/目录4/'</span>);</span><br><span class="line"><span class="comment">// 返回: '/目录3/目录4'</span></span><br><span class="line"></span><br><span class="line">path.resolve(<span class="string">'目录1'</span>, <span class="string">'目录2/目录3/'</span>, <span class="string">'../目录4/文件.gif'</span>);</span><br><span class="line"><span class="comment">// 如果当前工作目录是 /目录A/目录B，</span></span><br><span class="line"><span class="comment">// 则返回 '/目录A/目录B/目录1/目录2/目录4/文件.gif'</span></span><br></pre></td></tr></table></figure><h3 id="path-relative-from-to"><a href="#path-relative-from-to" class="headerlink" title="path.relative(from, to)"></a>path.relative(from, to)</h3><p>根据当前工作目录返回 <code>from</code> 到 <code>to</code> 的相对路径</p><p>在 POSIX 上：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path.relative(<span class="string">'/data/orandea/test/aaa'</span>, <span class="string">'/data/orandea/impl/bbb'</span>);</span><br><span class="line"><span class="comment">// 返回: '../../impl/bbb'</span></span><br></pre></td></tr></table></figure><p>在 Windows 上：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path.relative(<span class="string">'C:\\orandea\\test\\aaa'</span>, <span class="string">'C:\\orandea\\impl\\bbb'</span>);</span><br><span class="line"><span class="comment">// 返回: '..\\..\\impl\\bbb'</span></span><br></pre></td></tr></table></figure><h3 id="path-format-pathObject"><a href="#path-format-pathObject" class="headerlink" title="path.format(pathObject)"></a>path.format(pathObject)</h3><p>从对象返回路径字符串。 与 [<code>path.parse()</code>] 相反。</p><ul><li>如果提供了 <code>pathObject.dir</code>，则忽略 <code>pathObject.root</code>。</li><li>如果 <code>pathObject.base</code> 存在，则忽略 <code>pathObject.ext</code> 和 <code>pathObject.name</code>。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果提供了 `dir`、 `root` 和 `base`，</span></span><br><span class="line"><span class="comment">// 则返回 `$&#123;dir&#125;$&#123;path.sep&#125;$&#123;base&#125;`。</span></span><br><span class="line"><span class="comment">// `root` 会被忽略。</span></span><br><span class="line">path.format(&#123;</span><br><span class="line">  root: <span class="string">'/ignored'</span>,</span><br><span class="line">  dir: <span class="string">'/home/user/dir'</span>,</span><br><span class="line">  base: <span class="string">'file.txt'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 返回: '/home/user/dir/file.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果未指定 `dir`，则使用 `root`。 </span></span><br><span class="line"><span class="comment">// 如果只提供 `root`，或 'dir` 等于 `root`，则将不包括平台分隔符。 </span></span><br><span class="line"><span class="comment">// `ext` 将被忽略。</span></span><br><span class="line">path.format(&#123;</span><br><span class="line">  root: <span class="string">'/'</span>,</span><br><span class="line">  base: <span class="string">'file.txt'</span>,</span><br><span class="line">  ext: <span class="string">'ignored'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 返回: '/file.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果未指定 `base`，则使用 `name` + `ext`。</span></span><br><span class="line">path.format(&#123;</span><br><span class="line">  root: <span class="string">'/'</span>,</span><br><span class="line">  name: <span class="string">'file'</span>,</span><br><span class="line">  ext: <span class="string">'.txt'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 返回: '/file.txt'</span></span><br></pre></td></tr></table></figure><p>在 Windows 上：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">path.format(&#123;</span><br><span class="line">  dir: <span class="string">'C:\\path\\dir'</span>,</span><br><span class="line">  base: <span class="string">'file.txt'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 返回: 'C:\\path\\dir\\file.txt'</span></span><br></pre></td></tr></table></figure><h3 id="path-parse-path"><a href="#path-parse-path" class="headerlink" title="path.parse(path)"></a>path.parse(path)</h3><p>返回一个对象，其属性表示 <code>path</code> 的有效元素。</p><p>在 Windows 上：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">path.parse(<span class="string">'C:\\目录1\\目录2\\文件.txt'</span>);</span><br><span class="line"><span class="comment">// 返回:</span></span><br><span class="line"><span class="comment">// &#123; root: 'C:\\',</span></span><br><span class="line"><span class="comment">//   dir: 'C:\\目录1\\目录2',</span></span><br><span class="line"><span class="comment">//   base: '文件.txt',</span></span><br><span class="line"><span class="comment">//   ext: '.txt',</span></span><br><span class="line"><span class="comment">//   name: '文件' &#125;</span></span><br></pre></td></tr></table></figure><p>在 POSIX 上：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">path.parse(<span class="string">'/目录1/目录2/文件.txt'</span>);</span><br><span class="line"><span class="comment">// 返回:</span></span><br><span class="line"><span class="comment">// &#123; root: '/',</span></span><br><span class="line"><span class="comment">//   dir: '/目录1/目录2',</span></span><br><span class="line"><span class="comment">//   base: '文件.txt',</span></span><br><span class="line"><span class="comment">//   ext: '.txt',</span></span><br><span class="line"><span class="comment">//   name: '文件' &#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Node.js" scheme="http://yoursite.com/categories/Node-js/"/>
    
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>编译过程、I_O操作、node应用场景</title>
    <link href="http://yoursite.com/2020/11/25/%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E3%80%81I_O%E6%93%8D%E4%BD%9C%E3%80%81node%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    <id>http://yoursite.com/2020/11/25/%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E3%80%81I_O%E6%93%8D%E4%BD%9C%E3%80%81node%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</id>
    <published>2020-11-25T10:15:15.000Z</published>
    <updated>2020-12-02T01:34:04.734Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="nodejs是什么？"><a href="#nodejs是什么？" class="headerlink" title="nodejs是什么？"></a>nodejs是什么？</h2><p>node.js是基于chrome v8引擎的javascript运行环境</p><p>node.js使用了一个事件驱动、非阻塞式I/O的模型</p><p>浏览器HTML CSS JS</p><p>安卓JAVA PYTHON C++</p><p>IOS: C++ Object-c</p><p>服务端 linux </p><p>JAVA C++ Python nodejs PHP</p><p>计算机语言 ：人与电脑</p><p>编程语言：有逻辑 </p><p>1、机器语言  机器码、原生码</p><p>2、汇编语言   低级语言  – 编译</p><p>3、高级语言   可读性更强 –预编译 变量声明 形参实参统一  function 执行</p><p>java比c高级，垃圾回收机制 不用手动释放变量</p><p>nodejs比Java高级，线程池 不用管理进程</p><h2 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h2><p>1、词法分析（tokenizing）</p><p>​        识别关键字  var  function</p><p>​        标识符 ：var a = 1； function test（){}  存储在栈内存中</p><p>​        分节符： 划分界限 空格、括号、逗号、花括号… </p><p>​        运算符：+-*/^(按位异或运算) || &amp;&amp; |(按位或) &amp;(按位与)</p><p>2、语法分析（parsing）</p><p>​        Abstract Syntax Tree语法抽象树(非线性结构)  语法成员之间的关系通过一种方式进行组合</p><p>3、语义分析（代码生成）</p><p>​        AST –&gt;（目标平台-&gt;操作系统windows）可执行的代码 –&gt; 二进制码</p><p>​        后端系统linux： centos(命令行)    ubuntu(可视化界面)</p><h3 id="js和nodejs是同一种语言吗？"><a href="#js和nodejs是同一种语言吗？" class="headerlink" title="js和nodejs是同一种语言吗？"></a>js和nodejs是同一种语言吗？</h3><p>不是 ，词法分析、语法分析、语义分析三者相同时为同一种语言，而前端（windows…）与后端（linux）有不同的操作系统【运行环境】，底层调用的API接口不同，对应的语义分析就不同</p><h3 id="I-O-input-output-输入、输出"><a href="#I-O-input-output-输入、输出" class="headerlink" title="I/O  input/output  输入、输出"></a>I/O  input/output  输入、输出</h3><p>rom硬盘   ram内存   读取写入操作</p><p>关系型数据库（mySQL 存储在磁盘中）  非关系型数据库（mongoDB 一半内存一半磁盘、redis 存储在内存中）</p><p>I/O非常费时</p><p>内存读取时间为纳秒(ns) 10^-9  GB/s</p><p>硬盘读取时间为毫秒(ms) 10^-3  MB/s</p><p>100w倍时间差</p><p>阻塞I/O(async/await) 等待I/O完成才进行下一步操作  【同步】</p><p>非阻塞I/O   不等待I/O完成就进行下一步操作  【异步】</p><p>I/O密集和CPU密集</p><p>CPU密集是指读写时的运算量非常大 （压缩、解压、加密、解密）</p><p>I/O密集：文件操作、http网络操作、数据库操作  nodejs适用于I/O密集场景(费时的I/O操作) </p><h3 id="node之父-Ryan-Dahl-2009-3"><a href="#node之父-Ryan-Dahl-2009-3" class="headerlink" title="node之父 Ryan Dahl 2009 .3"></a>node之父 Ryan Dahl 2009 .3</h3><p>nodejs是单线程的吗？ </p><p>单线程 ：1. 无法利用多核CPU  会造成性能浪费  2.阻塞代码运行</p><p>不是，大量同步代码需要进行复杂运算时，nodejs可以在主线程中开辟子线程child_process或者集群</p><p>主进程有一个主线程，基于主线程可以开辟子进程</p><p>集群：针对单核CPU利用其他CPU资源重新开一个新的进程，使其能够运行多个进程</p><h3 id="node跨平台"><a href="#node跨平台" class="headerlink" title="node跨平台"></a>node跨平台</h3><p>node运行在window平台是跨平台 </p><p>libuv使得node在不同操作系统之间具有兼容性</p><p>![image-20201130131847568](C:\Users\Magic Book\AppData\Roaming\Typora\typora-user-images\image-20201130131847568.png)</p><p>环境变量   我的电脑 =&gt; 属性 =&gt; 高级系统设置 =&gt; 环境变量 =&gt; path编辑 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Node.js" scheme="http://yoursite.com/categories/Node-js/"/>
    
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>17-自定义原型方法、去重、封装typeof</title>
    <link href="http://yoursite.com/2020/11/21/18-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8E%9F%E5%9E%8B%E6%96%B9%E6%B3%95%E3%80%81%E5%8E%BB%E9%87%8D%E3%80%81%E5%B0%81%E8%A3%85typeof/"/>
    <id>http://yoursite.com/2020/11/21/18-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8E%9F%E5%9E%8B%E6%96%B9%E6%B3%95%E3%80%81%E5%8E%BB%E9%87%8D%E3%80%81%E5%B0%81%E8%A3%85typeof/</id>
    <published>2020-11-21T05:54:14.000Z</published>
    <updated>2021-03-05T07:23:02.182Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="自定义原型方法、去重、封装typeof"><a href="#自定义原型方法、去重、封装typeof" class="headerlink" title="自定义原型方法、去重、封装typeof"></a>自定义原型方法、去重、封装typeof</h1><h2 id="封装typeof"><a href="#封装typeof" class="headerlink" title="封装typeof"></a>封装typeof</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTypeof</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> type = <span class="keyword">typeof</span>(val);</span><br><span class="line">            <span class="keyword">var</span> toStr = <span class="built_in">Object</span>.prototype.toString();</span><br><span class="line">            <span class="keyword">var</span> res = &#123;</span><br><span class="line">                <span class="string">'[object Object]'</span>: object,</span><br><span class="line">                <span class="string">'[object Array]'</span>: array,</span><br><span class="line">                <span class="string">'[object String]'</span>: string,</span><br><span class="line">                <span class="string">'[object Number]'</span>: number,</span><br><span class="line">                <span class="string">'[object Boolean]'</span>: boolean</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (val === <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">'null'</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">'object'</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> ret = toStr.call(val);</span><br><span class="line">                <span class="keyword">return</span> res[ret]</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> type;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>]</span><br><span class="line"></span><br><span class="line">        <span class="built_in">Array</span>.prototype.unique = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">            <span class="keyword">var</span> newArr = []</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!obj.hasOwnProperty(<span class="keyword">this</span>[i])) &#123;</span><br><span class="line">                    obj[<span class="keyword">this</span>[i]] = <span class="keyword">this</span>[i];</span><br><span class="line">                    newArr.push(<span class="keyword">this</span>[i])</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> newArr</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="字符串去重"><a href="#字符串去重" class="headerlink" title="字符串去重"></a>字符串去重</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'fnrnfrnfhkjddmdee'</span>;</span><br><span class="line">        <span class="built_in">String</span>.prototype.unique = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> obj = &#123;&#125;,</span><br><span class="line">                newStr = <span class="string">''</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!obj.hasOwnProperty(<span class="keyword">this</span>[i])) &#123;</span><br><span class="line">                    obj[<span class="keyword">this</span>[i]] = <span class="keyword">this</span>[i];</span><br><span class="line">                    newStr += <span class="keyword">this</span>[i]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> newStr</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(str.unique());</span><br></pre></td></tr></table></figure><h2 id="获取字符串中第一位只有一个的字符"><a href="#获取字符串中第一位只有一个的字符" class="headerlink" title="获取字符串中第一位只有一个的字符"></a>获取字符串中第一位只有一个的字符</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'hruhfrauhfuhbfrufcuhgrhf'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (obj[str[i]]) &#123;</span><br><span class="line">                    obj[str[i]]++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    obj[str[i]] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">                <span class="keyword">if</span> (obj[key] == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> key;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(test(str));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript····" scheme="http://yoursite.com/tags/JavaScript%C2%B7%C2%B7%C2%B7%C2%B7/"/>
    
  </entry>
  
  <entry>
    <title>Vue-虚拟DOM</title>
    <link href="http://yoursite.com/2020/11/21/vue%E8%99%9A%E6%8B%9FDOM/"/>
    <id>http://yoursite.com/2020/11/21/vue%E8%99%9A%E6%8B%9FDOM/</id>
    <published>2020-11-21T04:11:42.000Z</published>
    <updated>2020-12-02T01:32:34.140Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="为什么要有虚拟DOM"><a href="#为什么要有虚拟DOM" class="headerlink" title="为什么要有虚拟DOM?"></a>为什么要有虚拟DOM?</h2><p>jQuery/原生JS   自己控制DOM操作<br>Vue/React      修改数据，数据改变了，视图更新（DOM操作） 数据驱动视图 Vue内部操作DOM<br>Vue 虚拟DOM<br>JS计算好变化 -&gt; 操作我们的真实DOM<br>操作DOM 成本很高    执行JS很快 &gt;&gt;&gt; DOM改变</p><p>虚拟DOM -&gt; JS来模拟真实DOM结构</p><h2 id="用snabbdom模拟vue的虚拟dom"><a href="#用snabbdom模拟vue的虚拟dom" class="headerlink" title="用snabbdom模拟vue的虚拟dom"></a>用snabbdom模拟vue的虚拟dom</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcdn.net/ajax/libs/snabbdom/0.7.4/snabbdom.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcdn.net/ajax/libs/snabbdom/0.7.4/snabbdom-class.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcdn.net/ajax/libs/snabbdom/0.7.4/snabbdom-props.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcdn.net/ajax/libs/snabbdom/0.7.4/snabbdom-style.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcdn.net/ajax/libs/snabbdom/0.7.4/snabbdom-eventlisteners.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcdn.net/ajax/libs/snabbdom/0.7.4/h.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> snabbdom = <span class="built_in">window</span>.snabbdom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> h = snabbdom.h;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> patch = snabbdom.init([</span><br><span class="line">  snabbdom_class,</span><br><span class="line">  snabbdom_props,</span><br><span class="line">  snabbdom_style,</span><br><span class="line">  snabbdom_eventlisteners</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>);</span><br><span class="line"><span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> vnode = h(</span><br><span class="line">  <span class="string">'ul#list'</span>,</span><br><span class="line">  &#123;&#125;,</span><br><span class="line">  [</span><br><span class="line">    h(<span class="string">'li.item'</span>, &#123;&#125;, <span class="string">'第一项'</span>),</span><br><span class="line">    h(<span class="string">'li.item'</span>, &#123;&#125;, <span class="string">'第二项'</span>),</span><br><span class="line">  ]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首次渲染 3</span></span><br><span class="line">patch(container, vnode);</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> newVnode = h(</span><br><span class="line">    <span class="string">'ul#list'</span>,</span><br><span class="line">    &#123;&#125;,</span><br><span class="line">    [</span><br><span class="line">      h(<span class="string">'li.item'</span>, &#123;&#125;, <span class="string">'第一项'</span>),</span><br><span class="line">      h(<span class="string">'li.item'</span>, &#123;&#125;, <span class="string">'第二项111'</span>),</span><br><span class="line">      h(<span class="string">'li.item'</span>, &#123;&#125;, <span class="string">'第三项'</span>)</span><br><span class="line">    ]</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 视图更新 6</span></span><br><span class="line">  patch(vnode, newVnode)</span><br><span class="line"></span><br><span class="line">  vnode = newVnode;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>patch的两个参数放入改变前后的h函数，比较两者的变化，计算出最少的DOM操作，并渲染或更新页面。</p><h3 id="渲染表格"><a href="#渲染表格" class="headerlink" title="渲染表格"></a>渲染表格</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> snabbdom = <span class="built_in">window</span>.snabbdom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> h = snabbdom.h;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> patch = snabbdom.init([</span><br><span class="line">  snabbdom_class,</span><br><span class="line">  snabbdom_props,</span><br><span class="line">  snabbdom_style,</span><br><span class="line">  snabbdom_eventlisteners,</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>);</span><br><span class="line"><span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'leah'</span>,</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    city: <span class="string">'北京'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'rin'</span>,</span><br><span class="line">    age: <span class="number">21</span>,</span><br><span class="line">    city: <span class="string">'上海'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'sam'</span>,</span><br><span class="line">    age: <span class="number">22</span>,</span><br><span class="line">    city: <span class="string">'广州'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">data.unshift(&#123;</span><br><span class="line">  name: <span class="string">'姓名'</span>,</span><br><span class="line">  age: <span class="string">'年龄'</span>,</span><br><span class="line">  city: <span class="string">'城市'</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> vnode;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> newVnode = h(</span><br><span class="line">    <span class="string">'table'</span>,</span><br><span class="line">    &#123;&#125;,</span><br><span class="line">    data.map(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> tds = [];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> item) &#123;</span><br><span class="line">        tds.push(h(<span class="string">'td'</span>, &#123;&#125;, item[i]));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> h(<span class="string">'tr'</span>, &#123;&#125;, tds);</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// vnode 老vnode  newVnode 新vnode</span></span><br><span class="line">  <span class="keyword">if</span> (vnode) &#123;</span><br><span class="line">    <span class="comment">// 视图更新</span></span><br><span class="line">    patch(vnode, newVnode);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 首次渲染</span></span><br><span class="line">    patch(container, newVnode);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  vnode = newVnode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render(data);</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">  data[<span class="number">1</span>].age = <span class="number">21</span>;</span><br><span class="line">  data[<span class="number">2</span>].city = <span class="string">'深圳'</span>;</span><br><span class="line"></span><br><span class="line">  render(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="虚拟DOM" scheme="http://yoursite.com/tags/%E8%99%9A%E6%8B%9FDOM/"/>
    
  </entry>
  
  <entry>
    <title>Promise知识点整理</title>
    <link href="http://yoursite.com/2020/11/16/Promise%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2020/11/16/Promise%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/</id>
    <published>2020-11-16T11:37:00.000Z</published>
    <updated>2020-11-16T11:37:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="什么是地狱回调"><a href="#什么是地狱回调" class="headerlink" title="什么是地狱回调"></a>什么是地狱回调</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">url:&quot;&#x2F;.php&#x2F;ok.php&quot;,</span><br><span class="line">success:res &#x3D;&gt; &#123;</span><br><span class="line">console.log(&#39;事件1&#39;,res)</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url:&quot;&#x2F;.php&#x2F;ok.php&quot;,</span><br><span class="line">success:res &#x3D;&gt; &#123;</span><br><span class="line">console.log(&#39;事件2&#39;,res)</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="什么是Promise"><a href="#什么是Promise" class="headerlink" title="什么是Promise"></a>什么是Promise</h3><p>promise是用于表示一个异步操作最终完成（失败）及其结果的对象,用于解决地狱回调</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">let p1 &#x3D; new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F;resolve 是成功的函数</span><br><span class="line">    &#x2F;&#x2F;reject 是失败的函数</span><br><span class="line">    resolve(1)</span><br><span class="line">&#125;).then(data &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;成功的函数&#39;, data); &#x2F;&#x2F;成功的函数 1</span><br><span class="line">    return new Promise(resolve &#x3D;&gt; &#123;</span><br><span class="line">        resolve(&#39;传递的数值&#39;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).then(value &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;接收到&#39; + value);  &#x2F;&#x2F;接收到传递的数值</span><br><span class="line">&#125;).catch(err &#x3D;&gt; &#123;</span><br><span class="line">console.log(&#39;错误的函数&#39;+err)</span><br><span class="line">&#125;)&#x2F;&#x2F;最好不要在then方法里定义reject状态的回调函数，使用catch方法,会捕捉前面所有的错误</span><br></pre></td></tr></table></figure><h3 id="封装promise函数"><a href="#封装promise函数" class="headerlink" title="封装promise函数"></a>封装promise函数</h3><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/20/U4LDAK.png" alt=""></p><p>不停嵌套，地狱回调</p><h5 id="封装promise函数实现"><a href="#封装promise函数实现" class="headerlink" title="封装promise函数实现"></a>封装promise函数实现</h5><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/20/U4LfBt.png" alt=""></p><h3 id="promise链式调用"><a href="#promise链式调用" class="headerlink" title="promise链式调用"></a>promise链式调用</h3><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Tast1&#123;</span><br><span class="line">then() &#123;</span><br><span class="line">console.log(1);</span><br><span class="line">return this;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">var a &#x3D; new Tast1();</span><br><span class="line">a.then().then().then() &#x2F;&#x2F; 输出3次1</span><br></pre></td></tr></table></figure><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Test2&#123;</span><br><span class="line">then() &#123;</span><br><span class="line">console.log(2);</span><br><span class="line">        return new Test2()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">let b &#x3D; new Test2();</span><br><span class="line">b.then().then().then() &#x2F;&#x2F; 输出3次2</span><br></pre></td></tr></table></figure><h3 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h3><h5 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h5><p>同步：按照从上往下顺序执行，遇到需要等待的事件会停下来等待事件完成才继续往下执行；</p><p>异步：先按照从上往下顺序执行，遇到需要等待的事件将其加入异步队列，同步任务全部完成后去异步队列中先去出所有微任务执行，执行完毕后，取出第一个宏任务，当宏任务中所有相关的微任务执行完毕后，再执行下一个宏任务</p><ol><li>宏任务(macroTask) setTimeout、setInterval, requestAnimationFrame, I/O</li><li>微任务(microTask) process,nextTick,then,objcet.observe   </li></ol><p>例题：</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/20/U4I2dg.png" alt=""></p><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.同步任务</span><br><span class="line">    3</span><br><span class="line">    7</span><br><span class="line">    4</span><br><span class="line">2.微任务</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3.宏任务</span><br><span class="line">5</span><br><span class="line">resolve只执行1次，所以6不输出</span><br></pre></td></tr></table></figure><h3 id="promise的方法"><a href="#promise的方法" class="headerlink" title="promise的方法"></a>promise的方法</h3><h5 id="promise的catch"><a href="#promise的catch" class="headerlink" title="promise的catch"></a>promise的catch</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const someAsyncthing&#x3D;()&#x3D;&gt;&#123;</span><br><span class="line">return new Promise(function(res,rej)&#123;</span><br><span class="line">下面一行会报错，因为x未定义</span><br><span class="line">resolve(x+2)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">someAsyncthing().catch(error&#x3D;&gt;&#123;</span><br><span class="line">console.log(&#39;this is&#39;+error)</span><br><span class="line">&#125;).then(()&#x3D;&gt;console.log(&#39;carry on&#39;))</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;this is [ReferenceError: x is not defined]</span><br><span class="line">&#x2F;&#x2F;carry on </span><br><span class="line">上面代码运行完catch()方法指定的回调函数，会接着运行后面那个then()方法指定的回调函数。如果没有报错，则会跳过catch()方法。</span><br></pre></td></tr></table></figure><h5 id="promise的finally"><a href="#promise的finally" class="headerlink" title="promise的finally"></a>promise的finally</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">finally()方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。</span><br><span class="line">&#x2F;&#x2F; resolve 的值是 undefined</span><br><span class="line">Promise.resolve(2).then(() &#x3D;&gt; &#123;&#125;, () &#x3D;&gt; &#123;&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; resolve 的值是 2</span><br><span class="line">Promise.resolve(2).finally(() &#x3D;&gt; &#123;&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; reject 的值是 undefined</span><br><span class="line">Promise.reject(3).then(() &#x3D;&gt; &#123;&#125;, () &#x3D;&gt; &#123;&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; reject 的值是 3</span><br><span class="line">Promise.reject(3).finally(() &#x3D;&gt; &#123;&#125;)</span><br><span class="line"></span><br><span class="line">finally方法总是会返回原来的值</span><br></pre></td></tr></table></figure><h5 id="Promise的all和race"><a href="#Promise的all和race" class="headerlink" title="Promise的all和race"></a>Promise的all和race</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let p1 &#x3D; new Promise(function(resolve,reject)&#123;</span><br><span class="line">resolve(1)</span><br><span class="line">&#125;)</span><br><span class="line">&#x2F;&#x2F;promise.all(数组，第二个参数函数)</span><br><span class="line">Promise.all([p1,p2,p3...]).then().catch()</span><br><span class="line">&#x2F;&#x2F;Promise.all必须数组里所有的promise对象状态都为fulfilled，才执行then的回调函数，否则执行catch()</span><br><span class="line">Promise.race([p1,p2...]).then().catch()</span><br><span class="line">&#x2F;&#x2F;只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数。</span><br></pre></td></tr></table></figure><h5 id="promise的allsettled"><a href="#promise的allsettled" class="headerlink" title="promise的allsettled"></a>promise的allsettled</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Promise.allSettled()方法接受一组 Promise 实例作为参数，包装成一个新的 Promise 实例。只有等到所有这些参数实例都返回结果，不管是fulfilled还是rejected，包装实例才会结束。</span><br><span class="line"></span><br><span class="line">const resolved &#x3D; Promise.resolve(42);</span><br><span class="line">const rejected &#x3D; Promise.reject(-1);</span><br><span class="line"></span><br><span class="line">const allSettledPromise &#x3D; Promise.allSettled([resolved, rejected]);</span><br><span class="line"></span><br><span class="line">allSettledPromise.then(function (results) &#123;</span><br><span class="line">  console.log(results);</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F; [</span><br><span class="line">&#x2F;&#x2F;    &#123; status: &#39;fulfilled&#39;, value: 42 &#125;,</span><br><span class="line">&#x2F;&#x2F;    &#123; status: &#39;rejected&#39;, reason: -1 &#125;</span><br><span class="line">&#x2F;&#x2F; ]</span><br></pre></td></tr></table></figure><h5 id="promise的any"><a href="#promise的any" class="headerlink" title="promise的any"></a>promise的any</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">只要参数实例有一个变成fulfilled状态，包装实例就会变成fulfilled状态；如果所有参数实例都变成rejected状态，包装实例就会变成rejected状态。</span><br></pre></td></tr></table></figure><h5 id="promise的resolve"><a href="#promise的resolve" class="headerlink" title="promise的resolve"></a>promise的resolve</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Promise.resolve(&#39;foo&#39;)</span><br><span class="line">------等价于-------</span><br><span class="line">new Promise(resolve&#x3D;&gt;resolve(&#39;foo&#39;))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="Promise" scheme="http://yoursite.com/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>webpack报错-Invalid configuration object...</title>
    <link href="http://yoursite.com/2020/11/12/Invalid%20configuration%20object/"/>
    <id>http://yoursite.com/2020/11/12/Invalid%20configuration%20object/</id>
    <published>2020-11-12T06:11:42.000Z</published>
    <updated>2020-11-14T15:19:40.381Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>问题</strong>：webpack打包报错</p><p>![image-20201114231408267](C:\Users\Magic Book\AppData\Roaming\Typora\typora-user-images\image-20201114231408267.png)</p><p><strong>解决办法：</strong></p><p>报错信息中说配置模块中有一个未知的devServer属性。</p><p>检查webpack.config.js中的配置，发现devServer写在了module里，应该写在和module同级的位置，修改后重新打包，打包成功。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Error" scheme="http://yoursite.com/categories/Error/"/>
    
      <category term="webpack" scheme="http://yoursite.com/categories/Error/webpack/"/>
    
    
      <category term="Error" scheme="http://yoursite.com/tags/Error/"/>
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>16-数组方法、类数组</title>
    <link href="http://yoursite.com/2020/11/09/16-%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95%E3%80%81%E7%B1%BB%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2020/11/09/16-%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95%E3%80%81%E7%B1%BB%E6%95%B0%E7%BB%84/</id>
    <published>2020-11-09T05:54:14.000Z</published>
    <updated>2021-03-05T07:16:30.573Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="数组方法、类数组"><a href="#数组方法、类数组" class="headerlink" title="数组方法、类数组"></a>数组方法、类数组</h1><h2 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h2><h3 id="cancat"><a href="#cancat" class="headerlink" title="cancat"></a>cancat</h3><p>拼接两数组，返回新数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">arr2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="keyword">var</span> arr3 = arr1.concat(arr2)</span><br></pre></td></tr></table></figure><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h3><p>数组转成字符串，逗号隔开</p><h3 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h3><p>[start,end)从start开始，到end之前截取，返回新数组  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>];</span><br><span class="line"><span class="keyword">var</span> arr1 = arr.slice(<span class="number">-3</span>, <span class="number">5</span>) <span class="comment">//['d','e']</span></span><br></pre></td></tr></table></figure><h3 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h3><p>将数组中的元素组成新新的字符串，传入参数是分隔符，没传默认为逗号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">var</span> arr1 = arr.join(<span class="string">'-'</span>) <span class="comment">//'a-b-c'</span></span><br></pre></td></tr></table></figure><h3 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h3><p>将字符串按照第一个参数的分隔符分隔，生成新的数组，第二个参数为截取的长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = arr.join(<span class="string">'-'</span>) <span class="comment">//'a-b-c';</span></span><br><span class="line"><span class="keyword">var</span> arr2 = arr1.split(<span class="string">'-'</span>,<span class="number">2</span>) <span class="comment">//['a','b']</span></span><br></pre></td></tr></table></figure><h2 id="类数组"><a href="#类数组" class="headerlink" title="类数组"></a>类数组</h2><p>类数组是类似于数组的对象，不能使用Array上的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="string">'0'</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="string">'1'</span>:<span class="number">2</span>,</span><br><span class="line">    <span class="string">'2'</span>:<span class="number">3</span>,</span><br><span class="line">    <span class="string">'3'</span>:<span class="number">4</span>, </span><br><span class="line">    <span class="string">'4'</span>:<span class="number">5</span>,</span><br><span class="line">    <span class="string">'length'</span>:<span class="number">6</span>,</span><br><span class="line">    <span class="string">'slice'</span>:<span class="built_in">Array</span>.prototype.slice</span><br><span class="line">    <span class="comment">//类数组转数组的方式</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.prototype.push = <span class="built_in">Array</span>.prototype.push;</span><br><span class="line"><span class="comment">//可以将Array上的方法给类数组本身，也可以给Object，这样就可以使用数组的方法了</span></span><br></pre></td></tr></table></figure><h4 id="自己实现push"><a href="#自己实现push" class="headerlink" title="自己实现push"></a>自己实现push</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.push = <span class="function"><span class="keyword">function</span>(<span class="params">ele</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>[<span class="keyword">this</span>.length] = ele;</span><br><span class="line"><span class="keyword">this</span>.length ++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="string">'2'</span>:<span class="number">3</span>,</span><br><span class="line">    <span class="string">'3'</span>:<span class="number">4</span>, </span><br><span class="line">    <span class="string">'length'</span>:<span class="number">2</span>,</span><br><span class="line">    <span class="string">'push'</span>:<span class="built_in">Array</span>.prototype.push</span><br><span class="line">&#125;</span><br><span class="line">obj.push(<span class="number">1</span>);</span><br><span class="line">obj.push(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj)</span><br><span class="line"><span class="comment">//此时length为2，在此基础上长度为3的最大索引值为2</span></span><br><span class="line"><span class="comment">//obj[2] = 1</span></span><br><span class="line"><span class="comment">//obj[3] = 2</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//   '2':1,</span></span><br><span class="line"><span class="comment">//   '3':2, </span></span><br><span class="line"><span class="comment">//   'length':4,</span></span><br><span class="line"><span class="comment">//   'push':Array.prototype.push</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
</feed>
