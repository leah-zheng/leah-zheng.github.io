<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Leah&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-12-09T15:08:10.702Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Leah Zheng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>buffer、编码方式</title>
    <link href="http://yoursite.com/2020/11/30/36-buffer%E3%80%81%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2020/11/30/36-buffer%E3%80%81%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F/</id>
    <published>2020-11-30T11:15:32.000Z</published>
    <updated>2020-12-09T15:08:10.702Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="buffer"><a href="#buffer" class="headerlink" title="buffer"></a>buffer</h2><p>当你要将一桶水移动到另一个人的桶中，可以直接将水桶中的水中的水倒入另一个桶中，也可以用杯子一杯一杯得舀水，直到全部的水装到另一个人的水桶中，一杯水的量就是流。</p><p>Buffer类用于操作TCP流、文件系统操作、以及其他上下文中与八位字节流进行交互。用于读取或操作二进制数据流的机制</p><p>8bit比特 ：1byte字节   1024byte：1kb    1024kb：1mb</p><h3 id="字符集与字符编码"><a href="#字符集与字符编码" class="headerlink" title="字符集与字符编码"></a>字符集与字符编码</h3><p>字符集：十进制数与字符一一对应的集合（unicode)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = Buffer.from(<span class="string">'test'</span>);</span><br><span class="line">cnosole.log(buf);</span><br><span class="line">node index <span class="comment">// &lt;buffer 74 65 73 74&gt; // 16位进制</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="number">74</span>,<span class="number">16</span>)) <span class="comment">// 转成10进制数 到ASSCII表上找对应的字母</span></span><br></pre></td></tr></table></figure><p>字符编码UTF-8  最多4个字节表示一个字符</p><p>字符编码UTF-16 2到4个字节表示一个字符 </p><p>字符编码UTF-32 4个字节表示一个字符</p><p>1、buffer操作二进制数据流</p><p>2、实例类似于整数（0-255 用16进制的方式）数组，大小是固定的</p><p>3、 node中的buffer不是通过javascript申请的，是node中C++层面实现的</p><h4 id="实例化Buffer"><a href="#实例化Buffer" class="headerlink" title="实例化Buffer"></a>实例化Buffer</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf1 = Buffer.alloc(<span class="number">10</span>，<span class="number">1</span>) <span class="comment">// 长度 数值 初始化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> buf2 = Buffer.allocUnsafe(<span class="number">10</span>) <span class="comment">//长度10，未初始化随机的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> buf2 = Buffer.from([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])  </span><br><span class="line"><span class="comment">//&lt;Buffer 01 02 03&gt;</span></span><br></pre></td></tr></table></figure><p>iconv  icon-lite  Buffer编码方式</p><p>buf[index] 会将16进制转成10进制 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">'http://nodejs.cn/'</span>;</span><br><span class="line"><span class="keyword">const</span> buf = Buffer.allocUnsafe(str.length);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length;i++)&#123;</span><br><span class="line">buf[i] = str.charCodeAt(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(buf.toString(<span class="string">'utf8'</span>));</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = Buffer.from(<span class="string">'abc'</span>);</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; buf.length;i++)&#123;</span><br><span class="line">str +=<span class="built_in">String</span>.fromCodePoint(buf[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str)</span><br></pre></td></tr></table></figure><h3 id="from"><a href="#from" class="headerlink" title="from"></a>from</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = Buffer.from([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> buf1 = Buffer.from([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(buf === buf1) <span class="comment">//false</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="string">'0'</span>:<span class="number">1</span>,</span><br><span class="line"><span class="string">'1'</span>:<span class="number">2</span>,</span><br><span class="line">length:<span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> buf = Buffer.from(obj);</span><br><span class="line"><span class="built_in">console</span>.log(buf) <span class="comment">// &lt;Buffer 01 02 00 00 00&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf1 = Buffer.from(<span class="string">'this is a tést'</span>);</span><br><span class="line"><span class="keyword">const</span> buf2 = Buffer.from(<span class="string">'7468697320697320612074c3a97374'</span>, <span class="string">'hex'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(buf1.toString());</span><br><span class="line"><span class="comment">// 打印: this is a tést</span></span><br><span class="line"><span class="built_in">console</span>.log(buf2.toString());</span><br><span class="line"><span class="comment">// 打印: this is a tést</span></span><br><span class="line"><span class="built_in">console</span>.log(buf1.toString(<span class="string">'latin1'</span>));</span><br><span class="line"><span class="comment">// 打印: this is a tÃ©st</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Node.js" scheme="http://yoursite.com/categories/Node-js/"/>
    
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>buffer、path</title>
    <link href="http://yoursite.com/2020/11/28/35-buffer%E3%80%81path/"/>
    <id>http://yoursite.com/2020/11/28/35-buffer%E3%80%81path/</id>
    <published>2020-11-28T04:55:25.000Z</published>
    <updated>2020-12-05T08:21:04.642Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="buf-write-string-offset-length-encding"><a href="#buf-write-string-offset-length-encding" class="headerlink" title="buf.write(string[,offset[,length]] [,encding]])"></a>buf.write(string[,offset[,length]] [,encding]])</h2><ul><li><code>string</code> 要写入 <code>buf</code> 的字符串。</li><li><code>offset</code> 开始写入 <code>string</code> 之前要跳过的字节数。<strong>默认值:</strong> <code>0</code>。</li><li><code>length</code> 要写入的最大字节数（写入的字节数不会超出 <code>buf.length - offset</code>）。<strong>默认值:</strong> <code>buf.length - offset</code>。</li><li><code>encoding</code> <code>string</code> 的字符编码。<strong>默认值:</strong> <code>&#39;utf8&#39;</code>。</li><li>返回: 已写入的字节数。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = Buffer.alloc(<span class="number">256</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> len = buf.write(<span class="string">'\u00bd + \u00bc = \u00be'</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;len&#125;</span> 个字节: <span class="subst">$&#123;buf.toString(<span class="string">'utf8'</span>, <span class="number">0</span>, len)&#125;</span>`</span>);</span><br><span class="line"><span class="comment">// 打印: 12 个字节: ½ + ¼ = ¾</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> buffer = Buffer.alloc(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> length = buffer.write(<span class="string">'abcd'</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;length&#125;</span> bytes: <span class="subst">$&#123;buffer.toString(<span class="string">'utf8'</span>, <span class="number">8</span>, <span class="number">10</span>)&#125;</span>`</span>);</span><br><span class="line"><span class="comment">// 打印: 2 个字节 : ab</span></span><br></pre></td></tr></table></figure><h3 id="buf-toString-encoding-start-end"><a href="#buf-toString-encoding-start-end" class="headerlink" title="buf.toString([encoding[, start[, end]]])"></a>buf.toString([encoding[, start[, end]]])</h3><ul><li><code>encoding</code>使用的字符编码。<strong>默认值:</strong> <code>&#39;utf8&#39;</code>。</li><li><code>start</code> 开始解码的字节偏移量。<strong>默认值:</strong> <code>0</code>。</li><li><code>end</code>结束解码的字节偏移量（不包含）。<strong>默认值:</strong> <a href="http://nodejs.cn/s/hn6FjL" target="_blank" rel="noopener"><code>buf.length</code></a>。</li><li>返回:根据 <code>encoding</code> 指定的字符编码将 <code>buf</code> 解码成字符串。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf1 = Buffer.allocUnsafe(<span class="number">26</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// 97 是 'a' 的十进制 ASCII 值。</span></span><br><span class="line">  buf1[i] = i + <span class="number">97</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(buf1.toString(<span class="string">'utf8'</span>));</span><br><span class="line"><span class="comment">// 打印: abcdefghijklmnopqrstuvwxyz</span></span><br><span class="line"><span class="built_in">console</span>.log(buf1.toString(<span class="string">'utf8'</span>, <span class="number">0</span>, <span class="number">5</span>));</span><br><span class="line"><span class="comment">// 打印: abcde</span></span><br></pre></td></tr></table></figure><h3 id="Buffer-isEncoding-encoding"><a href="#Buffer-isEncoding-encoding" class="headerlink" title="Buffer.isEncoding(encoding)"></a>Buffer.isEncoding(encoding)</h3><p>如果 <code>encoding</code> 是支持的字符编码的名称，则返回 <code>true</code>，否则返回 <code>false</code>。</p><h3 id="Buffer-byteLength-string-encoding"><a href="#Buffer-byteLength-string-encoding" class="headerlink" title="Buffer.byteLength(string[, encoding])"></a>Buffer.byteLength(string[, encoding])</h3><p>Buffer.length 默认返回utf8编码格式的字节长度，而Buffer.byteLength可以获取指定编码格式的字节长度。</p><h3 id="Buffer-compare-buf1-buf2"><a href="#Buffer-compare-buf1-buf2" class="headerlink" title="Buffer.compare(buf1, buf2)"></a>Buffer.compare(buf1, buf2)</h3><ul><li>返回: <code>-1</code>、 <code>0</code> 或 <code>1</code>，取决于比较的结果。</li></ul><p>比较 <code>buf1</code> 与 <code>buf2</code>，主要用于 <code>Buffer</code> 实例数组的排序。 相当于调用 [<code>buf1.compare(buf2)</code>]。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf1 = Buffer.from(<span class="string">'1234'</span>);</span><br><span class="line"><span class="keyword">const</span> buf2 = Buffer.from(<span class="string">'0123'</span>);</span><br><span class="line"><span class="keyword">const</span> arr = [buf1, buf2];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.sort(Buffer.compare));</span><br><span class="line"><span class="comment">// 打印: [ &lt;Buffer 30 31 32 33&gt;, &lt;Buffer 31 32 33 34&gt; ]</span></span><br><span class="line"><span class="comment">// (结果相当于: [buf2, buf1])</span></span><br></pre></td></tr></table></figure><h3 id="Buffer-concat-list-totalLength"><a href="#Buffer-concat-list-totalLength" class="headerlink" title="Buffer.concat(list[, totalLength])"></a>Buffer.concat(list[, totalLength])</h3><p>返回一个合并了 <code>list</code> 中所有 <code>Buffer</code> 实例的新 <code>Buffer</code>。</p><p>如果 <code>list</code> 中没有元素、或 <code>totalLength</code> 为 0，则返回一个长度为 0 的 <code>Buffer</code>。</p><p>如果没有提供 <code>totalLength</code>，则通过将 <code>list</code> 中的 <code>Buffer</code> 实例的长度相加来计算得出。</p><p>如果 <code>list</code> 中的 <code>Buffer</code> 合并后的总长度大于 <code>totalLength</code>，则结果会被截断到 <code>totalLength</code> 的长度。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用含有三个 `Buffer` 实例的数组创建一个单一的 `Buffer`。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> buf1 = Buffer.alloc(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">const</span> buf2 = Buffer.alloc(<span class="number">14</span>);</span><br><span class="line"><span class="keyword">const</span> buf3 = Buffer.alloc(<span class="number">18</span>);</span><br><span class="line"><span class="keyword">const</span> totalLength = buf1.length + buf2.length + buf3.length;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(totalLength);</span><br><span class="line"><span class="comment">// 打印: 42</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bufA = Buffer.concat([buf1, buf2, buf3], totalLength);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bufA);</span><br><span class="line"><span class="comment">// 打印: &lt;Buffer 00 00 00 00 ...&gt;</span></span><br><span class="line"><span class="built_in">console</span>.log(bufA.length);</span><br><span class="line"><span class="comment">// 打印: 42</span></span><br></pre></td></tr></table></figure><h3 id="buf-slice-start-end"><a href="#buf-slice-start-end" class="headerlink" title="buf.slice([start[, end]])"></a>buf.slice([start[, end]])</h3><ul><li><code>start</code> 新 <code>Buffer</code> 开始的位置。<strong>默认值:</strong> <code>0</code>。</li><li><code>end</code>新 <code>Buffer</code> 结束的位置（不包含）。<strong>默认值:</strong> <code>buf.length</code>。</li></ul><p>返回一个新的 <code>Buffer</code>，它引用与原始的 Buffer 相同的内存，但是由 <code>start</code> 和 <code>end</code> 索引进行偏移和裁剪。</p><h3 id="buf-copy-target-targetStart-sourceStart-sourceEnd"><a href="#buf-copy-target-targetStart-sourceStart-sourceEnd" class="headerlink" title="buf.copy(target[, targetStart[, sourceStart[, sourceEnd]]])"></a>buf.copy(target[, targetStart[, sourceStart[, sourceEnd]]])</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建两个 `Buffer` 实例。</span></span><br><span class="line"><span class="keyword">const</span> buf1 = Buffer.allocUnsafe(<span class="number">26</span>);</span><br><span class="line"><span class="keyword">const</span> buf2 = Buffer.allocUnsafe(<span class="number">26</span>).fill(<span class="string">'!'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// 97 是 'a' 的十进制 ASCII 值。</span></span><br><span class="line">  buf1[i] = i + <span class="number">97</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拷贝 `buf1` 中第 16 至 19 字节偏移量的数据到 `buf2` 第 8 字节偏移量开始。</span></span><br><span class="line">buf1.copy(buf2, <span class="number">8</span>, <span class="number">16</span>, <span class="number">20</span>);</span><br><span class="line"><span class="comment">// 这等效于：</span></span><br><span class="line"><span class="comment">// buf2.set(buf1.subarray(16, 20), 8);</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(buf2.toString(<span class="string">'ascii'</span>, <span class="number">0</span>, <span class="number">25</span>));</span><br><span class="line"><span class="comment">// 打印: !!!!!!!!qrst!!!!!!!!!!!!!</span></span><br></pre></td></tr></table></figure><h3 id="buf-fill-value-offset-end-encoding"><a href="#buf-fill-value-offset-end-encoding" class="headerlink" title="buf.fill(value[, offset[, end]] [, encoding])"></a>buf.fill(value[, offset[, end]] [, encoding])</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用 ASCII 字符 'h' 填充 `Buffer`。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = Buffer.allocUnsafe(<span class="number">50</span>).fill(<span class="string">'h'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(b.toString());</span><br><span class="line"><span class="comment">// 打印: hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh</span></span><br></pre></td></tr></table></figure><h3 id="buf-indexOf-value-byteOffset-encoding"><a href="#buf-indexOf-value-byteOffset-encoding" class="headerlink" title="buf.indexOf(value[, byteOffset] [, encoding])"></a>buf.indexOf(value[, byteOffset] [, encoding])</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = Buffer.from(<span class="string">'this is a buffer'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(buf.indexOf(<span class="string">'this'</span>));</span><br><span class="line"><span class="comment">// 打印: 0</span></span><br><span class="line"><span class="built_in">console</span>.log(buf.indexOf(<span class="string">'is'</span>));</span><br><span class="line"><span class="comment">// 打印: 2</span></span><br></pre></td></tr></table></figure><h3 id="buf-lastIndexOf-value-byteOffset-encoding"><a href="#buf-lastIndexOf-value-byteOffset-encoding" class="headerlink" title="buf.lastIndexOf(value[, byteOffset] [, encoding])"></a>buf.lastIndexOf(value[, byteOffset] [, encoding])</h3><p>与 [<code>buf.indexOf()</code>]的区别是，查找的是 <code>value</code> 最后一次出现的索引，而不是首次出现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = Buffer.from(<span class="string">'this buffer is a buffer'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(buf.lastIndexOf(<span class="string">'this'</span>));</span><br><span class="line"><span class="comment">// 打印: 0</span></span><br><span class="line"><span class="built_in">console</span>.log(buf.lastIndexOf(<span class="string">'buffer'</span>));</span><br><span class="line"><span class="comment">// 打印: 17</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(buf.lastIndexOf(<span class="string">'buffer'</span>, <span class="number">5</span>));</span><br><span class="line"><span class="comment">// 打印: 5</span></span><br><span class="line"><span class="built_in">console</span>.log(buf.lastIndexOf(<span class="string">'buffer'</span>, <span class="number">4</span>));</span><br><span class="line"><span class="comment">// 打印: -1</span></span><br></pre></td></tr></table></figure><h3 id="buf-equals-otherBuffer"><a href="#buf-equals-otherBuffer" class="headerlink" title="buf.equals(otherBuffer)"></a>buf.equals(otherBuffer)</h3><p>如果 <code>buf</code> 与 <code>otherBuffer</code> 具有完全相同的字节，则返回 <code>true</code>，否则返回 <code>false</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf1 = Buffer.from(<span class="string">'ABC'</span>);</span><br><span class="line"><span class="keyword">const</span> buf2 = Buffer.from(<span class="string">'414243'</span>, <span class="string">'hex'</span>);</span><br><span class="line"><span class="keyword">const</span> buf3 = Buffer.from(<span class="string">'ABCD'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(buf1.equals(buf2));</span><br><span class="line"><span class="comment">// 打印: true</span></span><br><span class="line"><span class="built_in">console</span>.log(buf1.equals(buf3));</span><br><span class="line"><span class="comment">// 打印: false</span></span><br></pre></td></tr></table></figure><h1 id="string-decoder（字符串解码器）"><a href="#string-decoder（字符串解码器）" class="headerlink" title="string_decoder（字符串解码器）"></a>string_decoder（字符串解码器）</h1><p>将 <code>Buffer</code> 实例写入 <code>StringDecoder</code> 实例时，会使用一个内部 buffer 来确保解码的字符串不包含任何不完整的多字节字符。不完整的字符会被保存在该 buffer 中，直到下次调用 <code>stringDecoder.write()</code> 或调用 <code>stringDecoder.end()</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; StringDecoder &#125; = <span class="built_in">require</span>(<span class="string">'string_decoder'</span>);</span><br><span class="line"><span class="keyword">const</span> decoder = <span class="keyword">new</span> StringDecoder(<span class="string">'utf8'</span>);</span><br><span class="line"><span class="keyword">const</span> buffer = Buffer.from(<span class="string">'中文字符串'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; buffer.length; i+=<span class="number">5</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> b = Buffer.alloc(<span class="number">5</span>);</span><br><span class="line">    buffer.copy(b, <span class="number">0</span>, i);</span><br><span class="line">    <span class="built_in">console</span>.log(decoder.write(b));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="path（路径）"><a href="#path（路径）" class="headerlink" title="path（路径）"></a>path（路径）</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br></pre></td></tr></table></figure><h2 id="路径的组成部分"><a href="#路径的组成部分" class="headerlink" title="路径的组成部分"></a>路径的组成部分</h2><h3 id="path-dirname-path"><a href="#path-dirname-path" class="headerlink" title="path.dirname(path)"></a>path.dirname(path)</h3><p>返回 <code>path</code> 的目录名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path.dirname(<span class="string">'/目录1/目录2/目录3'</span>);</span><br><span class="line"><span class="comment">// 返回: '/目录1/目录2</span></span><br></pre></td></tr></table></figure><h3 id="path-basename-path-ext"><a href="#path-basename-path-ext" class="headerlink" title="path.basename(path[, ext])"></a>path.basename(path[, ext])</h3><p>返回 <code>path</code> 的最后一部分即文件名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">path.basename(<span class="string">'/目录1/目录2/文件.html'</span>);</span><br><span class="line"><span class="comment">// 返回: '文件.html'</span></span><br><span class="line"></span><br><span class="line">path.basename(<span class="string">'/目录1/目录2/文件.html'</span>, <span class="string">'.html'</span>);</span><br><span class="line"><span class="comment">// 返回: '文件'</span></span><br></pre></td></tr></table></figure><h3 id="path-extname-path"><a href="#path-extname-path" class="headerlink" title="path.extname(path)"></a>path.extname(path)</h3><p>返回 <code>path</code> 的扩展名，即 <code>path</code> 的最后一部分中从最后一次出现 <code>.</code>（句点）字符直到字符串结束。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">path.extname(<span class="string">'index.html'</span>);</span><br><span class="line"><span class="comment">// 返回: '.html'</span></span><br><span class="line">path.extname(<span class="string">'index'</span>);</span><br><span class="line"><span class="comment">// 返回: ''</span></span><br><span class="line">path.extname(<span class="string">'.index'</span>);</span><br><span class="line"><span class="comment">// 返回: ''</span></span><br></pre></td></tr></table></figure><h3 id="path-sep"><a href="#path-sep" class="headerlink" title="path.sep"></a>path.sep</h3><p>提供平台特定的路径片段分隔符：</p><ul><li>Windows 上是 <code>\</code>。</li><li>POSIX 上是 <code>/</code>。</li></ul><p>在 Windows 上：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'foo\\bar\\baz'</span>.split(path.sep);</span><br><span class="line"><span class="comment">// 返回: ['foo', 'bar', 'baz']</span></span><br></pre></td></tr></table></figure><p>在 POSIX 上：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'foo/bar/baz'</span>.split(path.sep);</span><br><span class="line"><span class="comment">// 返回: ['foo', 'bar', 'baz']</span></span><br></pre></td></tr></table></figure><h3 id="path-delimiter"><a href="#path-delimiter" class="headerlink" title="path.delimiter"></a>path.delimiter</h3><p>提供平台特定的路径定界符：</p><ul><li><code>;</code> 用于 Windows</li><li><code>:</code> 用于 POSIX</li></ul><p>在 POSIX 上：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(process.env.PATH);</span><br><span class="line"><span class="comment">// 打印: '/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin'</span></span><br><span class="line"></span><br><span class="line">process.env.PATH.split(path.delimiter);</span><br><span class="line"><span class="comment">// 返回: ['/usr/bin', '/bin', '/usr/sbin', '/sbin', '/usr/local/bin']</span></span><br></pre></td></tr></table></figure><p>在 Windows 上：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(process.env.PATH);</span><br><span class="line"><span class="comment">// 打印: 'C:\Windows\system32;C:\Windows;C:\Program Files\node\'</span></span><br><span class="line"></span><br><span class="line">process.env.PATH.split(path.delimiter);</span><br><span class="line"><span class="comment">// 返回: ['C:\\Windows\\system32', 'C:\\Windows', 'C:\\Program Files\\node\\']</span></span><br></pre></td></tr></table></figure><h2 id="路径的规范化"><a href="#路径的规范化" class="headerlink" title="路径的规范化"></a>路径的规范化</h2><h3 id="path-normalize-path"><a href="#path-normalize-path" class="headerlink" title="path.normalize(path)"></a>path.normalize(path)</h3><p>规范化给定的 <code>path</code>，解析 <code>&#39;..&#39;</code> 和 <code>&#39;.&#39;</code> 片段。</p><h3 id="path-join-…paths"><a href="#path-join-…paths" class="headerlink" title="path.join([…paths])"></a>path.join([…paths])</h3><p>将所有给定的 <code>path</code> 片段连接到一起（使用平台特定的分隔符作为定界符），然后规范化生成的路径。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path.join(<span class="string">'/目录1'</span>, <span class="string">'目录2'</span>, <span class="string">'目录3/目录4'</span>, <span class="string">'目录5'</span>, <span class="string">'..'</span>);</span><br><span class="line"><span class="comment">// 返回: '/目录1/目录2/目录3/目录4'</span></span><br></pre></td></tr></table></figure><h3 id="path-isAbsolute-path"><a href="#path-isAbsolute-path" class="headerlink" title="path.isAbsolute(path)"></a>path.isAbsolute(path)</h3><p>检测 <code>path</code> 是否为绝对路径。</p><p>如果给定的 <code>path</code> 是零长度字符串，则返回 <code>false</code>。</p><p>在 Windows 上：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">path.isAbsolute(<span class="string">'//server'</span>);    <span class="comment">// true</span></span><br><span class="line">path.isAbsolute(<span class="string">'\\\\server'</span>);  <span class="comment">// true</span></span><br><span class="line">path.isAbsolute(<span class="string">'C:/foo/..'</span>);   <span class="comment">// true</span></span><br><span class="line">path.isAbsolute(<span class="string">'C:\\foo\\..'</span>); <span class="comment">// true</span></span><br><span class="line">path.isAbsolute(<span class="string">'bar\\baz'</span>);    <span class="comment">// false</span></span><br><span class="line">path.isAbsolute(<span class="string">'bar/baz'</span>);     <span class="comment">// false</span></span><br><span class="line">path.isAbsolute(<span class="string">'.'</span>);           <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="path-resolve-…paths"><a href="#path-resolve-…paths" class="headerlink" title="path.resolve([…paths])"></a>path.resolve([…paths])</h3><p>将路径或路径片段的序列解析为绝对路径。</p><p>如果没有传入 <code>path</code> 片段，则 <code>path.resolve()</code> 会返回当前工作目录的绝对路径。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">path.resolve(<span class="string">'/目录1/目录2'</span>, <span class="string">'./目录3'</span>);</span><br><span class="line"><span class="comment">// 返回: '/目录1/目录2/目录3'</span></span><br><span class="line"></span><br><span class="line">path.resolve(<span class="string">'/目录1/目录2'</span>, <span class="string">'/目录3/目录4/'</span>);</span><br><span class="line"><span class="comment">// 返回: '/目录3/目录4'</span></span><br><span class="line"></span><br><span class="line">path.resolve(<span class="string">'目录1'</span>, <span class="string">'目录2/目录3/'</span>, <span class="string">'../目录4/文件.gif'</span>);</span><br><span class="line"><span class="comment">// 如果当前工作目录是 /目录A/目录B，</span></span><br><span class="line"><span class="comment">// 则返回 '/目录A/目录B/目录1/目录2/目录4/文件.gif'</span></span><br></pre></td></tr></table></figure><h3 id="path-relative-from-to"><a href="#path-relative-from-to" class="headerlink" title="path.relative(from, to)"></a>path.relative(from, to)</h3><p>根据当前工作目录返回 <code>from</code> 到 <code>to</code> 的相对路径</p><p>在 POSIX 上：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path.relative(<span class="string">'/data/orandea/test/aaa'</span>, <span class="string">'/data/orandea/impl/bbb'</span>);</span><br><span class="line"><span class="comment">// 返回: '../../impl/bbb'</span></span><br></pre></td></tr></table></figure><p>在 Windows 上：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path.relative(<span class="string">'C:\\orandea\\test\\aaa'</span>, <span class="string">'C:\\orandea\\impl\\bbb'</span>);</span><br><span class="line"><span class="comment">// 返回: '..\\..\\impl\\bbb'</span></span><br></pre></td></tr></table></figure><h3 id="path-format-pathObject"><a href="#path-format-pathObject" class="headerlink" title="path.format(pathObject)"></a>path.format(pathObject)</h3><p>从对象返回路径字符串。 与 [<code>path.parse()</code>] 相反。</p><ul><li>如果提供了 <code>pathObject.dir</code>，则忽略 <code>pathObject.root</code>。</li><li>如果 <code>pathObject.base</code> 存在，则忽略 <code>pathObject.ext</code> 和 <code>pathObject.name</code>。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果提供了 `dir`、 `root` 和 `base`，</span></span><br><span class="line"><span class="comment">// 则返回 `$&#123;dir&#125;$&#123;path.sep&#125;$&#123;base&#125;`。</span></span><br><span class="line"><span class="comment">// `root` 会被忽略。</span></span><br><span class="line">path.format(&#123;</span><br><span class="line">  root: <span class="string">'/ignored'</span>,</span><br><span class="line">  dir: <span class="string">'/home/user/dir'</span>,</span><br><span class="line">  base: <span class="string">'file.txt'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 返回: '/home/user/dir/file.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果未指定 `dir`，则使用 `root`。 </span></span><br><span class="line"><span class="comment">// 如果只提供 `root`，或 'dir` 等于 `root`，则将不包括平台分隔符。 </span></span><br><span class="line"><span class="comment">// `ext` 将被忽略。</span></span><br><span class="line">path.format(&#123;</span><br><span class="line">  root: <span class="string">'/'</span>,</span><br><span class="line">  base: <span class="string">'file.txt'</span>,</span><br><span class="line">  ext: <span class="string">'ignored'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 返回: '/file.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果未指定 `base`，则使用 `name` + `ext`。</span></span><br><span class="line">path.format(&#123;</span><br><span class="line">  root: <span class="string">'/'</span>,</span><br><span class="line">  name: <span class="string">'file'</span>,</span><br><span class="line">  ext: <span class="string">'.txt'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 返回: '/file.txt'</span></span><br></pre></td></tr></table></figure><p>在 Windows 上：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">path.format(&#123;</span><br><span class="line">  dir: <span class="string">'C:\\path\\dir'</span>,</span><br><span class="line">  base: <span class="string">'file.txt'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 返回: 'C:\\path\\dir\\file.txt'</span></span><br></pre></td></tr></table></figure><h3 id="path-parse-path"><a href="#path-parse-path" class="headerlink" title="path.parse(path)"></a>path.parse(path)</h3><p>返回一个对象，其属性表示 <code>path</code> 的有效元素。</p><p>在 Windows 上：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">path.parse(<span class="string">'C:\\目录1\\目录2\\文件.txt'</span>);</span><br><span class="line"><span class="comment">// 返回:</span></span><br><span class="line"><span class="comment">// &#123; root: 'C:\\',</span></span><br><span class="line"><span class="comment">//   dir: 'C:\\目录1\\目录2',</span></span><br><span class="line"><span class="comment">//   base: '文件.txt',</span></span><br><span class="line"><span class="comment">//   ext: '.txt',</span></span><br><span class="line"><span class="comment">//   name: '文件' &#125;</span></span><br></pre></td></tr></table></figure><p>在 POSIX 上：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">path.parse(<span class="string">'/目录1/目录2/文件.txt'</span>);</span><br><span class="line"><span class="comment">// 返回:</span></span><br><span class="line"><span class="comment">// &#123; root: '/',</span></span><br><span class="line"><span class="comment">//   dir: '/目录1/目录2',</span></span><br><span class="line"><span class="comment">//   base: '文件.txt',</span></span><br><span class="line"><span class="comment">//   ext: '.txt',</span></span><br><span class="line"><span class="comment">//   name: '文件' &#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Node.js" scheme="http://yoursite.com/categories/Node-js/"/>
    
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>编译过程、I_O操作、node应用场景</title>
    <link href="http://yoursite.com/2020/11/25/34-%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E3%80%81I_O%E6%93%8D%E4%BD%9C%E3%80%81node%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    <id>http://yoursite.com/2020/11/25/34-%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E3%80%81I_O%E6%93%8D%E4%BD%9C%E3%80%81node%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</id>
    <published>2020-11-25T10:15:15.000Z</published>
    <updated>2020-12-02T01:34:04.734Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="nodejs是什么？"><a href="#nodejs是什么？" class="headerlink" title="nodejs是什么？"></a>nodejs是什么？</h2><p>node.js是基于chrome v8引擎的javascript运行环境</p><p>node.js使用了一个事件驱动、非阻塞式I/O的模型</p><p>浏览器HTML CSS JS</p><p>安卓JAVA PYTHON C++</p><p>IOS: C++ Object-c</p><p>服务端 linux </p><p>JAVA C++ Python nodejs PHP</p><p>计算机语言 ：人与电脑</p><p>编程语言：有逻辑 </p><p>1、机器语言  机器码、原生码</p><p>2、汇编语言   低级语言  – 编译</p><p>3、高级语言   可读性更强 –预编译 变量声明 形参实参统一  function 执行</p><p>java比c高级，垃圾回收机制 不用手动释放变量</p><p>nodejs比Java高级，线程池 不用管理进程</p><h2 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h2><p>1、词法分析（tokenizing）</p><p>​        识别关键字  var  function</p><p>​        标识符 ：var a = 1； function test（){}  存储在栈内存中</p><p>​        分节符： 划分界限 空格、括号、逗号、花括号… </p><p>​        运算符：+-*/^(按位异或运算) || &amp;&amp; |(按位或) &amp;(按位与)</p><p>2、语法分析（parsing）</p><p>​        Abstract Syntax Tree语法抽象树(非线性结构)  语法成员之间的关系通过一种方式进行组合</p><p>3、语义分析（代码生成）</p><p>​        AST –&gt;（目标平台-&gt;操作系统windows）可执行的代码 –&gt; 二进制码</p><p>​        后端系统linux： centos(命令行)    ubuntu(可视化界面)</p><h3 id="js和nodejs是同一种语言吗？"><a href="#js和nodejs是同一种语言吗？" class="headerlink" title="js和nodejs是同一种语言吗？"></a>js和nodejs是同一种语言吗？</h3><p>不是 ，词法分析、语法分析、语义分析三者相同时为同一种语言，而前端（windows…）与后端（linux）有不同的操作系统【运行环境】，底层调用的API接口不同，对应的语义分析就不同</p><h3 id="I-O-input-output-输入、输出"><a href="#I-O-input-output-输入、输出" class="headerlink" title="I/O  input/output  输入、输出"></a>I/O  input/output  输入、输出</h3><p>rom硬盘   ram内存   读取写入操作</p><p>关系型数据库（mySQL 存储在磁盘中）  非关系型数据库（mongoDB 一半内存一半磁盘、redis 存储在内存中）</p><p>I/O非常费时</p><p>内存读取时间为纳秒(ns) 10^-9  GB/s</p><p>硬盘读取时间为毫秒(ms) 10^-3  MB/s</p><p>100w倍时间差</p><p>阻塞I/O(async/await) 等待I/O完成才进行下一步操作  【同步】</p><p>非阻塞I/O   不等待I/O完成就进行下一步操作  【异步】</p><p>I/O密集和CPU密集</p><p>CPU密集是指读写时的运算量非常大 （压缩、解压、加密、解密）</p><p>I/O密集：文件操作、http网络操作、数据库操作  nodejs适用于I/O密集场景(费时的I/O操作) </p><h3 id="node之父-Ryan-Dahl-2009-3"><a href="#node之父-Ryan-Dahl-2009-3" class="headerlink" title="node之父 Ryan Dahl 2009 .3"></a>node之父 Ryan Dahl 2009 .3</h3><p>nodejs是单线程的吗？ </p><p>单线程 ：1. 无法利用多核CPU  会造成性能浪费  2.阻塞代码运行</p><p>不是，大量同步代码需要进行复杂运算时，nodejs可以在主线程中开辟子线程child_process或者集群</p><p>主进程有一个主线程，基于主线程可以开辟子进程</p><p>集群：针对单核CPU利用其他CPU资源重新开一个新的进程，使其能够运行多个进程</p><h3 id="node跨平台"><a href="#node跨平台" class="headerlink" title="node跨平台"></a>node跨平台</h3><p>node运行在window平台是跨平台 </p><p>libuv使得node在不同操作系统之间具有兼容性</p><p>![image-20201130131847568](C:\Users\Magic Book\AppData\Roaming\Typora\typora-user-images\image-20201130131847568.png)</p><p>环境变量   我的电脑 =&gt; 属性 =&gt; 高级系统设置 =&gt; 环境变量 =&gt; path编辑 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Node.js" scheme="http://yoursite.com/categories/Node-js/"/>
    
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Vue-虚拟DOM</title>
    <link href="http://yoursite.com/2020/11/21/33-vue%E8%99%9A%E6%8B%9FDOM/"/>
    <id>http://yoursite.com/2020/11/21/33-vue%E8%99%9A%E6%8B%9FDOM/</id>
    <published>2020-11-21T04:11:42.000Z</published>
    <updated>2020-12-02T01:32:34.140Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="为什么要有虚拟DOM"><a href="#为什么要有虚拟DOM" class="headerlink" title="为什么要有虚拟DOM?"></a>为什么要有虚拟DOM?</h2><p>jQuery/原生JS   自己控制DOM操作<br>Vue/React      修改数据，数据改变了，视图更新（DOM操作） 数据驱动视图 Vue内部操作DOM<br>Vue 虚拟DOM<br>JS计算好变化 -&gt; 操作我们的真实DOM<br>操作DOM 成本很高    执行JS很快 &gt;&gt;&gt; DOM改变</p><p>虚拟DOM -&gt; JS来模拟真实DOM结构</p><h2 id="用snabbdom模拟vue的虚拟dom"><a href="#用snabbdom模拟vue的虚拟dom" class="headerlink" title="用snabbdom模拟vue的虚拟dom"></a>用snabbdom模拟vue的虚拟dom</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcdn.net/ajax/libs/snabbdom/0.7.4/snabbdom.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcdn.net/ajax/libs/snabbdom/0.7.4/snabbdom-class.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcdn.net/ajax/libs/snabbdom/0.7.4/snabbdom-props.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcdn.net/ajax/libs/snabbdom/0.7.4/snabbdom-style.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcdn.net/ajax/libs/snabbdom/0.7.4/snabbdom-eventlisteners.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcdn.net/ajax/libs/snabbdom/0.7.4/h.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> snabbdom = <span class="built_in">window</span>.snabbdom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> h = snabbdom.h;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> patch = snabbdom.init([</span><br><span class="line">  snabbdom_class,</span><br><span class="line">  snabbdom_props,</span><br><span class="line">  snabbdom_style,</span><br><span class="line">  snabbdom_eventlisteners</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>);</span><br><span class="line"><span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> vnode = h(</span><br><span class="line">  <span class="string">'ul#list'</span>,</span><br><span class="line">  &#123;&#125;,</span><br><span class="line">  [</span><br><span class="line">    h(<span class="string">'li.item'</span>, &#123;&#125;, <span class="string">'第一项'</span>),</span><br><span class="line">    h(<span class="string">'li.item'</span>, &#123;&#125;, <span class="string">'第二项'</span>),</span><br><span class="line">  ]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首次渲染 3</span></span><br><span class="line">patch(container, vnode);</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> newVnode = h(</span><br><span class="line">    <span class="string">'ul#list'</span>,</span><br><span class="line">    &#123;&#125;,</span><br><span class="line">    [</span><br><span class="line">      h(<span class="string">'li.item'</span>, &#123;&#125;, <span class="string">'第一项'</span>),</span><br><span class="line">      h(<span class="string">'li.item'</span>, &#123;&#125;, <span class="string">'第二项111'</span>),</span><br><span class="line">      h(<span class="string">'li.item'</span>, &#123;&#125;, <span class="string">'第三项'</span>)</span><br><span class="line">    ]</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 视图更新 6</span></span><br><span class="line">  patch(vnode, newVnode)</span><br><span class="line"></span><br><span class="line">  vnode = newVnode;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>patch的两个参数放入改变前后的h函数，比较两者的变化，计算出最少的DOM操作，并渲染或更新页面。</p><h3 id="渲染表格"><a href="#渲染表格" class="headerlink" title="渲染表格"></a>渲染表格</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> snabbdom = <span class="built_in">window</span>.snabbdom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> h = snabbdom.h;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> patch = snabbdom.init([</span><br><span class="line">  snabbdom_class,</span><br><span class="line">  snabbdom_props,</span><br><span class="line">  snabbdom_style,</span><br><span class="line">  snabbdom_eventlisteners,</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>);</span><br><span class="line"><span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'leah'</span>,</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    city: <span class="string">'北京'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'rin'</span>,</span><br><span class="line">    age: <span class="number">21</span>,</span><br><span class="line">    city: <span class="string">'上海'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'sam'</span>,</span><br><span class="line">    age: <span class="number">22</span>,</span><br><span class="line">    city: <span class="string">'广州'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">data.unshift(&#123;</span><br><span class="line">  name: <span class="string">'姓名'</span>,</span><br><span class="line">  age: <span class="string">'年龄'</span>,</span><br><span class="line">  city: <span class="string">'城市'</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> vnode;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> newVnode = h(</span><br><span class="line">    <span class="string">'table'</span>,</span><br><span class="line">    &#123;&#125;,</span><br><span class="line">    data.map(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> tds = [];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> item) &#123;</span><br><span class="line">        tds.push(h(<span class="string">'td'</span>, &#123;&#125;, item[i]));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> h(<span class="string">'tr'</span>, &#123;&#125;, tds);</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// vnode 老vnode  newVnode 新vnode</span></span><br><span class="line">  <span class="keyword">if</span> (vnode) &#123;</span><br><span class="line">    <span class="comment">// 视图更新</span></span><br><span class="line">    patch(vnode, newVnode);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 首次渲染</span></span><br><span class="line">    patch(container, newVnode);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  vnode = newVnode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render(data);</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">  data[<span class="number">1</span>].age = <span class="number">21</span>;</span><br><span class="line">  data[<span class="number">2</span>].city = <span class="string">'深圳'</span>;</span><br><span class="line"></span><br><span class="line">  render(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="虚拟DOM" scheme="http://yoursite.com/tags/%E8%99%9A%E6%8B%9FDOM/"/>
    
  </entry>
  
  <entry>
    <title>webpack报错-Invalid configuration object...</title>
    <link href="http://yoursite.com/2020/11/12/32-Invalid%20configuration%20object/"/>
    <id>http://yoursite.com/2020/11/12/32-Invalid%20configuration%20object/</id>
    <published>2020-11-12T06:11:42.000Z</published>
    <updated>2020-11-14T15:19:40.381Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>问题</strong>：webpack打包报错</p><p>![image-20201114231408267](C:\Users\Magic Book\AppData\Roaming\Typora\typora-user-images\image-20201114231408267.png)</p><p><strong>解决办法：</strong></p><p>报错信息中说配置模块中有一个未知的devServer属性。</p><p>检查webpack.config.js中的配置，发现devServer写在了module里，应该写在和module同级的位置，修改后重新打包，打包成功。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Error" scheme="http://yoursite.com/categories/Error/"/>
    
      <category term="webpack" scheme="http://yoursite.com/categories/Error/webpack/"/>
    
    
      <category term="Error" scheme="http://yoursite.com/tags/Error/"/>
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>forEach、filte、rmap使用与重写</title>
    <link href="http://yoursite.com/2020/11/10/31-forEachfiltermap%E4%BD%BF%E7%94%A8%E4%B8%8E%E9%87%8D%E5%86%99/"/>
    <id>http://yoursite.com/2020/11/10/31-forEachfiltermap%E4%BD%BF%E7%94%A8%E4%B8%8E%E9%87%8D%E5%86%99/</id>
    <published>2020-11-10T09:17:42.000Z</published>
    <updated>2020-11-13T15:23:53.393Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>以下几个方法都是ES5环境下的</p><h2 id="forEach遍历"><a href="#forEach遍历" class="headerlink" title="forEach遍历"></a>forEach遍历</h2><p>forEach是在Array.prototype上的方法，该方法的调用者必须为数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.forEach(参数<span class="number">1</span>[每次遍历执行的fn],参数<span class="number">2</span>[fn的<span class="keyword">this</span>指向])</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">elem,index,array</span>)</span>&#123;</span><br><span class="line">oLi[index].innerHTML = elem.course;</span><br><span class="line">&#125;,&#123;<span class="attr">name</span>:<span class="string">'test'</span>&#125;)</span><br><span class="line"><span class="comment">//当第二个参数为原始值时，会强制进行包装类，因为this指向对象，而null和undefined不能包装类，所以this还是指向Window</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//升级版</span></span><br><span class="line">data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">elem,index,array</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>[index].innerHTML = elem.course;</span><br><span class="line">&#125;,oLi)</span><br></pre></td></tr></table></figure><h3 id="重写forEach"><a href="#重写forEach" class="headerlink" title="重写forEach"></a>重写forEach</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myForEach = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">this</span>,</span><br><span class="line">len = arr.len,</span><br><span class="line">arg2 = <span class="built_in">arguments</span>[<span class="number">1</span>]||<span class="built_in">window</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">fn.apply(arg2,[arr[i],i,arr]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="filter过滤"><a href="#filter过滤" class="headerlink" title="filter过滤"></a>filter过滤</h2><p>是在Array.prototype上的方法，该方法的调用者必须为数组，<strong>返回一个新的数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newArr = data.filter(参数<span class="number">1</span>[每次遍历执行的fn,添加<span class="keyword">return</span>为<span class="literal">true</span>的元素到新数组中],参数<span class="number">2</span>[fn的<span class="keyword">this</span>指向])</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newArr = data.filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem,index,array</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> elem.is_free === <span class="string">'1'</span></span><br><span class="line">&#125;,&#123;<span class="attr">name</span>:<span class="string">'test'</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="重写filter"><a href="#重写filter" class="headerlink" title="重写filter"></a>重写filter</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myFilter = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = <span class="keyword">this</span>,</span><br><span class="line">        len = arr.len,</span><br><span class="line">        arg2 = <span class="built_in">arguments</span>[<span class="number">1</span>] || <span class="built_in">window</span>,</span><br><span class="line">        newArr = [],</span><br><span class="line">        item;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        item = deepclone(arr[i])</span><br><span class="line">        fn.apply(arg2, [arr[i], i, arr]) ? newArr.push(item) : <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> newArr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="map映射"><a href="#map映射" class="headerlink" title="map映射"></a>map映射</h2><p>是在Array.prototype上的方法，该方法的调用者必须为数组，<strong>返回一个新的数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newArr = data.map(参数<span class="number">1</span>[每次遍历执行的fn,添加<span class="keyword">return</span>指定值到新数组],参数<span class="number">2</span>[fn的<span class="keyword">this</span>指向])</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newArr = data.map(<span class="function"><span class="keyword">function</span>(<span class="params">elem,index,array</span>)</span>&#123;</span><br><span class="line">elem.course = <span class="keyword">this</span>.name +elem.course;</span><br><span class="line"><span class="keyword">return</span> elem;</span><br><span class="line">&#125;,&#123;<span class="attr">name</span>:<span class="string">'test'</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="重写map"><a href="#重写map" class="headerlink" title="重写map"></a>重写map</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myMap = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">this</span>,</span><br><span class="line">len = arr.length,</span><br><span class="line">arg2 = <span class="built_in">arguments</span>[<span class="number">1</span>] || <span class="built_in">window</span>,</span><br><span class="line">newArr = [],</span><br><span class="line">item;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">item = tools.deepclone(arr[i]);</span><br><span class="line">newArr.push(fn.apply(arg2,[arr[i],i,arr]););</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="ECMAscript" scheme="http://yoursite.com/categories/ECMAscript/"/>
    
    
      <category term="ECMAscript" scheme="http://yoursite.com/tags/ECMAscript/"/>
    
  </entry>
  
  <entry>
    <title>vue.set()的使用</title>
    <link href="http://yoursite.com/2020/11/08/30-vue.set%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2020/11/08/30-vue.set%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2020-11-08T05:27:42.000Z</published>
    <updated>2020-11-09T08:41:48.869Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>这里我定义了一个列表数据，我将通过三个不同的按钮来控制列表数据。</strong></p><p>首先在列表中动态新增一条数据：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app2"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--想了解这里key的作用请访问：(https://cn.vuejs.org/v2/api/#key)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span></span><br><span class="line">        &#123;&#123;item.message&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--@click等价于v-on:click--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span> @<span class="attr">click</span>=<span class="string">"btn1Click()"</span>&gt;</span>点我试试<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../../dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm2=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app2"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line">            items:[</span><br><span class="line"><span class="actionscript">                &#123;message:<span class="string">"Test one"</span>,id:<span class="string">"1"</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                &#123;message:<span class="string">"Test two"</span>,id:<span class="string">"2"</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                &#123;message:<span class="string">"Test three"</span>,id:<span class="string">"3"</span>&#125;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line"><span class="actionscript">            btn1Click:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.items.push(&#123;message:<span class="string">"动态新增"</span>&#125;);<span class="comment">//为data中的items动态新增一条数据</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这是我点击之前的列表：<br><img src= "/img/loading.gif" data-src="https://img-blog.csdn.net/20171129144459652?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA0NTU4NDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>点击之后列表新增了一条数据：<br><img src= "/img/loading.gif" data-src="https://img-blog.csdn.net/20171129144629643?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA0NTU4NDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>通过<strong>数组的变异方法</strong>（<a href="https://cn.vuejs.org/v2/guide/list.html#变异方法" target="_blank" rel="noopener">Vue数组变异方法</a>）我们可以动态控制数据的增减，但是我们却无法做到对某一条数据的修改。这时候就需要Vue的内置方法来帮忙了~</p><h2 id="Vue-set-响应式新增与修改数据"><a href="#Vue-set-响应式新增与修改数据" class="headerlink" title="Vue.set() 响应式新增与修改数据"></a>Vue.set() 响应式新增与修改数据</h2><hr><p>此时我们需要知道Vue.set()需要哪些参数，官方API：<a href="https://cn.vuejs.org/v2/api/#Vue-set" target="_blank" rel="noopener">Vue.set()</a></p><p>调用方法：Vue.set( target, key, value )</p><p>target：要更改的数据源(可以是对象或者数组)</p><p>key：要更改的具体数据</p><p>value ：重新赋的值</p><hr><p>我们依然用上面列表举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span></span><br><span class="line">        &#123;&#123;item.message&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span> @<span class="attr">click</span>=<span class="string">"btn2Click()"</span>&gt;</span>动态赋值<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span> @<span class="attr">click</span>=<span class="string">"btn3Click()"</span>&gt;</span>为data新增属性<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../../dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm2=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app2"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line">            items:[</span><br><span class="line"><span class="actionscript">                &#123;message:<span class="string">"Test one"</span>,id:<span class="string">"1"</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                &#123;message:<span class="string">"Test two"</span>,id:<span class="string">"2"</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                &#123;message:<span class="string">"Test three"</span>,id:<span class="string">"3"</span>&#125;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line"><span class="actionscript">            btn2Click:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//Vue methods中的this 指向的是Vue的实例，这里可以直接在this中找到items</span></span></span><br><span class="line"><span class="actionscript">                Vue.set(<span class="keyword">this</span>.items,<span class="number">0</span>,&#123;message:<span class="string">"Change Test"</span>,id:<span class="string">'10'</span>&#125;)</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            btn3Click:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> itemLen=<span class="keyword">this</span>.items.length;</span></span><br><span class="line"><span class="actionscript">                Vue.set(<span class="keyword">this</span>.items,itemLen,&#123;message:<span class="string">"Test add attr"</span>,id:itemLen&#125;);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时页面是这样</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdn.net/20171129151223616?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA0NTU4NDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>我点击第一个按钮后运行methods中的btn2Clcick方法，此时我要将Test one更改为Change Test</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdn.net/20171129152933733?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA0NTU4NDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>运行后的结果：此时列表中第一列的Test one已经变成了Change Test<br><img src= "/img/loading.gif" data-src="https://img-blog.csdn.net/20171129153244152?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA0NTU4NDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>这里得警惕一种情况：<br><strong>当写惯了JS之后，有可能我会想改数组中某个下标的中的数据我直接this.items[XX]就改了，如：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">btn2Click:function()&#123;</span><br><span class="line">                this.items[0]&#x3D;&#123;message:&quot;Change Test&quot;,id:&#39;10&#39;&#125;</span><br><span class="line">            &#125;123</span><br></pre></td></tr></table></figure><p>我们来看看结果：</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdn.net/20171129154026778?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA0NTU4NDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>这种情况，是Vue文档中明确指出的<strong><a href="https://cn.vuejs.org/v2/guide/list.html#注意事项" target="_blank" rel="noopener">注意事项</a></strong>，由于 JavaScript 的限制，Vue 不能检测出数据的改变，所以当我们需要动态改变数据的时候，Vue.set()完全可以满足我们的需求。</p><p><strong>仔细看的同学会问了，这不是还有一个按钮吗，有什么用？</strong></p><p>我们还是直接看：</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdn.net/20171129155807240?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA0NTU4NDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>这是初始的列表数据，数据里面有三个对象</p><p>点击之后：</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdn.net/20171129160023371?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA0NTU4NDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>这里可以看出，Vue.set()不光能修改数据，还能添加数据，弥补了<strong><a href="https://cn.vuejs.org/v2/guide/list.html#变异方法" target="_blank" rel="noopener">Vue数组变异方法</a></strong>的不足</p><p>Tip:Vue.set()在methods中也可以写成this.$set()</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>JSON基础与数据解析、JSON方法、AJAX初识</title>
    <link href="http://yoursite.com/2020/11/03/29-JSON%E5%9F%BA%E7%A1%80%E4%B8%8E%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90%E3%80%81JSON%E6%96%B9%E6%B3%95%E3%80%81AJAX%E5%88%9D%E8%AF%86/"/>
    <id>http://yoursite.com/2020/11/03/29-JSON%E5%9F%BA%E7%A1%80%E4%B8%8E%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90%E3%80%81JSON%E6%96%B9%E6%B3%95%E3%80%81AJAX%E5%88%9D%E8%AF%86/</id>
    <published>2020-11-03T12:23:22.000Z</published>
    <updated>2020-11-08T15:13:28.315Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>JSON(JavaScript Object Notation)是选择映射的关系形成的一种轻量级的数据交互的格式</p><h3 id="所有编程语言都离不开的三大数据类型"><a href="#所有编程语言都离不开的三大数据类型" class="headerlink" title="所有编程语言都离不开的三大数据类型"></a>所有编程语言都离不开的三大数据类型</h3><ul><li>scalar 标量  -&gt;字符串 数字</li><li>sequence  序列 -&gt;数组  列表list</li><li>mapping   映射-&gt; 键值对 键名：键值</li></ul><h3 id="JSON格式"><a href="#JSON格式" class="headerlink" title="JSON格式"></a>JSON格式</h3><ul><li>映射用冒号隔开</li><li>并列数据用逗号隔开</li><li>映射的集合用{}包裹</li><li>键名一定要用<strong>双引号</strong></li><li>并列数据集合用[]包裹</li></ul><h4 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h4><p>早期使用XML做数据交互，通过自定义标签定义数据</p><p><strong>缺点：</strong></p><ol><li>数据文档大</li><li>不易读</li><li>解析比较复杂</li></ol><h2 id="JSON方法"><a href="#JSON方法" class="headerlink" title="JSON方法"></a>JSON方法</h2><p><strong>JSON.parse()</strong> -&gt;JSON字符串转换成JSON对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> info = oDiv.getAttribute(<span class="string">'data-info'</span>);</span><br><span class="line"><span class="keyword">var</span> jsonData = <span class="built_in">JSON</span>.parse(info);</span><br></pre></td></tr></table></figure><p><strong>JSON.stringify()</strong> -&gt;JSON对象转换成JSON字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="string">"name"</span>:<span class="string">"李四"</span>,</span><br><span class="line"><span class="string">"age"</span> = <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> str = <span class="built_in">JSON</span>.stringify(obj);</span><br><span class="line">oDiv.setAttribute(<span class="string">'data-info'</span>,str)</span><br></pre></td></tr></table></figure><h3 id="企业案例写法"><a href="#企业案例写法" class="headerlink" title="企业案例写法"></a>企业案例写法</h3><p>缓解服务器压力</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"js_data"</span> <span class="attr">style</span>=<span class="string">"display:none"</span>&gt;</span></span><br><span class="line">     放JSON数据 </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/html"</span> <span class="attr">id</span>=<span class="string">"j_tpl"</span>&gt;</span></span><br><span class="line">放模板</span><br><span class="line"><span class="javascript"> &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"list-item"</span>&gt;</span></span><br><span class="line"><span class="javascript">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"mask"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><span class="template-variable">&#123;&#123;data.career&#125;（&#123;&#123;data.city&#125;&#125;</span><span class="xml">）<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>月薪</span><span class="template-variable">&#123;&#123;data.salary&#125;&#125;</span><span class="xml">K<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"student/</span></span></span><span class="template-variable">&#123;&#123;data.img&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> jsonData = <span class="built_in">document</span>.getElementById(<span class="string">'js_data'</span>).innerHTML,</span></span><br><span class="line"><span class="javascript">        tpl = <span class="built_in">document</span>.getElementById(<span class="string">'j_tpl'</span>).innerHTML</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> jsonData = <span class="built_in">document</span>.getElementById(<span class="string">'js_data'</span>).innerHTML,</span></span><br><span class="line"><span class="javascript">        tpl = <span class="built_in">document</span>.getElementById(<span class="string">'j_tpl'</span>).innerHTML,</span></span><br><span class="line"><span class="javascript">    data = <span class="built_in">JSON</span>.parse(jsonData),</span></span><br><span class="line">        len = data.length,</span><br><span class="line"><span class="javascript">        oList = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'j_list'</span>)[<span class="number">0</span>],</span></span><br><span class="line"><span class="actionscript">        list = <span class="string">''</span>,</span></span><br><span class="line">        item;</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(data);</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span></span><br><span class="line">        item = data[i];</span><br><span class="line">        list += setTplToHTML(tpl,regTpl,&#123;</span><br><span class="line">            career:item.carrer,</span><br><span class="line">            city:item.city,</span><br><span class="line">            salary:item.salary,</span><br><span class="line">            img:item.img</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    oList.innerHTML = list;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">setTplToHTML</span><span class="params">(tpl,regExp,opt)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> tpl.replace(regExp(),<span class="function"><span class="keyword">function</span><span class="params">(node,key)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> opt[key]</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;    </span><br><span class="line">    </span><br><span class="line">正则</span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">regTpl</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/&#123;&#123;(.*?)&#125;&#125;/</span>,<span class="string">'gim'</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="JSON" scheme="http://yoursite.com/categories/JSON/"/>
    
    
      <category term="JSON" scheme="http://yoursite.com/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>localStorage、sessionStorage、cookie</title>
    <link href="http://yoursite.com/2020/10/26/28-localStorage%E3%80%81sessionStorage%E3%80%81cookie/"/>
    <id>http://yoursite.com/2020/10/26/28-localStorage%E3%80%81sessionStorage%E3%80%81cookie/</id>
    <published>2020-10-26T12:23:22.000Z</published>
    <updated>2020-11-08T15:12:19.181Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><table><thead><tr><th></th><th>Cookies</th><th>local Storage</th><th>Session Storage</th></tr></thead><tbody><tr><td>Capacity</td><td>4kb</td><td>10mb</td><td>5mb</td></tr><tr><td>Browsers</td><td>HTML4/HTML5</td><td>HTML5</td><td>HTML5</td></tr><tr><td>Accessible frem</td><td>Any window</td><td>Any window</td><td>same tab</td></tr><tr><td>Storage Location</td><td>Browser and server</td><td>Browser</td><td>Browser</td></tr><tr><td>Expires</td><td>Manually set</td><td>Never</td><td>on tab close</td></tr><tr><td>Sent with request</td><td>yes</td><td>no</td><td>no</td></tr></tbody></table><p>cookie 小的偏好信息，如选择中文的信息保存到cookie</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">localStorage.setItem(<span class="string">'name'</span>,<span class="string">'leah'</span>);</span><br><span class="line">localStorage.getItem(<span class="string">'name'</span>);</span><br><span class="line">sessionStorage.setItem(<span class="string">'name'</span>,<span class="string">'leah'</span>);</span><br><span class="line">sessionStorage.getItem(<span class="string">'name'</span>);</span><br></pre></td></tr></table></figure><p>若设置的key相同，不会新增，新的value会替换旧value</p><p>localStorage永远都不会过期，sessionStorage在标签页关闭后被清除</p><p>如何删除localStorage？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">localStorage.removeItem(<span class="string">'name'</span>); <span class="comment">//删除一条</span></span><br><span class="line">localStorage.clear(); <span class="comment">//清除</span></span><br></pre></td></tr></table></figure><p>http协议是无状态的 stateless （第一次请求与第二次请求是没有关系的）</p><p>cookie保存在客户端，会话信息保存在服务端</p><p>跟踪用户</p><ol><li>HTTP headers</li><li>ip地址</li><li>用户登陆</li><li>胖URL</li><li>cookie  服务器发送给浏览器并保存在本地的一小块数据</li></ol><p>服务器接收到http请求，在响应头添加setCookie，并返回给客户端，cookie就会保存到浏览器中，之后每次在对服务器请求时都会带上cookie这条信息，服务器就能通过cookie判断用户，在数据库里找到关于cookie值的相对应信息，并返回想要获得的数据 </p><p>cookie只能逐条设置</p><h5 id="添加cookie"><a href="#添加cookie" class="headerlink" title="添加cookie"></a>添加cookie</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie = ‘name=zhengleah<span class="string">';</span></span><br><span class="line"><span class="string">//如果没有设置cookie的过期时间，就会默认添加上一个1969-12-31的过期时间，即关闭浏览器后就会删除的cookie</span></span><br><span class="line"><span class="string">document.cookie = ‘name=zhengleah;max-age=5000'</span>;</span><br><span class="line"><span class="comment">//当前的格林威治时间加上5000ms后才过期</span></span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>,</span><br><span class="line">    day = d.getDate();</span><br><span class="line">d.setDate(day + <span class="number">10</span>);</span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">'name=leah;expires='</span>+d</span><br><span class="line"><span class="comment">//十天后过期</span></span><br></pre></td></tr></table></figure><h5 id="删除cookie"><a href="#删除cookie" class="headerlink" title="删除cookie"></a>删除cookie</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>,</span><br><span class="line">    day = d.getDate();</span><br><span class="line">d.setDate(day - <span class="number">10</span>);</span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">'name=leah;expires='</span>+d</span><br><span class="line"><span class="comment">//设置过期时间为过去时间</span></span><br></pre></td></tr></table></figure><h5 id="增删改查函数"><a href="#增删改查函数" class="headerlink" title="增删改查函数"></a>增删改查函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> manegeCookies = &#123;</span><br><span class="line"><span class="keyword">set</span>:function(key,value,expTime)&#123;</span><br><span class="line"><span class="built_in">document</span>.cookie = key + <span class="string">'='</span> + value + <span class="string">';max-age='</span> + expTime;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">delete</span>:<span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.set[key,<span class="string">''</span>,<span class="number">-1</span>]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">get</span>:function(key,callback)&#123;</span><br><span class="line"><span class="keyword">var</span> CookieArray = <span class="built_in">document</span>.cookie.split(<span class="string">'; '</span>);</span><br><span class="line">        CookieArray.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">elem,idx</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> CookieItemArray = elem.split(<span class="string">'='</span>);</span><br><span class="line">            <span class="keyword">if</span>(CookieItemArray[<span class="number">0</span>] == key) &#123;</span><br><span class="line">                callback(CookieItemArray[<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        callback(<span class="literal">undefined</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">manegeCookies.set(<span class="string">'name'</span>,<span class="string">'leah'</span>,<span class="number">1000</span>);</span><br><span class="line">manegeCookies.delete(<span class="string">'name'</span>);</span><br><span class="line">manegeCookies.get(<span class="string">'name'</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="webstorage" scheme="http://yoursite.com/categories/webstorage/"/>
    
    
      <category term="webstorage" scheme="http://yoursite.com/tags/webstorage/"/>
    
  </entry>
  
  <entry>
    <title>迭代器与生成器的应用</title>
    <link href="http://yoursite.com/2020/10/06/27-%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%B8%8E%E7%94%9F%E6%88%90%E5%99%A8%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2020/10/06/27-%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%B8%8E%E7%94%9F%E6%88%90%E5%99%A8%E7%9A%84%E5%BA%94%E7%94%A8/</id>
    <published>2020-10-06T12:23:22.000Z</published>
    <updated>2020-10-06T14:41:22.759Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>迭代与遍历</p><p>迭代是本次遍历进行的一次程序上的输出</p><p>generator生成器（生产迭代器）-&gt;iterator迭代器（建立在遍历的基础上）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">test</span> (<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> item <span class="keyword">of</span> arr)&#123;</span><br><span class="line"><span class="keyword">yield</span> item;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生成迭代器</span></span><br><span class="line"><span class="keyword">var</span> iterator = test([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line">iterator.next() <span class="comment">//&#123;value:1,done:false&#125;</span></span><br><span class="line">iterator.next() <span class="comment">//&#123;value:2,done:false&#125;</span></span><br><span class="line">iterator.next() <span class="comment">//&#123;value:3,done:false&#125;</span></span><br><span class="line">iterator.next() <span class="comment">//&#123;value:undefined,done:true&#125;</span></span><br><span class="line"><span class="comment">//迭代完成意味着遍历完成</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//es5实现生成器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generator</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">        next:<span class="function"><span class="keyword">function</span>(<span class="params"></span>):</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> done = (i &gt;=arr.length),</span><br><span class="line">                value = !done?arr[i++]:<span class="literal">undefined</span>;</span><br><span class="line">            <span class="keyword">return</span>&#123;</span><br><span class="line">        value:value,</span><br><span class="line">                done:done</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生成迭代器</span></span><br><span class="line"><span class="keyword">var</span> iterator = generator([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line">iterator.next() <span class="comment">//&#123;value:1,done:false&#125;</span></span><br><span class="line">iterator.next() <span class="comment">//&#123;value:2,done:false&#125;</span></span><br><span class="line">iterator.next() <span class="comment">//&#123;value:3,done:false&#125;</span></span><br><span class="line">iterator.next() <span class="comment">//&#123;value:undefined,done:true&#125;</span></span><br></pre></td></tr></table></figure><p>node express 中间件 洋葱模型  </p><p>某种机制能够在中间件集合的某一项出现问题时截断程序运行</p><p>中间件集合：[test1, test2, test3, test4]</p><p>​        是否存在token-&gt;验证-&gt;是否过期-&gt;打开页面</p><p>当中间有一环节出错时，就立即截断执行</p><p>middleware中间件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (functions)=&gt;&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">generator</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> item <span class="keyword">of</span> arr)&#123;</span><br><span class="line">            <span class="keyword">yield</span> item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> iterator = generator(functions);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> init = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        nextDo(iterartor.next());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">nextDo</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">        n.value(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">const</span> n = iterator.next();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(!n.done)&#123;</span><br><span class="line">                nextDo(n);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    init()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> M <span class="keyword">from</span> <span class="string">'./middleware'</span>;</span><br><span class="line">M([text1,text2,text3]);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params">next</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'test1'</span>);</span><br><span class="line">    <span class="keyword">if</span>(...)&#123;</span><br><span class="line">       next();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       alert(<span class="string">'...'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params">next</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'test2'</span>);</span><br><span class="line"><span class="keyword">if</span>(...)&#123;</span><br><span class="line">       next();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       alert(<span class="string">'...'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test3</span>(<span class="params">next</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'test3'</span>);</span><br><span class="line"><span class="keyword">if</span>(...)&#123;</span><br><span class="line">       next();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       alert(<span class="string">'...'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>JS中的getter和setter</title>
    <link href="http://yoursite.com/2020/09/10/26-JS%E4%B8%AD%E7%9A%84getter%E5%92%8Csetter/"/>
    <id>http://yoursite.com/2020/09/10/26-JS%E4%B8%AD%E7%9A%84getter%E5%92%8Csetter/</id>
    <published>2020-09-10T05:16:24.000Z</published>
    <updated>2020-09-19T09:00:32.932Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>对象有两种属性：（1）数据属性，就是我们经常使用的属性（2）访问器属性，也称存取器属性</p><p>存取器属性就是一组获取和设置值的函数。getter负责获取值，它不带任何参数。setter负责设置值，在它的函数体中，一切的return都是无效的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  <span class="keyword">get</span> val()&#123;</span><br><span class="line">    <span class="comment">/*函数体*/</span></span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span> val(n)&#123;</span><br><span class="line">    <span class="comment">/*函数体*/</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在对象内如果设置了存取器属性，如果某一变量只声明了getter方法，那么它仅仅只可读而不可写。如果只声明了setter方法，那么读到的该变量值永远都是undefined。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只声明getter方法时不能通过getter方法来改变变量值</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">3</span>,</span><br><span class="line">  b: <span class="number">8</span>,</span><br><span class="line">  <span class="keyword">get</span> val() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.a;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.val);     <span class="comment">//3</span></span><br><span class="line">obj.val= <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.val); <span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//只声明setter方法时不能获取变量的值</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">3</span>,</span><br><span class="line">  b: <span class="number">8</span>,</span><br><span class="line">  <span class="keyword">set</span> val(n) &#123;</span><br><span class="line">    <span class="keyword">this</span>.a = n;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj.val);     <span class="comment">//undefined</span></span><br><span class="line">obj.val= <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.val); <span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.b);　　<span class="comment">//8   其他变量不受影响</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//同时声明两种方法</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">3</span>,</span><br><span class="line">  b: <span class="number">8</span>,</span><br><span class="line">  <span class="keyword">get</span> val()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.a;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span> val(n) &#123;</span><br><span class="line">    <span class="keyword">this</span>.a = n;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj.val);     <span class="comment">//3</span></span><br><span class="line">obj.val= <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.val); <span class="comment">//100</span></span><br></pre></td></tr></table></figure><p>setter和getter方法在定义时并未用function关键字</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>16-数组与数组的方法</title>
    <link href="http://yoursite.com/2020/08/11/25-%E6%95%B0%E7%BB%84%E5%8F%8A%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2020/08/11/25-%E6%95%B0%E7%BB%84%E5%8F%8A%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/</id>
    <published>2020-08-11T05:16:24.000Z</published>
    <updated>2020-08-11T15:01:44.553Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一、-创建数组的方式"><a href="#一、-创建数组的方式" class="headerlink" title="一、 创建数组的方式"></a>一、 创建数组的方式</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [];</span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(); <span class="comment">// 填一个数字参数表示数组的长度</span></span><br><span class="line"><span class="keyword">var</span> arr3 = <span class="built_in">Array</span>()</span><br></pre></td></tr></table></figure><p>所有的数组方法与属性都继承于Array.prototype。</p><h2 id="二、数组的方法"><a href="#二、数组的方法" class="headerlink" title="二、数组的方法"></a>二、数组的方法</h2><h3 id="1-返回修改后的原数组"><a href="#1-返回修改后的原数组" class="headerlink" title="1. 返回修改后的原数组"></a>1. 返回修改后的原数组</h3><ul><li><p><strong>push() / unshift()</strong> </p><p>返回值是执行了方法以后的数组<strong>长度</strong>。</p></li><li><p><strong>pop() / shift()</strong>  [<strong>无参数</strong>]</p><p>剪切从后至前或从前至后的第一位</p><p>返回值是被删除的值</p></li><li><p><strong>reverse()</strong>  倒序</p></li><li><p><strong>splice(开始项的下标,剪切长度,在剪切位置添加的数据)</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>];</span><br><span class="line">arr.splice(<span class="number">3</span>,<span class="number">0</span>,<span class="number">4</span>)  <span class="comment">//[1,2,3,4]  在开始项的前面添加数据</span></span><br><span class="line">arr.splice(<span class="number">-1</span>,<span class="number">0</span>,<span class="number">4</span>)  <span class="comment">//[1,2,3,4]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>sort()</strong>  按照ASCII码排序</p><ol><li>参数a和b</li><li>返回值<ul><li>正值，a&gt;b,b排前</li><li>负值，b&gt;a,a排前</li><li>0，保持不动</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> a-b&gt;<span class="number">0</span> ? <span class="number">-1</span> : <span class="number">1</span></span><br><span class="line">或</span><br><span class="line"><span class="keyword">return</span> a-b</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>//sort随机排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a.b</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> rand = <span class="built_in">Math</span>.random();</span><br><span class="line"><span class="keyword">return</span> rand<span class="number">-0.5</span>&gt;<span class="number">0</span> ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-返回修改后的新数组"><a href="#2-返回修改后的新数组" class="headerlink" title="2. 返回修改后的新数组"></a>2. 返回修改后的新数组</h3><ul><li><p><strong>concat()</strong></p><p>拼接两数组，返回新数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">arr2 = [<span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">arr3 = arr1.concat(arr2) <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>toString()</strong></p></li><li><p><strong>slice()</strong></p><p>[start, end) 从start开始，到end之前截取，并返回新数组</p></li><li><p><strong>join()</strong></p><p>将数组中的元素组成新的字符串，传入的参数是分隔符。</p></li><li><p><strong>split()</strong></p><p>与join()配合使用，将字符串按照分隔符分隔，重新生成数组。</p><p>第一个参数为分隔符，第二个参数为截取的长度</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="array" scheme="http://yoursite.com/categories/array/"/>
    
    
      <category term="array" scheme="http://yoursite.com/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>15-js浅拷贝与深拷贝的区别和实现方式</title>
    <link href="http://yoursite.com/2020/08/10/24-%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    <id>http://yoursite.com/2020/08/10/24-%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B7%B1%E6%8B%B7%E8%B4%9D/</id>
    <published>2020-08-10T07:14:53.000Z</published>
    <updated>2020-08-10T15:43:06.877Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h5 id="如何区分深拷贝与浅拷贝，简单点来说，就是假设B复制了A，当修改A时，看B是否会发生变化，如果B也跟着变了，说明这是浅拷贝，拿人手短，如果B没变，那就是深拷贝，自食其力。"><a href="#如何区分深拷贝与浅拷贝，简单点来说，就是假设B复制了A，当修改A时，看B是否会发生变化，如果B也跟着变了，说明这是浅拷贝，拿人手短，如果B没变，那就是深拷贝，自食其力。" class="headerlink" title="如何区分深拷贝与浅拷贝，简单点来说，就是假设B复制了A，当修改A时，看B是否会发生变化，如果B也跟着变了，说明这是浅拷贝，拿人手短，如果B没变，那就是深拷贝，自食其力。"></a>如何区分深拷贝与浅拷贝，简单点来说，就是假设B复制了A，当修改A时，看B是否会发生变化，如果B也跟着变了，说明这是浅拷贝，拿人手短，如果B没变，那就是深拷贝，自食其力。</h5><h3 id="1-如果是基本数据类型，名字和值都会储存在栈内存中"><a href="#1-如果是基本数据类型，名字和值都会储存在栈内存中" class="headerlink" title="1. 如果是基本数据类型，名字和值都会储存在栈内存中"></a>1. 如果是基本数据类型，名字和值都会储存在栈内存中</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">b = a; <span class="comment">// 栈内存会开辟一个新的内存空间，此时b和a都是相互独立的</span></span><br><span class="line">b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>当然，这也算不上深拷贝，因为深拷贝本身只针对较为复杂的object类型数据。</p><h3 id="2-如果是引用数据类型，名字存在栈内存中，值存在堆内存中，但是栈内存会提供一个引用的地址指向堆内存中的值"><a href="#2-如果是引用数据类型，名字存在栈内存中，值存在堆内存中，但是栈内存会提供一个引用的地址指向堆内存中的值" class="headerlink" title="2. 如果是引用数据类型，名字存在栈内存中，值存在堆内存中，但是栈内存会提供一个引用的地址指向堆内存中的值"></a>2. 如果是引用数据类型，名字存在栈内存中，值存在堆内存中，但是栈内存会提供一个引用的地址指向堆内存中的值</h3><h5 id="比如浅拷贝："><a href="#比如浅拷贝：" class="headerlink" title="比如浅拷贝："></a>比如浅拷贝：</h5><p><img src= "/img/loading.gif" data-src="https:////upload-images.jianshu.io/upload_images/15037426-33f5ceb9d7cb0a6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500/format/webp" alt="img"></p><p>当b=a进行拷贝时，其实复制的是a的引用地址，而并非堆里面的值。</p><p><img src= "/img/loading.gif" data-src="https:////upload-images.jianshu.io/upload_images/15037426-7bf9efc3a6e90bea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500/format/webp" alt="img"></p><p>而当我们a[0]=1时进行数组修改时，由于a与b指向的是同一个地址，所以自然b也受了影响，这就是所谓的浅拷贝了。</p><p><img src= "/img/loading.gif" data-src="https:////upload-images.jianshu.io/upload_images/15037426-aba3349a798ab52b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500/format/webp" alt="img"></p><p> 那，要是在堆内存中也开辟一个新的内存专门为b存放值，就像基本类型那样，岂不就达到深拷贝的效果了</p><p><img src= "/img/loading.gif" data-src="https:////upload-images.jianshu.io/upload_images/15037426-3cc2e0e955d177e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500/format/webp" alt="img"></p><h3 id="3-实现浅拷贝的方法"><a href="#3-实现浅拷贝的方法" class="headerlink" title="3. 实现浅拷贝的方法"></a>3. 实现浅拷贝的方法</h3><p>（1）for···in只循环第一层</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只复制第一层的浅拷贝</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">simpleCopy</span>(<span class="params">obj1</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> obj2 = <span class="built_in">Array</span>.isArray(obj1) ? [] : &#123;&#125;;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> obj1) &#123;</span><br><span class="line">   obj2[i] = obj1[i];</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="keyword">return</span> obj2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">   a: <span class="number">1</span>,</span><br><span class="line">   b: <span class="number">2</span>,</span><br><span class="line">   c: &#123;</span><br><span class="line">         d: <span class="number">3</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = simpleCopy(obj1);</span><br><span class="line">obj2.a = <span class="number">3</span>;</span><br><span class="line">obj2.c.d = <span class="number">4</span>;</span><br><span class="line">alert(obj1.a); <span class="comment">// 1</span></span><br><span class="line">alert(obj2.a); <span class="comment">// 3</span></span><br><span class="line">alert(obj1.c.d); <span class="comment">// 4</span></span><br><span class="line">alert(obj2.c.d); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p>（2）Object.assign方法</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1 = <span class="built_in">Object</span>.assign(obj);</span><br><span class="line">obj1.a = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.a) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>（3）直接用=赋值</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">    b=a;</span><br><span class="line"><span class="built_in">console</span>.log(a===b);</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a,b);</span><br></pre></td></tr></table></figure><h3 id="4-实现深拷贝的方法"><a href="#4-实现深拷贝的方法" class="headerlink" title="4. 实现深拷贝的方法"></a>4. 实现深拷贝的方法</h3><p>（1）采用递归去拷贝所有层级属性</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepclone</span>(<span class="params">origin, target</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> tar = target || &#123;&#125;;</span><br><span class="line">        <span class="keyword">let</span> objToString = <span class="built_in">Object</span>.prototype.toString;</span><br><span class="line">        <span class="keyword">let</span> arrType = <span class="string">'[object Array]'</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> origin) &#123;</span><br><span class="line">            <span class="keyword">if</span> (origin.hasOwnProperty(key)) &#123;</span><br><span class="line">               <span class="keyword">if</span> (<span class="keyword">typeof</span>(origin[key]) === <span class="string">'object'</span> &amp;&amp; origin[key] !== <span class="literal">null</span>) &#123;</span><br><span class="line">                   objToString.call(origin[key]) === arrType ? tar[key] = [] </span><br><span class="line">                      : tar[key] = &#123;&#125;;</span><br><span class="line">                   deepclone(origin[key], tar[key])</span><br><span class="line">                  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                      tar[key] = origin[key]</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> tar</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="深/浅拷贝" scheme="http://yoursite.com/categories/%E6%B7%B1-%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    
    
      <category term="深/浅拷贝" scheme="http://yoursite.com/tags/%E6%B7%B1-%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    
  </entry>
  
  <entry>
    <title>14-对象继承及圣杯模式函数封装</title>
    <link href="http://yoursite.com/2020/08/09/23-%E5%AF%B9%E8%B1%A1%E7%BB%A7%E6%89%BF%E4%B9%8B%E5%9C%A3%E6%9D%AF%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2020/08/09/23-%E5%AF%B9%E8%B1%A1%E7%BB%A7%E6%89%BF%E4%B9%8B%E5%9C%A3%E6%9D%AF%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-08-09T05:54:32.000Z</published>
    <updated>2020-08-09T15:41:55.607Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一、对象的继承"><a href="#一、对象的继承" class="headerlink" title="一、对象的继承"></a>一、对象的继承</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//--------继承------------</span></span><br><span class="line"> <span class="comment">//第一步：创建Father的原型属性</span></span><br><span class="line"> <span class="comment">//Ps:Father.prototype是一个构造函数</span></span><br><span class="line"> Father.prototype.lastName = <span class="string">"林"</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//第二步：创建Son的构造函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"> <span class="comment">//第三步：现在我们想让Son继承Father的原型</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">inherit</span>(<span class="params">Taret, Origin</span>) </span>&#123;</span><br><span class="line">         Taret.prototype = Origin.prototype</span><br><span class="line">            &#125;</span><br><span class="line">  <span class="comment">// 第四步：调用继承的方法，并创建Son的一个对象</span></span><br><span class="line">     inherit(Son, Father)</span><br><span class="line">     <span class="keyword">var</span> father = <span class="keyword">new</span> Father()</span><br><span class="line">     <span class="keyword">var</span> son = <span class="keyword">new</span> Son()</span><br><span class="line"> <span class="comment">//PS:此时son.lastName和father.lastName都能打印出“林”的信息</span></span><br><span class="line"> <span class="comment">//因为它们指向的是同一个 Father.prototype.lastName</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ---------那么一个问题来了，如果我们要个son的原型添加属性时，father的原型是否也会随之添加？？？-------</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//第一步：创建Father的原型属性</span></span><br><span class="line">  <span class="comment">//Ps:Father.prototype是一个构造函数</span></span><br><span class="line">  Father.prototype.lastName = <span class="string">"林"</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二步：创建Son的构造函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  <span class="comment">//第三步：现在我们想让Son继承Father的原型</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">inherit</span>(<span class="params">Taret, Origin</span>) </span>&#123;</span><br><span class="line">      Taret.prototype = Origin.prototype</span><br><span class="line">        &#125;</span><br><span class="line"> <span class="comment">// 第四步：调用继承的方法，并创建Son的一个对象</span></span><br><span class="line">    inherit(Son, Father)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第五步：我们给son的原型添加原型属性的age时，father也会有age的属性，</span></span><br><span class="line"> <span class="comment">// 因为它们指向的是同一个原型地址Father的原型</span></span><br><span class="line">  Son.prototype.age = <span class="string">"24岁"</span></span><br><span class="line">  <span class="keyword">var</span> father = <span class="keyword">new</span> Father()</span><br><span class="line">  <span class="keyword">var</span> son = <span class="keyword">new</span> Son()</span><br><span class="line">  <span class="comment">//Ps:这样就不符合要求了，我们只是想给son添加原型属性，但father也会受到影响</span></span><br></pre></td></tr></table></figure><h2 id="二、圣杯模式"><a href="#二、圣杯模式" class="headerlink" title="二、圣杯模式"></a>二、圣杯模式</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// -----------圣杯模式，他是解决上面father受污染的问题-----------------------</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一步：创建Father的原型属性</span></span><br><span class="line">        <span class="comment">//Ps:Father.prototype是一个构造函数</span></span><br><span class="line">        Father.prototype.lastName = <span class="string">"李白"</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">        <span class="comment">// 第二步：创建一个构造函数，以它作为一个中间层</span></span><br><span class="line">        Intermediate.prototype = Father.prototype</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">Intermediate</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">        <span class="comment">// 第三步：让son的原型继自中间层函数创建的一个对象</span></span><br><span class="line">        Son.prototype = <span class="keyword">new</span> Intermediate()</span><br><span class="line">            <span class="comment">//new Intermediate()创建出的一个对象是独立的个体，并且也继承了 Father.prototype.lastName</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">        <span class="comment">//第四步：现在如果给Son的原型添加原型属性age,Father的原型是否会受到影响呢？？？？</span></span><br><span class="line">        Son.prototype.age = <span class="string">"200岁"</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//第五步：给Son和Father创建一个对象</span></span><br><span class="line">        <span class="keyword">var</span> father = <span class="keyword">new</span> Father()</span><br><span class="line">        <span class="keyword">var</span> son = <span class="keyword">new</span> Son()</span><br><span class="line">            <span class="comment">//Ps：我们给Son添加原型属性，Father是不受到影响的，这就达到了我们的目的</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/09/a7Rq6U.png" alt=""></p><h2 id="三、继承函数的封装"><a href="#三、继承函数的封装" class="headerlink" title="三、继承函数的封装"></a>三、继承函数的封装</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//为了防止全局环境的污染，利于企业合作二次开发</span></span><br><span class="line"><span class="keyword">var</span> inherit=(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> Buffer = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">Target,Origin</span>) </span>&#123;</span><br><span class="line">Buffer.prototype = Origin.prototype;</span><br><span class="line">Target.prototype = <span class="keyword">new</span> Buffer();</span><br><span class="line">Target.prototype.constructor = Target;</span><br><span class="line">Target.prototype.super_class=Origin;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="对象继承" scheme="http://yoursite.com/categories/%E5%AF%B9%E8%B1%A1%E7%BB%A7%E6%89%BF/"/>
    
      <category term="圣杯模式" scheme="http://yoursite.com/categories/%E5%AF%B9%E8%B1%A1%E7%BB%A7%E6%89%BF/%E5%9C%A3%E6%9D%AF%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="对象继承" scheme="http://yoursite.com/tags/%E5%AF%B9%E8%B1%A1%E7%BB%A7%E6%89%BF/"/>
    
      <category term="圣杯模式" scheme="http://yoursite.com/tags/%E5%9C%A3%E6%9D%AF%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>13-JavaScript原型与原型链</title>
    <link href="http://yoursite.com/2020/08/08/22-JavaScript%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>http://yoursite.com/2020/08/08/22-JavaScript%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</id>
    <published>2020-08-08T10:23:10.000Z</published>
    <updated>2020-08-08T15:04:02.847Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一、prototype"><a href="#一、prototype" class="headerlink" title="一、prototype"></a>一、prototype</h2><p>在JavaScript中，每个函数都有一个prototype属性，这个属性指向函数的原型对象。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function Person(age) &#123;</span><br><span class="line">    this.age &#x3D; age       </span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.name &#x3D; &#39;kavin&#39;</span><br><span class="line">var person1 &#x3D; new Person()</span><br><span class="line">var person2 &#x3D; new Person()</span><br><span class="line">console.log(person1.name) &#x2F;&#x2F;kavin</span><br><span class="line">console.log(person2.name)  &#x2F;&#x2F;kavin</span><br></pre></td></tr></table></figure><p>上述例子中，函数的prototype指向了一个对象，而这个对象正是调用构造函数时创建的实例的原型，也就是person1和person2的原型。</p><p>原型的概念：每一个javascript对象(除null外)创建的时候，就会与之关联另一个对象，这个对象就是我们所说的原型，每一个对象都会从原型中“继承”属性。</p><p>让我们用一张图表示构造函数和实例原型之间的关系：</p><p><img src= "/img/loading.gif" data-src="https://img2018.cnblogs.com/blog/850375/201907/850375-20190708151024134-512558007.png" alt="img"></p><h2 id="二、-proto"><a href="#二、-proto" class="headerlink" title="二、__ proto __"></a>二、__ proto __</h2><p>这是每个实例化对象(除null外)都会有的属性，叫做__ proto __，这个属性会指向该对象的原型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function Person() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">var person &#x3D; new Person();</span><br><span class="line">console.log(person.__proto__ &#x3D;&#x3D;&#x3D; Person.prototype); &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure><p>而关系图：</p><p><img src= "/img/loading.gif" data-src="https://img2018.cnblogs.com/blog/850375/201907/850375-20190708151322530-1608157973.png" alt="img"></p><p>补充说明：</p><p>绝大部分浏览器都支持这个非标准的方法访问原型，然而它并不存在于 Person.prototype 中，实际上，它是来自于 Object.prototype ，与其说是一个属性，不如说是一个 getter/setter，当使用 obj.<strong>proto</strong> 时，可以理解成返回了 Object.getPrototypeOf(obj)。</p><h2 id="三、constructor"><a href="#三、constructor" class="headerlink" title="三、constructor"></a>三、constructor</h2><p>每个原型都有一个constructor属性，指向该关联的构造函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function Person() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">console.log(Person&#x3D;&#x3D;&#x3D;Person.prototype.constructor)  &#x2F;&#x2F;true</span><br></pre></td></tr></table></figure><p>所以再更新下关系图：</p><p><img src= "/img/loading.gif" data-src="https://img2018.cnblogs.com/blog/850375/201907/850375-20190708151615691-1017611190.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function Person() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var person &#x3D; new Person();</span><br><span class="line"></span><br><span class="line">console.log(person.__proto__ &#x3D;&#x3D; Person.prototype) &#x2F;&#x2F; true</span><br><span class="line">console.log(Person.prototype.constructor &#x3D;&#x3D; Person) &#x2F;&#x2F; true</span><br><span class="line">&#x2F;&#x2F; 顺便学习一个ES5的方法,可以获得对象的原型</span><br><span class="line">console.log(Object.getPrototypeOf(person) &#x3D;&#x3D;&#x3D; Person.prototype) &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure><p>补充说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function Person() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">var person &#x3D; new Person();</span><br><span class="line">console.log(person.constructor &#x3D;&#x3D;&#x3D; Person); &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure><p>当获取 person.constructor 时，其实 person 中并没有 constructor 属性,当不能读取到constructor 属性时，会从 person 的原型也就是 Person.prototype 中读取，正好原型中有该属性，所以：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">person.constructor &#x3D;&#x3D;&#x3D; Person.prototype.constructor</span><br></pre></td></tr></table></figure><h2 id="四、实例与原型"><a href="#四、实例与原型" class="headerlink" title="四、实例与原型"></a>四、实例与原型</h2><p> 当读取实例的属性时，如果找不到，就会查找与对象关联的原型中的属性，如果还查不到，就去找原型的原型，一直找到最顶层为止。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function Person() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.name &#x3D; &#39;Kevin&#39;;</span><br><span class="line"></span><br><span class="line">var person &#x3D; new Person();</span><br><span class="line"></span><br><span class="line">person.name &#x3D; &#39;Daisy&#39;;</span><br><span class="line">console.log(person.name) &#x2F;&#x2F; Daisy</span><br><span class="line"></span><br><span class="line">delete person.name;</span><br><span class="line">console.log(person.name) &#x2F;&#x2F; Kevin</span><br></pre></td></tr></table></figure><p>在这个例子中，我们给实例对象 person 添加了 name 属性，当我们打印 person.name 的时候，结果自然为 Daisy。</p><p>但是当我们删除了 person 的 name 属性时，读取 person.name，从 person 对象中找不到 name 属性就会从 person 的原型也就是 person.<strong>proto</strong> ，也就是 Person.prototype中查找，幸运的是我们找到了 name 属性，结果为 Kevin。</p><p>但是万一还没有找到呢？原型的原型又是什么呢？</p><h2 id="五、原型的原型"><a href="#五、原型的原型" class="headerlink" title="五、原型的原型"></a>五、原型的原型</h2><p> 在前面，我们已经讲了原型也是一个对象，既然是对象，我们就可以用最原始的方式创建它，那就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var obj &#x3D; new Object();</span><br><span class="line">obj.name &#x3D; &#39;Kevin&#39;</span><br><span class="line">console.log(obj.name) &#x2F;&#x2F; Kevin</span><br></pre></td></tr></table></figure><p>其实原型对象就是通过 Object 构造函数生成的，结合之前所讲，实例的 <strong>proto</strong> 指向构造函数的 prototype ，所以我们再更新下关系图：</p><p><img src= "/img/loading.gif" data-src="https://img2018.cnblogs.com/blog/850375/201907/850375-20190708152327825-11086376.png" alt="img"></p><h2 id="六、原型链"><a href="#六、原型链" class="headerlink" title="六、原型链"></a>六、原型链</h2><p> 简单的回顾一下构造函数、原型和实例的关系：每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。那么假如我们让原型对象等于另一个类型的实例，结果会怎样？显然，此时的原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中也包含着一个指向另一个构造函数的指针。假如另一个原型又是另一个类型的实例，那么上述关系依然成立。如此层层递进，就构成了实例与原型的链条。这就是所谓的原型链的基本概念。——摘自《javascript高级程序设计》</p><p>其实简单来说，就是上述四-五的过程。</p><p>继上述五中所说，那 Object.prototype 的原型呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(Object.prototype.__proto__ &#x3D;&#x3D;&#x3D; null) &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure><p>引用阮一峰老师的 <a href="http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html" target="_blank" rel="noopener">《undefined与null的区别》</a> 就是：</p><blockquote><p>null 表示“没有对象”，即该处不应该有值。</p></blockquote><p>所以 Object.prototype.<strong>proto</strong> 的值为 null 跟 Object.prototype 没有原型，其实表达了一个意思。</p><p>所以查找属性的时候查到 Object.prototype 就可以停止查找了。</p><p>最后一张关系图也可以更新为：</p><p><img src= "/img/loading.gif" data-src="https://img2018.cnblogs.com/blog/850375/201907/850375-20190708153139577-2105652554.png" alt="img"></p><p>图中由相互关联的原型组成的链状结构就是原型链，也就是蓝色的这条线。</p><h2 id="七、原型的用法"><a href="#七、原型的用法" class="headerlink" title="七、原型的用法"></a>七、原型的用法</h2><p>一般把组件的方法写在其原型上，需要传参配置的属性放在构造函数上。</p><p>封装插件的写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">;(function()&#123;</span><br><span class="line">let Test &#x3D; function(name) &#123;</span><br><span class="line"> this.name &#x3D; name</span><br><span class="line">&#125;</span><br><span class="line">Test.prototype&#x3D;&#123;</span><br><span class="line">say:function()&#123;</span><br><span class="line"> console.log(this.name+&#39;said something&#39;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">window.Test &#x3D; Test;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">let test &#x3D; new Test(&#39;leah&#39;);</span><br><span class="line">test.say() &#x2F;&#x2F;leah said something</span><br></pre></td></tr></table></figure><p><strong>Object.create</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var obj1 &#x3D; Object.create(Obj.prototype);&#x2F;&#x2F;传入自定义原型</span><br><span class="line">var obj2 &#x3D; new Obj()</span><br></pre></td></tr></table></figure><p>以上两种方式效果相同</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="原型" scheme="http://yoursite.com/categories/%E5%8E%9F%E5%9E%8B/"/>
    
      <category term="原型链" scheme="http://yoursite.com/categories/%E5%8E%9F%E5%9E%8B/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
    
      <category term="原型" scheme="http://yoursite.com/tags/%E5%8E%9F%E5%9E%8B/"/>
    
      <category term="原型链" scheme="http://yoursite.com/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>12-图解作用域、作用域链及闭包</title>
    <link href="http://yoursite.com/2020/08/04/21-%E5%9B%BE%E8%A7%A3%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%E5%8F%8A%E9%97%AD%E5%8C%85/"/>
    <id>http://yoursite.com/2020/08/04/21-%E5%9B%BE%E8%A7%A3%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%E5%8F%8A%E9%97%AD%E5%8C%85/</id>
    <published>2020-08-04T07:52:14.000Z</published>
    <updated>2020-08-06T15:13:26.075Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>上一篇博文已经整理关于AO与GO的知识点，现在要基于前面的知识总结作用域、作用域链及闭包。</p><h2 id="图解作用域、作用域链及闭包"><a href="#图解作用域、作用域链及闭包" class="headerlink" title="图解作用域、作用域链及闭包"></a>图解作用域、作用域链及闭包</h2><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/06/aRueZd.png" alt="aRueZd.png"></p><p>举上面这个函数为例，首先创建GO（全局执行上下文），GO中有test1：(function)、c：3、test3：(function)，</p><p>这时test1函数声明已被定义，所以生成了test1的[[scope]]作用域，[[scope]]中又保存了scope chain作用域链，此时作用域链的第0位储存当前环境的的GO，如下图所示：</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/06/aRuVqH.png" alt="aRuVqH.png"></p><p>然后test1被执行前的预编译，函数test2被定义，生成了test2的[[scope]]，里面保存了scope chain，函数声明被定义时取上级作用域链暂时作为scope chain的内容，test2的上级作用域链是test1，所以此时test2的作用域链与test1相同。</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/06/aRumdA.png" alt="aRumdA.png"></p><p>函数test1执行结束时与test1的AO断开，但是因为return了函数test2，test2被全局变量test3所接收，test2的作用域还连着test1的AO，所以test1的AO还不能销毁。</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/06/aRuKit.png" alt="aRuKit.png"></p><p>test3执行，test2的作用链上增加了自己的AO，当打印a的时候，test2在自己的AO上没有找到，于是向下层的test1的AO中查找，找到a后输出1。</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/06/aRunII.png" alt="aRunII.png"></p><p>test3执行结束后，test2自己的AO被销毁，但test1的AO仍然存在且被test2紧紧攥着。当test3再次执行时，test2又会重新创建自己的AO，查找test1AO中的a并输出。</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/06/aRuMJP.png" alt="aRuMJP.png"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>函数声明在<strong>定义</strong>的时候会取<strong>上级作用域环境</strong>，在执行时的前一刻（<strong>预编译</strong>环节）会<strong>生成自己的AO</strong>，执行<strong>结束</strong>时回到之前<strong>定义时</strong>的状态，即<strong>删除自己的AO</strong>，若有执行函数有下级函数，那么下级函数的[[scope]]会被销毁，因为被删除的AO中储存了下级函数。</p><p>当<strong>内部</strong>函数被返回到<strong>外部并保存</strong>时，一定会产生<strong>闭包</strong>，闭包会使得原来的作用域链<strong>不被释放</strong>，从而一直保存着数据。<strong>过度</strong>的闭包可能会导致<strong>内存泄漏或者加载过慢</strong>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="闭包" scheme="http://yoursite.com/categories/%E9%97%AD%E5%8C%85/"/>
    
    
      <category term="闭包" scheme="http://yoursite.com/tags/%E9%97%AD%E5%8C%85/"/>
    
      <category term="作用域" scheme="http://yoursite.com/tags/%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    
      <category term="作用域链" scheme="http://yoursite.com/tags/%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>11-JavaScript预编译过程</title>
    <link href="http://yoursite.com/2020/08/03/20-JavaScript%E9%A2%84%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/08/03/20-JavaScript%E9%A2%84%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/</id>
    <published>2020-08-03T06:43:24.000Z</published>
    <updated>2020-08-06T15:13:29.202Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>预编译是执行函数之前的过程</p><h3 id="GO全局的执行期上下文"><a href="#GO全局的执行期上下文" class="headerlink" title="GO全局的执行期上下文"></a>GO全局的执行期上下文</h3><ol><li>寻找变量声明</li><li>寻找函数声明</li><li>执行 </li></ol><h3 id="AO函数的执行器上下文"><a href="#AO函数的执行器上下文" class="headerlink" title="AO函数的执行器上下文"></a>AO函数的执行器上下文</h3><ol><li>寻找形参和变量声明</li><li>实参值赋值给形参</li><li>寻找函数声明，赋值</li><li>执行</li></ol><p><strong>在函数内部未声明的变量会提升到全局作用域，即暗示全局作用域</strong></p><h4 id="例题一"><a href="#例题一" class="headerlink" title="例题一"></a>例题一</h4><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/05/a6R61K.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/05/a6ROBQ.png" alt=""></p><h4 id="例题二"><a href="#例题二" class="headerlink" title="例题二"></a>例题二</h4><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/06/a6Rzhq.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/06/a6W93V.png" alt=""></p><h4 id="例题三"><a href="#例题三" class="headerlink" title="例题三"></a>例题三</h4><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/06/a6WVE9.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/06/a6WAHJ.png" alt=""></p><h4 id="例题四"><a href="#例题四" class="headerlink" title="例题四"></a>例题四</h4><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/06/a6Wn9x.png" alt=""></p><h4 id="例题五"><a href="#例题五" class="headerlink" title="例题五"></a>例题五</h4><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/06/a6WJUA.png" alt=""></p><h4 id="例题六"><a href="#例题六" class="headerlink" title="例题六"></a>例题六</h4><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/06/a6WGEd.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/06/a6W3HH.png" alt=""></p><h4 id="例题七"><a href="#例题七" class="headerlink" title="例题七"></a>例题七</h4><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/06/a6WBDg.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/06/a6Wdv8.png" alt=""></p><h4 id="例题八"><a href="#例题八" class="headerlink" title="例题八"></a>例题八</h4><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/06/a6W0KS.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/08/06/a6Wagf.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="预编译" scheme="http://yoursite.com/categories/%E9%A2%84%E7%BC%96%E8%AF%91/"/>
    
    
      <category term="预编译" scheme="http://yoursite.com/tags/%E9%A2%84%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>10-Javascript显式和隐式类型转换</title>
    <link href="http://yoursite.com/2020/08/02/19-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
    <id>http://yoursite.com/2020/08/02/19-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E8%BD%AC%E6%8D%A2/</id>
    <published>2020-08-02T04:23:43.000Z</published>
    <updated>2020-08-04T14:39:29.142Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="显式类型转换"><a href="#显式类型转换" class="headerlink" title="显式类型转换"></a>显式类型转换</h2><h3 id="1-Number"><a href="#1-Number" class="headerlink" title="1.Number()"></a>1.Number()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Number(true&#x2F;false)  &#x2F;&#x2F; 1&#x2F;0</span><br><span class="line">Number(null)   &#x2F;&#x2F; 0</span><br><span class="line">Number(undefined)&#x2F;&#x2F; NaN</span><br><span class="line">Number(&#39;a&#39;)   &#x2F;&#x2F; NaN</span><br><span class="line">Number(&#39;1a&#39;) &#x2F;&#x2F; NaN</span><br></pre></td></tr></table></figure><h2 id="2-praseInt"><a href="#2-praseInt" class="headerlink" title="2.praseInt()"></a>2.praseInt()</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">praseInt(true&#x2F;false) &#x2F;&#x2F; NaN</span><br><span class="line">praseInt(null)  &#x2F;&#x2F; 0</span><br><span class="line">praseInt(undefined)  &#x2F;&#x2F; NaN</span><br><span class="line">praseInt(NaN) &#x2F;&#x2F; NaN</span><br><span class="line">praseInt(&#39;abc123&#39;)   &#x2F;&#x2F; NaN</span><br><span class="line">praseInt(&#39;123abc&#39;)   &#x2F;&#x2F; 123</span><br></pre></td></tr></table></figure><h2 id="3-Boolean"><a href="#3-Boolean" class="headerlink" title="3.Boolean()"></a>3.Boolean()</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Boolean(1&#x2F;0)&#x2F;&#x2F; ture&#x2F;false</span><br><span class="line">Boolean(null)&#x2F;&#x2F; false</span><br><span class="line">Boolean(undefined)  &#x2F;&#x2F; false</span><br><span class="line">Boolean(NaN)&#x2F;&#x2F; false</span><br><span class="line">Boolean(&quot;&quot;)&#x2F;&#x2F; false</span><br><span class="line">Boolean(0)&#x2F;&#x2F; false</span><br><span class="line">Boolean(false)&#x2F;&#x2F; false</span><br><span class="line">其他都是true</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">undefined.toString()和null.toString()都会报错</span><br></pre></td></tr></table></figure><h2 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h2><h4 id="隐式转成number"><a href="#隐式转成number" class="headerlink" title="隐式转成number"></a>隐式转成number</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+;-;*;&#x2F;;%;</span><br><span class="line">++;--;&#x3D;&#x3D;;!&#x3D;;</span><br><span class="line">&gt;;&lt;;&lt;&#x3D;;&gt;&#x3D;;</span><br><span class="line">补充：undefined&#x3D;&#x3D;null</span><br></pre></td></tr></table></figure><h3 id="isNaN"><a href="#isNaN" class="headerlink" title="isNaN()"></a>isNaN()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">isNaN(NaN)&#x2F;&#x2F;true</span><br><span class="line">isNaN(123)&#x2F;&#x2F;false</span><br><span class="line">isNaN(&#39;123&#39;)&#x2F;&#x2F;false</span><br><span class="line">isNaN(undefined)&#x2F;&#x2F;true</span><br><span class="line">isNaN(null)&#x2F;&#x2F;false</span><br><span class="line">isNaN(&#39;a&#39;)&#x2F;&#x2F;true</span><br><span class="line">number &#x3D;&gt;isNaN &#x3D;&gt;boo</span><br></pre></td></tr></table></figure><h2 id="typeof-判断类型"><a href="#typeof-判断类型" class="headerlink" title="typeof()判断类型"></a>typeof()判断类型</h2><ol><li>123 =&gt; number</li><li>‘123’ =&gt; string</li><li>{123},[123],null =&gt;object</li><li>function(){} =&gt;function</li><li>undefined</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">typeof(1-&#39;1&#39;) &#x2F;&#x2F; number</span><br><span class="line">typeof(&#39;1&#39;-&#39;1&#39;)&#x2F;&#x2F;number</span><br><span class="line">typeof(1)&#x2F;&#x2F;number</span><br><span class="line">typeof(typeof(1))&#x2F;&#x2F;string</span><br><span class="line">typeof(undefined)&#x2F;&#x2F;undefined</span><br><span class="line">typeof(typeof(undefined))&#x2F;&#x2F;string</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="数据类型" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
    
      <category term="数据类型" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>vue解决跨域问题</title>
    <link href="http://yoursite.com/2020/08/01/18-vue%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2020/08/01/18-vue%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</id>
    <published>2020-08-01T08:14:35.000Z</published>
    <updated>2020-08-03T12:29:46.058Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>一.什么是跨域</strong></p><p>跨域问题的出现是因为浏览器的同源策略问题，所谓同源:就是两个页面具有相同的协议（protocol），主机（host）和端口号（port），它是浏览器最核心也是最基本的功能，如果没有同源策略我们的浏览器将会十分的不安全，随时都可能受到攻击。</p><p>当我们请求一个接口的时候，出现如：Access-Control-Allow-Origin 字眼的时候说明请求跨域了</p><p><img src= "/img/loading.gif" data-src="https://img2018.cnblogs.com/i-beta/1649717/202002/1649717-20200227142258131-1409861315.png" alt=""></p><p><strong>二.如何解决跨域问题</strong></p><p>在vue项目根目录下找到vue.config.js文件（如果没有该文件则自己创建），在proxy中设置跨域</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    proxy: &#123;  &#x2F;&#x2F;配置跨域</span><br><span class="line">      &#39;&#x2F;api&#39;: &#123;</span><br><span class="line">        target: &#39;http:&#x2F;&#x2F;121.121.67.254:8185&#x2F;&#39;,  &#x2F;&#x2F;这里后台的地址模拟的;应该填写你们真实的后台接口</span><br><span class="line">        changOrigin: true,  &#x2F;&#x2F;允许跨域</span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          &#x2F;* 重写路径，当我们在浏览器中看到请求的地址为：http:&#x2F;&#x2F;localhost:8080&#x2F;api&#x2F;core&#x2F;getData&#x2F;userInfo 时</span><br><span class="line">            实际上访问的地址是：http:&#x2F;&#x2F;121.121.67.254:8185&#x2F;core&#x2F;getData&#x2F;userInfo,因为重写了 &#x2F;api</span><br><span class="line">           *&#x2F;</span><br><span class="line">          &#39;^&#x2F;api&#39;: &#39;&#39; </span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p><strong>在vue中使用proxy进行跨域的原理是：将域名发送给本地的服务器（启动vue项目的服务,loclahost:8080），再由本地的服务器去请求真正的服务器。</strong></p><p>以下是我在开发vue项目中实现跨域的步骤：</p><p>　　1.在proxy中设置要访问的地址，并重写/api为空的字符串，因为我们真正请求的地址是没有带/api，这个重写很重要!!!</p><p>　　<img src= "/img/loading.gif" data-src="https://img2018.cnblogs.com/i-beta/1649717/202002/1649717-20200227144905470-1085262547.png" alt="img"></p><p> 　2.在创建axios实例的时候将baseURL设置为/api ,这时候我们的跨域就已经完成了。</p><p>　　<img src= "/img/loading.gif" data-src="https://img2018.cnblogs.com/i-beta/1649717/202002/1649717-20200227145106938-1311841373.png" alt="img"></p><p> 　3. 假如请求的真正地址为：<a href="http://121.121.67.254:8185/core/getdata/userInfo,但我们在浏览器上会看到是这样的：" target="_blank" rel="noopener">http://121.121.67.254:8185/core/getdata/userInfo,但我们在浏览器上会看到是这样的：</a> <a href="http://localhost:8080/api/core/getData/userInfo" target="_blank" rel="noopener">http://localhost:8080/api/core/getData/userInfo</a> ,多了个/api，但并不影响我们请求数据。</p><p>　　<img src= "/img/loading.gif" data-src="https://img2018.cnblogs.com/i-beta/1649717/202002/1649717-20200227151147818-885350634.png" alt="img"></p><p><strong>注意：当修改了vue.config.js中的内容后，一定要重新启动服务yarn start 或者npm run dev之后，修改的内容才会生效</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="VUE" scheme="http://yoursite.com/categories/VUE/"/>
    
      <category term="跨域" scheme="http://yoursite.com/categories/VUE/%E8%B7%A8%E5%9F%9F/"/>
    
    
      <category term="VUE" scheme="http://yoursite.com/tags/VUE/"/>
    
      <category term="跨域" scheme="http://yoursite.com/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>实现一个sleep函数</title>
    <link href="http://yoursite.com/2020/07/29/17-%E5%AE%9E%E7%8E%B0sleep%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2020/07/29/17-%E5%AE%9E%E7%8E%B0sleep%E5%87%BD%E6%95%B0/</id>
    <published>2020-07-29T08:12:32.000Z</published>
    <updated>2020-08-01T13:23:52.419Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="实现一个sleep函数，比如sleep-1000-意味着等待1000毫秒，可以从Promise、Generator、Async-Await等角度实现。"><a href="#实现一个sleep函数，比如sleep-1000-意味着等待1000毫秒，可以从Promise、Generator、Async-Await等角度实现。" class="headerlink" title="实现一个sleep函数，比如sleep(1000)意味着等待1000毫秒，可以从Promise、Generator、Async/Await等角度实现。"></a>实现一个sleep函数，比如sleep(1000)意味着等待1000毫秒，可以从Promise、Generator、Async/Await等角度实现。</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function sleep(ms) &#123;</span><br><span class="line">return new Promise(resolve&#x3D;&gt;&#123;</span><br><span class="line"> setInterval(resolve,ms)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(async()&#x3D;&gt;&#123;</span><br><span class="line">console.log(111)</span><br><span class="line">await sleep(2000)</span><br><span class="line">console.log(222)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="E6" scheme="http://yoursite.com/categories/E6/"/>
    
      <category term="Promise" scheme="http://yoursite.com/categories/E6/Promise/"/>
    
      <category term="async/await" scheme="http://yoursite.com/categories/E6/Promise/async-await/"/>
    
    
      <category term="Promise" scheme="http://yoursite.com/tags/Promise/"/>
    
      <category term="E6" scheme="http://yoursite.com/tags/E6/"/>
    
      <category term="async/await" scheme="http://yoursite.com/tags/async-await/"/>
    
  </entry>
  
</feed>
